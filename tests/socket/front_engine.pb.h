// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: front_engine.proto

#ifndef PROTOBUF_front_5fengine_2eproto__INCLUDED
#define PROTOBUF_front_5fengine_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

namespace FrontEngine {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_front_5fengine_2eproto();
void protobuf_AssignDesc_front_5fengine_2eproto();
void protobuf_ShutdownFile_front_5fengine_2eproto();

class CallBackMessage;
class CanceledCallBack;
class CheckAppId;
class CheckAppIdCallBack;
class CoinCapital;
class CoinInfo;
class CreateAccountCallBack;
class CreateAccountRequest;
class HeartBeatCallBack;
class HeartBeatRequest;
class Order;
class QueryBalanceCallBack;
class QueryBalanceRequest;
class QueryFeeCallBack;
class QueryFeeRequest;
class QueryOrderCallBack;
class QueryOrderRequest;
class QueryOrdersCallBack;
class QueryOrdersRequest;
class RecieveCoinRequest;
class RejectedCallBack;
class RequestMessage;
class SendCoinRequest;
class TradedCallBack;
class UserInfo;
class enums;

enum enums_OrderStatus {
  enums_OrderStatus_NONE_ORDER_STATUS = 0,
  enums_OrderStatus_TO_BE_REPORTED = 1,
  enums_OrderStatus_REPORTED = 2,
  enums_OrderStatus_PARTIAL_TRADED = 3,
  enums_OrderStatus_PARTIAL_CANCELED = 4,
  enums_OrderStatus_TRADED = 5,
  enums_OrderStatus_REJECTED = 6,
  enums_OrderStatus_enums_OrderStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  enums_OrderStatus_enums_OrderStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool enums_OrderStatus_IsValid(int value);
const enums_OrderStatus enums_OrderStatus_OrderStatus_MIN = enums_OrderStatus_NONE_ORDER_STATUS;
const enums_OrderStatus enums_OrderStatus_OrderStatus_MAX = enums_OrderStatus_REJECTED;
const int enums_OrderStatus_OrderStatus_ARRAYSIZE = enums_OrderStatus_OrderStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* enums_OrderStatus_descriptor();
inline const ::std::string& enums_OrderStatus_Name(enums_OrderStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    enums_OrderStatus_descriptor(), value);
}
inline bool enums_OrderStatus_Parse(
    const ::std::string& name, enums_OrderStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<enums_OrderStatus>(
    enums_OrderStatus_descriptor(), name, value);
}
enum enums_CoinType {
  enums_CoinType_NONE_COIN_TYPE = 0,
  enums_CoinType_BTC = 1,
  enums_CoinType_ETH = 2,
  enums_CoinType_BUSD = 3,
  enums_CoinType_enums_CoinType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  enums_CoinType_enums_CoinType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool enums_CoinType_IsValid(int value);
const enums_CoinType enums_CoinType_CoinType_MIN = enums_CoinType_NONE_COIN_TYPE;
const enums_CoinType enums_CoinType_CoinType_MAX = enums_CoinType_BUSD;
const int enums_CoinType_CoinType_ARRAYSIZE = enums_CoinType_CoinType_MAX + 1;

const ::google::protobuf::EnumDescriptor* enums_CoinType_descriptor();
inline const ::std::string& enums_CoinType_Name(enums_CoinType value) {
  return ::google::protobuf::internal::NameOfEnum(
    enums_CoinType_descriptor(), value);
}
inline bool enums_CoinType_Parse(
    const ::std::string& name, enums_CoinType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<enums_CoinType>(
    enums_CoinType_descriptor(), name, value);
}
enum enums_RequestType {
  enums_RequestType_NONE_REQUEST_TYPE = 0,
  enums_RequestType_CreateAccountRequest = 1,
  enums_RequestType_QueryBalanceRequest = 2,
  enums_RequestType_QueryFeeRequest = 3,
  enums_RequestType_QueryOrderRequest = 4,
  enums_RequestType_QueryOrdersRequest = 5,
  enums_RequestType_SendCoinRequest = 6,
  enums_RequestType_RecieveCoinRequest = 7,
  enums_RequestType_HeartBeatRequest = 8,
  enums_RequestType_CheckAppId = 9,
  enums_RequestType_enums_RequestType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  enums_RequestType_enums_RequestType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool enums_RequestType_IsValid(int value);
const enums_RequestType enums_RequestType_RequestType_MIN = enums_RequestType_NONE_REQUEST_TYPE;
const enums_RequestType enums_RequestType_RequestType_MAX = enums_RequestType_CheckAppId;
const int enums_RequestType_RequestType_ARRAYSIZE = enums_RequestType_RequestType_MAX + 1;

const ::google::protobuf::EnumDescriptor* enums_RequestType_descriptor();
inline const ::std::string& enums_RequestType_Name(enums_RequestType value) {
  return ::google::protobuf::internal::NameOfEnum(
    enums_RequestType_descriptor(), value);
}
inline bool enums_RequestType_Parse(
    const ::std::string& name, enums_RequestType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<enums_RequestType>(
    enums_RequestType_descriptor(), name, value);
}
enum enums_CallBackType {
  enums_CallBackType_NONE_CALLBACK_TYPE = 0,
  enums_CallBackType_CreateAccountCallBack = 1,
  enums_CallBackType_QueryBalanceCallBack = 2,
  enums_CallBackType_QueryFeeCallBack = 3,
  enums_CallBackType_QueryOrderCallBack = 4,
  enums_CallBackType_QueryOrdersCallBack = 5,
  enums_CallBackType_TradedCallBack = 6,
  enums_CallBackType_CanceledCallBack = 7,
  enums_CallBackType_RejectedCallBack = 8,
  enums_CallBackType_HeartBeatCallBack = 9,
  enums_CallBackType_CheckAppIdCallBack = 10,
  enums_CallBackType_enums_CallBackType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  enums_CallBackType_enums_CallBackType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool enums_CallBackType_IsValid(int value);
const enums_CallBackType enums_CallBackType_CallBackType_MIN = enums_CallBackType_NONE_CALLBACK_TYPE;
const enums_CallBackType enums_CallBackType_CallBackType_MAX = enums_CallBackType_CheckAppIdCallBack;
const int enums_CallBackType_CallBackType_ARRAYSIZE = enums_CallBackType_CallBackType_MAX + 1;

const ::google::protobuf::EnumDescriptor* enums_CallBackType_descriptor();
inline const ::std::string& enums_CallBackType_Name(enums_CallBackType value) {
  return ::google::protobuf::internal::NameOfEnum(
    enums_CallBackType_descriptor(), value);
}
inline bool enums_CallBackType_Parse(
    const ::std::string& name, enums_CallBackType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<enums_CallBackType>(
    enums_CallBackType_descriptor(), name, value);
}
// ===================================================================

class enums : public ::google::protobuf::Message {
 public:
  enums();
  virtual ~enums();

  enums(const enums& from);

  inline enums& operator=(const enums& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const enums& default_instance();

  void Swap(enums* other);

  // implements Message ----------------------------------------------

  inline enums* New() const { return New(NULL); }

  enums* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const enums& from);
  void MergeFrom(const enums& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(enums* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef enums_OrderStatus OrderStatus;
  static const OrderStatus NONE_ORDER_STATUS = enums_OrderStatus_NONE_ORDER_STATUS;
  static const OrderStatus TO_BE_REPORTED = enums_OrderStatus_TO_BE_REPORTED;
  static const OrderStatus REPORTED = enums_OrderStatus_REPORTED;
  static const OrderStatus PARTIAL_TRADED = enums_OrderStatus_PARTIAL_TRADED;
  static const OrderStatus PARTIAL_CANCELED = enums_OrderStatus_PARTIAL_CANCELED;
  static const OrderStatus TRADED = enums_OrderStatus_TRADED;
  static const OrderStatus REJECTED = enums_OrderStatus_REJECTED;
  static inline bool OrderStatus_IsValid(int value) {
    return enums_OrderStatus_IsValid(value);
  }
  static const OrderStatus OrderStatus_MIN =
    enums_OrderStatus_OrderStatus_MIN;
  static const OrderStatus OrderStatus_MAX =
    enums_OrderStatus_OrderStatus_MAX;
  static const int OrderStatus_ARRAYSIZE =
    enums_OrderStatus_OrderStatus_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  OrderStatus_descriptor() {
    return enums_OrderStatus_descriptor();
  }
  static inline const ::std::string& OrderStatus_Name(OrderStatus value) {
    return enums_OrderStatus_Name(value);
  }
  static inline bool OrderStatus_Parse(const ::std::string& name,
      OrderStatus* value) {
    return enums_OrderStatus_Parse(name, value);
  }

  typedef enums_CoinType CoinType;
  static const CoinType NONE_COIN_TYPE = enums_CoinType_NONE_COIN_TYPE;
  static const CoinType BTC = enums_CoinType_BTC;
  static const CoinType ETH = enums_CoinType_ETH;
  static const CoinType BUSD = enums_CoinType_BUSD;
  static inline bool CoinType_IsValid(int value) {
    return enums_CoinType_IsValid(value);
  }
  static const CoinType CoinType_MIN =
    enums_CoinType_CoinType_MIN;
  static const CoinType CoinType_MAX =
    enums_CoinType_CoinType_MAX;
  static const int CoinType_ARRAYSIZE =
    enums_CoinType_CoinType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CoinType_descriptor() {
    return enums_CoinType_descriptor();
  }
  static inline const ::std::string& CoinType_Name(CoinType value) {
    return enums_CoinType_Name(value);
  }
  static inline bool CoinType_Parse(const ::std::string& name,
      CoinType* value) {
    return enums_CoinType_Parse(name, value);
  }

  typedef enums_RequestType RequestType;
  static const RequestType NONE_REQUEST_TYPE = enums_RequestType_NONE_REQUEST_TYPE;
  static const RequestType CreateAccountRequest = enums_RequestType_CreateAccountRequest;
  static const RequestType QueryBalanceRequest = enums_RequestType_QueryBalanceRequest;
  static const RequestType QueryFeeRequest = enums_RequestType_QueryFeeRequest;
  static const RequestType QueryOrderRequest = enums_RequestType_QueryOrderRequest;
  static const RequestType QueryOrdersRequest = enums_RequestType_QueryOrdersRequest;
  static const RequestType SendCoinRequest = enums_RequestType_SendCoinRequest;
  static const RequestType RecieveCoinRequest = enums_RequestType_RecieveCoinRequest;
  static const RequestType HeartBeatRequest = enums_RequestType_HeartBeatRequest;
  static const RequestType CheckAppId = enums_RequestType_CheckAppId;
  static inline bool RequestType_IsValid(int value) {
    return enums_RequestType_IsValid(value);
  }
  static const RequestType RequestType_MIN =
    enums_RequestType_RequestType_MIN;
  static const RequestType RequestType_MAX =
    enums_RequestType_RequestType_MAX;
  static const int RequestType_ARRAYSIZE =
    enums_RequestType_RequestType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  RequestType_descriptor() {
    return enums_RequestType_descriptor();
  }
  static inline const ::std::string& RequestType_Name(RequestType value) {
    return enums_RequestType_Name(value);
  }
  static inline bool RequestType_Parse(const ::std::string& name,
      RequestType* value) {
    return enums_RequestType_Parse(name, value);
  }

  typedef enums_CallBackType CallBackType;
  static const CallBackType NONE_CALLBACK_TYPE = enums_CallBackType_NONE_CALLBACK_TYPE;
  static const CallBackType CreateAccountCallBack = enums_CallBackType_CreateAccountCallBack;
  static const CallBackType QueryBalanceCallBack = enums_CallBackType_QueryBalanceCallBack;
  static const CallBackType QueryFeeCallBack = enums_CallBackType_QueryFeeCallBack;
  static const CallBackType QueryOrderCallBack = enums_CallBackType_QueryOrderCallBack;
  static const CallBackType QueryOrdersCallBack = enums_CallBackType_QueryOrdersCallBack;
  static const CallBackType TradedCallBack = enums_CallBackType_TradedCallBack;
  static const CallBackType CanceledCallBack = enums_CallBackType_CanceledCallBack;
  static const CallBackType RejectedCallBack = enums_CallBackType_RejectedCallBack;
  static const CallBackType HeartBeatCallBack = enums_CallBackType_HeartBeatCallBack;
  static const CallBackType CheckAppIdCallBack = enums_CallBackType_CheckAppIdCallBack;
  static inline bool CallBackType_IsValid(int value) {
    return enums_CallBackType_IsValid(value);
  }
  static const CallBackType CallBackType_MIN =
    enums_CallBackType_CallBackType_MIN;
  static const CallBackType CallBackType_MAX =
    enums_CallBackType_CallBackType_MAX;
  static const int CallBackType_ARRAYSIZE =
    enums_CallBackType_CallBackType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CallBackType_descriptor() {
    return enums_CallBackType_descriptor();
  }
  static inline const ::std::string& CallBackType_Name(CallBackType value) {
    return enums_CallBackType_Name(value);
  }
  static inline bool CallBackType_Parse(const ::std::string& name,
      CallBackType* value) {
    return enums_CallBackType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:FrontEngine.enums)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_front_5fengine_2eproto();
  friend void protobuf_AssignDesc_front_5fengine_2eproto();
  friend void protobuf_ShutdownFile_front_5fengine_2eproto();

  void InitAsDefaultInstance();
  static enums* default_instance_;
};
// -------------------------------------------------------------------

class Order : public ::google::protobuf::Message {
 public:
  Order();
  virtual ~Order();

  Order(const Order& from);

  inline Order& operator=(const Order& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Order& default_instance();

  void Swap(Order* other);

  // implements Message ----------------------------------------------

  inline Order* New() const { return New(NULL); }

  Order* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Order& from);
  void MergeFrom(const Order& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Order* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string order_id = 1;
  void clear_order_id();
  static const int kOrderIdFieldNumber = 1;
  const ::std::string& order_id() const;
  void set_order_id(const ::std::string& value);
  void set_order_id(const char* value);
  void set_order_id(const char* value, size_t size);
  ::std::string* mutable_order_id();
  ::std::string* release_order_id();
  void set_allocated_order_id(::std::string* order_id);

  // optional .FrontEngine.enums.CoinType type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::FrontEngine::enums_CoinType type() const;
  void set_type(::FrontEngine::enums_CoinType value);

  // optional string from_address = 3;
  void clear_from_address();
  static const int kFromAddressFieldNumber = 3;
  const ::std::string& from_address() const;
  void set_from_address(const ::std::string& value);
  void set_from_address(const char* value);
  void set_from_address(const char* value, size_t size);
  ::std::string* mutable_from_address();
  ::std::string* release_from_address();
  void set_allocated_from_address(::std::string* from_address);

  // optional string to_address = 4;
  void clear_to_address();
  static const int kToAddressFieldNumber = 4;
  const ::std::string& to_address() const;
  void set_to_address(const ::std::string& value);
  void set_to_address(const char* value);
  void set_to_address(const char* value, size_t size);
  ::std::string* mutable_to_address();
  ::std::string* release_to_address();
  void set_allocated_to_address(::std::string* to_address);

  // optional string description = 5;
  void clear_description();
  static const int kDescriptionFieldNumber = 5;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // optional string amount = 6;
  void clear_amount();
  static const int kAmountFieldNumber = 6;
  const ::std::string& amount() const;
  void set_amount(const ::std::string& value);
  void set_amount(const char* value);
  void set_amount(const char* value, size_t size);
  ::std::string* mutable_amount();
  ::std::string* release_amount();
  void set_allocated_amount(::std::string* amount);

  // optional string fee = 7;
  void clear_fee();
  static const int kFeeFieldNumber = 7;
  const ::std::string& fee() const;
  void set_fee(const ::std::string& value);
  void set_fee(const char* value);
  void set_fee(const char* value, size_t size);
  ::std::string* mutable_fee();
  ::std::string* release_fee();
  void set_allocated_fee(::std::string* fee);

  // optional int32 order_date = 8;
  void clear_order_date();
  static const int kOrderDateFieldNumber = 8;
  ::google::protobuf::int32 order_date() const;
  void set_order_date(::google::protobuf::int32 value);

  // optional int32 order_time = 9;
  void clear_order_time();
  static const int kOrderTimeFieldNumber = 9;
  ::google::protobuf::int32 order_time() const;
  void set_order_time(::google::protobuf::int32 value);

  // optional .FrontEngine.enums.OrderStatus status = 10;
  void clear_status();
  static const int kStatusFieldNumber = 10;
  ::FrontEngine::enums_OrderStatus status() const;
  void set_status(::FrontEngine::enums_OrderStatus value);

  // @@protoc_insertion_point(class_scope:FrontEngine.Order)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr order_id_;
  ::google::protobuf::internal::ArenaStringPtr from_address_;
  ::google::protobuf::internal::ArenaStringPtr to_address_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  int type_;
  ::google::protobuf::int32 order_date_;
  ::google::protobuf::internal::ArenaStringPtr amount_;
  ::google::protobuf::internal::ArenaStringPtr fee_;
  ::google::protobuf::int32 order_time_;
  int status_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_front_5fengine_2eproto();
  friend void protobuf_AssignDesc_front_5fengine_2eproto();
  friend void protobuf_ShutdownFile_front_5fengine_2eproto();

  void InitAsDefaultInstance();
  static Order* default_instance_;
};
// -------------------------------------------------------------------

class CoinInfo : public ::google::protobuf::Message {
 public:
  CoinInfo();
  virtual ~CoinInfo();

  CoinInfo(const CoinInfo& from);

  inline CoinInfo& operator=(const CoinInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CoinInfo& default_instance();

  void Swap(CoinInfo* other);

  // implements Message ----------------------------------------------

  inline CoinInfo* New() const { return New(NULL); }

  CoinInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CoinInfo& from);
  void MergeFrom(const CoinInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CoinInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .FrontEngine.enums.CoinType type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::FrontEngine::enums_CoinType type() const;
  void set_type(::FrontEngine::enums_CoinType value);

  // optional string ch_name = 2;
  void clear_ch_name();
  static const int kChNameFieldNumber = 2;
  const ::std::string& ch_name() const;
  void set_ch_name(const ::std::string& value);
  void set_ch_name(const char* value);
  void set_ch_name(const char* value, size_t size);
  ::std::string* mutable_ch_name();
  ::std::string* release_ch_name();
  void set_allocated_ch_name(::std::string* ch_name);

  // optional string en_name = 3;
  void clear_en_name();
  static const int kEnNameFieldNumber = 3;
  const ::std::string& en_name() const;
  void set_en_name(const ::std::string& value);
  void set_en_name(const char* value);
  void set_en_name(const char* value, size_t size);
  ::std::string* mutable_en_name();
  ::std::string* release_en_name();
  void set_allocated_en_name(::std::string* en_name);

  // optional double base_fee = 4;
  void clear_base_fee();
  static const int kBaseFeeFieldNumber = 4;
  double base_fee() const;
  void set_base_fee(double value);

  // @@protoc_insertion_point(class_scope:FrontEngine.CoinInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr ch_name_;
  ::google::protobuf::internal::ArenaStringPtr en_name_;
  double base_fee_;
  int type_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_front_5fengine_2eproto();
  friend void protobuf_AssignDesc_front_5fengine_2eproto();
  friend void protobuf_ShutdownFile_front_5fengine_2eproto();

  void InitAsDefaultInstance();
  static CoinInfo* default_instance_;
};
// -------------------------------------------------------------------

class CoinCapital : public ::google::protobuf::Message {
 public:
  CoinCapital();
  virtual ~CoinCapital();

  CoinCapital(const CoinCapital& from);

  inline CoinCapital& operator=(const CoinCapital& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CoinCapital& default_instance();

  void Swap(CoinCapital* other);

  // implements Message ----------------------------------------------

  inline CoinCapital* New() const { return New(NULL); }

  CoinCapital* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CoinCapital& from);
  void MergeFrom(const CoinCapital& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CoinCapital* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string address = 1;
  void clear_address();
  static const int kAddressFieldNumber = 1;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // optional .FrontEngine.enums.CoinType type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::FrontEngine::enums_CoinType type() const;
  void set_type(::FrontEngine::enums_CoinType value);

  // optional string amount = 3;
  void clear_amount();
  static const int kAmountFieldNumber = 3;
  const ::std::string& amount() const;
  void set_amount(const ::std::string& value);
  void set_amount(const char* value);
  void set_amount(const char* value, size_t size);
  ::std::string* mutable_amount();
  ::std::string* release_amount();
  void set_allocated_amount(::std::string* amount);

  // optional string frozen_amount = 4;
  void clear_frozen_amount();
  static const int kFrozenAmountFieldNumber = 4;
  const ::std::string& frozen_amount() const;
  void set_frozen_amount(const ::std::string& value);
  void set_frozen_amount(const char* value);
  void set_frozen_amount(const char* value, size_t size);
  ::std::string* mutable_frozen_amount();
  ::std::string* release_frozen_amount();
  void set_allocated_frozen_amount(::std::string* frozen_amount);

  // @@protoc_insertion_point(class_scope:FrontEngine.CoinCapital)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  ::google::protobuf::internal::ArenaStringPtr amount_;
  ::google::protobuf::internal::ArenaStringPtr frozen_amount_;
  int type_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_front_5fengine_2eproto();
  friend void protobuf_AssignDesc_front_5fengine_2eproto();
  friend void protobuf_ShutdownFile_front_5fengine_2eproto();

  void InitAsDefaultInstance();
  static CoinCapital* default_instance_;
};
// -------------------------------------------------------------------

class UserInfo : public ::google::protobuf::Message {
 public:
  UserInfo();
  virtual ~UserInfo();

  UserInfo(const UserInfo& from);

  inline UserInfo& operator=(const UserInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserInfo& default_instance();

  void Swap(UserInfo* other);

  // implements Message ----------------------------------------------

  inline UserInfo* New() const { return New(NULL); }

  UserInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserInfo& from);
  void MergeFrom(const UserInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UserInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .FrontEngine.enums.CoinType type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::FrontEngine::enums_CoinType type() const;
  void set_type(::FrontEngine::enums_CoinType value);

  // optional string username = 2;
  void clear_username();
  static const int kUsernameFieldNumber = 2;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // optional string password = 3;
  void clear_password();
  static const int kPasswordFieldNumber = 3;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // optional string address = 4;
  void clear_address();
  static const int kAddressFieldNumber = 4;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // @@protoc_insertion_point(class_scope:FrontEngine.UserInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  int type_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_front_5fengine_2eproto();
  friend void protobuf_AssignDesc_front_5fengine_2eproto();
  friend void protobuf_ShutdownFile_front_5fengine_2eproto();

  void InitAsDefaultInstance();
  static UserInfo* default_instance_;
};
// -------------------------------------------------------------------

class HeartBeatRequest : public ::google::protobuf::Message {
 public:
  HeartBeatRequest();
  virtual ~HeartBeatRequest();

  HeartBeatRequest(const HeartBeatRequest& from);

  inline HeartBeatRequest& operator=(const HeartBeatRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HeartBeatRequest& default_instance();

  void Swap(HeartBeatRequest* other);

  // implements Message ----------------------------------------------

  inline HeartBeatRequest* New() const { return New(NULL); }

  HeartBeatRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HeartBeatRequest& from);
  void MergeFrom(const HeartBeatRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(HeartBeatRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string request_id = 1;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 1;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // optional string data = 2;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  void set_data(const char* value);
  void set_data(const char* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:FrontEngine.HeartBeatRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_front_5fengine_2eproto();
  friend void protobuf_AssignDesc_front_5fengine_2eproto();
  friend void protobuf_ShutdownFile_front_5fengine_2eproto();

  void InitAsDefaultInstance();
  static HeartBeatRequest* default_instance_;
};
// -------------------------------------------------------------------

class HeartBeatCallBack : public ::google::protobuf::Message {
 public:
  HeartBeatCallBack();
  virtual ~HeartBeatCallBack();

  HeartBeatCallBack(const HeartBeatCallBack& from);

  inline HeartBeatCallBack& operator=(const HeartBeatCallBack& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HeartBeatCallBack& default_instance();

  void Swap(HeartBeatCallBack* other);

  // implements Message ----------------------------------------------

  inline HeartBeatCallBack* New() const { return New(NULL); }

  HeartBeatCallBack* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HeartBeatCallBack& from);
  void MergeFrom(const HeartBeatCallBack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(HeartBeatCallBack* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string request_id = 1;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 1;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // optional string data = 2;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  void set_data(const char* value);
  void set_data(const char* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:FrontEngine.HeartBeatCallBack)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_front_5fengine_2eproto();
  friend void protobuf_AssignDesc_front_5fengine_2eproto();
  friend void protobuf_ShutdownFile_front_5fengine_2eproto();

  void InitAsDefaultInstance();
  static HeartBeatCallBack* default_instance_;
};
// -------------------------------------------------------------------

class CheckAppId : public ::google::protobuf::Message {
 public:
  CheckAppId();
  virtual ~CheckAppId();

  CheckAppId(const CheckAppId& from);

  inline CheckAppId& operator=(const CheckAppId& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CheckAppId& default_instance();

  void Swap(CheckAppId* other);

  // implements Message ----------------------------------------------

  inline CheckAppId* New() const { return New(NULL); }

  CheckAppId* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CheckAppId& from);
  void MergeFrom(const CheckAppId& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CheckAppId* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string request_id = 1;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 1;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // optional string app_id = 2;
  void clear_app_id();
  static const int kAppIdFieldNumber = 2;
  const ::std::string& app_id() const;
  void set_app_id(const ::std::string& value);
  void set_app_id(const char* value);
  void set_app_id(const char* value, size_t size);
  ::std::string* mutable_app_id();
  ::std::string* release_app_id();
  void set_allocated_app_id(::std::string* app_id);

  // @@protoc_insertion_point(class_scope:FrontEngine.CheckAppId)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::internal::ArenaStringPtr app_id_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_front_5fengine_2eproto();
  friend void protobuf_AssignDesc_front_5fengine_2eproto();
  friend void protobuf_ShutdownFile_front_5fengine_2eproto();

  void InitAsDefaultInstance();
  static CheckAppId* default_instance_;
};
// -------------------------------------------------------------------

class CheckAppIdCallBack : public ::google::protobuf::Message {
 public:
  CheckAppIdCallBack();
  virtual ~CheckAppIdCallBack();

  CheckAppIdCallBack(const CheckAppIdCallBack& from);

  inline CheckAppIdCallBack& operator=(const CheckAppIdCallBack& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CheckAppIdCallBack& default_instance();

  void Swap(CheckAppIdCallBack* other);

  // implements Message ----------------------------------------------

  inline CheckAppIdCallBack* New() const { return New(NULL); }

  CheckAppIdCallBack* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CheckAppIdCallBack& from);
  void MergeFrom(const CheckAppIdCallBack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CheckAppIdCallBack* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string request_id = 1;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 1;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // optional string app_id = 2;
  void clear_app_id();
  static const int kAppIdFieldNumber = 2;
  const ::std::string& app_id() const;
  void set_app_id(const ::std::string& value);
  void set_app_id(const char* value);
  void set_app_id(const char* value, size_t size);
  ::std::string* mutable_app_id();
  ::std::string* release_app_id();
  void set_allocated_app_id(::std::string* app_id);

  // optional string sdk_id = 3;
  void clear_sdk_id();
  static const int kSdkIdFieldNumber = 3;
  const ::std::string& sdk_id() const;
  void set_sdk_id(const ::std::string& value);
  void set_sdk_id(const char* value);
  void set_sdk_id(const char* value, size_t size);
  ::std::string* mutable_sdk_id();
  ::std::string* release_sdk_id();
  void set_allocated_sdk_id(::std::string* sdk_id);

  // @@protoc_insertion_point(class_scope:FrontEngine.CheckAppIdCallBack)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::internal::ArenaStringPtr app_id_;
  ::google::protobuf::internal::ArenaStringPtr sdk_id_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_front_5fengine_2eproto();
  friend void protobuf_AssignDesc_front_5fengine_2eproto();
  friend void protobuf_ShutdownFile_front_5fengine_2eproto();

  void InitAsDefaultInstance();
  static CheckAppIdCallBack* default_instance_;
};
// -------------------------------------------------------------------

class CreateAccountRequest : public ::google::protobuf::Message {
 public:
  CreateAccountRequest();
  virtual ~CreateAccountRequest();

  CreateAccountRequest(const CreateAccountRequest& from);

  inline CreateAccountRequest& operator=(const CreateAccountRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateAccountRequest& default_instance();

  void Swap(CreateAccountRequest* other);

  // implements Message ----------------------------------------------

  inline CreateAccountRequest* New() const { return New(NULL); }

  CreateAccountRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CreateAccountRequest& from);
  void MergeFrom(const CreateAccountRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CreateAccountRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string request_id = 1;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 1;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // optional .FrontEngine.enums.CoinType coin_type = 2;
  void clear_coin_type();
  static const int kCoinTypeFieldNumber = 2;
  ::FrontEngine::enums_CoinType coin_type() const;
  void set_coin_type(::FrontEngine::enums_CoinType value);

  // optional string username = 3;
  void clear_username();
  static const int kUsernameFieldNumber = 3;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // optional string password = 4;
  void clear_password();
  static const int kPasswordFieldNumber = 4;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // @@protoc_insertion_point(class_scope:FrontEngine.CreateAccountRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  int coin_type_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_front_5fengine_2eproto();
  friend void protobuf_AssignDesc_front_5fengine_2eproto();
  friend void protobuf_ShutdownFile_front_5fengine_2eproto();

  void InitAsDefaultInstance();
  static CreateAccountRequest* default_instance_;
};
// -------------------------------------------------------------------

class CreateAccountCallBack : public ::google::protobuf::Message {
 public:
  CreateAccountCallBack();
  virtual ~CreateAccountCallBack();

  CreateAccountCallBack(const CreateAccountCallBack& from);

  inline CreateAccountCallBack& operator=(const CreateAccountCallBack& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateAccountCallBack& default_instance();

  void Swap(CreateAccountCallBack* other);

  // implements Message ----------------------------------------------

  inline CreateAccountCallBack* New() const { return New(NULL); }

  CreateAccountCallBack* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CreateAccountCallBack& from);
  void MergeFrom(const CreateAccountCallBack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CreateAccountCallBack* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string request_id = 1;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 1;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // optional .FrontEngine.UserInfo account = 2;
  bool has_account() const;
  void clear_account();
  static const int kAccountFieldNumber = 2;
  const ::FrontEngine::UserInfo& account() const;
  ::FrontEngine::UserInfo* mutable_account();
  ::FrontEngine::UserInfo* release_account();
  void set_allocated_account(::FrontEngine::UserInfo* account);

  // optional int32 errorCode = 3;
  void clear_errorcode();
  static const int kErrorCodeFieldNumber = 3;
  ::google::protobuf::int32 errorcode() const;
  void set_errorcode(::google::protobuf::int32 value);

  // optional string error = 4;
  void clear_error();
  static const int kErrorFieldNumber = 4;
  const ::std::string& error() const;
  void set_error(const ::std::string& value);
  void set_error(const char* value);
  void set_error(const char* value, size_t size);
  ::std::string* mutable_error();
  ::std::string* release_error();
  void set_allocated_error(::std::string* error);

  // @@protoc_insertion_point(class_scope:FrontEngine.CreateAccountCallBack)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::FrontEngine::UserInfo* account_;
  ::google::protobuf::internal::ArenaStringPtr error_;
  ::google::protobuf::int32 errorcode_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_front_5fengine_2eproto();
  friend void protobuf_AssignDesc_front_5fengine_2eproto();
  friend void protobuf_ShutdownFile_front_5fengine_2eproto();

  void InitAsDefaultInstance();
  static CreateAccountCallBack* default_instance_;
};
// -------------------------------------------------------------------

class QueryBalanceRequest : public ::google::protobuf::Message {
 public:
  QueryBalanceRequest();
  virtual ~QueryBalanceRequest();

  QueryBalanceRequest(const QueryBalanceRequest& from);

  inline QueryBalanceRequest& operator=(const QueryBalanceRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryBalanceRequest& default_instance();

  void Swap(QueryBalanceRequest* other);

  // implements Message ----------------------------------------------

  inline QueryBalanceRequest* New() const { return New(NULL); }

  QueryBalanceRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryBalanceRequest& from);
  void MergeFrom(const QueryBalanceRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(QueryBalanceRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string request_id = 1;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 1;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // optional .FrontEngine.enums.CoinType coin_type = 2;
  void clear_coin_type();
  static const int kCoinTypeFieldNumber = 2;
  ::FrontEngine::enums_CoinType coin_type() const;
  void set_coin_type(::FrontEngine::enums_CoinType value);

  // optional string address = 3;
  void clear_address();
  static const int kAddressFieldNumber = 3;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // @@protoc_insertion_point(class_scope:FrontEngine.QueryBalanceRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  int coin_type_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_front_5fengine_2eproto();
  friend void protobuf_AssignDesc_front_5fengine_2eproto();
  friend void protobuf_ShutdownFile_front_5fengine_2eproto();

  void InitAsDefaultInstance();
  static QueryBalanceRequest* default_instance_;
};
// -------------------------------------------------------------------

class QueryBalanceCallBack : public ::google::protobuf::Message {
 public:
  QueryBalanceCallBack();
  virtual ~QueryBalanceCallBack();

  QueryBalanceCallBack(const QueryBalanceCallBack& from);

  inline QueryBalanceCallBack& operator=(const QueryBalanceCallBack& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryBalanceCallBack& default_instance();

  void Swap(QueryBalanceCallBack* other);

  // implements Message ----------------------------------------------

  inline QueryBalanceCallBack* New() const { return New(NULL); }

  QueryBalanceCallBack* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryBalanceCallBack& from);
  void MergeFrom(const QueryBalanceCallBack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(QueryBalanceCallBack* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string request_id = 1;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 1;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // optional .FrontEngine.CoinCapital capital = 2;
  bool has_capital() const;
  void clear_capital();
  static const int kCapitalFieldNumber = 2;
  const ::FrontEngine::CoinCapital& capital() const;
  ::FrontEngine::CoinCapital* mutable_capital();
  ::FrontEngine::CoinCapital* release_capital();
  void set_allocated_capital(::FrontEngine::CoinCapital* capital);

  // optional int32 errorCode = 3;
  void clear_errorcode();
  static const int kErrorCodeFieldNumber = 3;
  ::google::protobuf::int32 errorcode() const;
  void set_errorcode(::google::protobuf::int32 value);

  // optional string error = 4;
  void clear_error();
  static const int kErrorFieldNumber = 4;
  const ::std::string& error() const;
  void set_error(const ::std::string& value);
  void set_error(const char* value);
  void set_error(const char* value, size_t size);
  ::std::string* mutable_error();
  ::std::string* release_error();
  void set_allocated_error(::std::string* error);

  // @@protoc_insertion_point(class_scope:FrontEngine.QueryBalanceCallBack)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::FrontEngine::CoinCapital* capital_;
  ::google::protobuf::internal::ArenaStringPtr error_;
  ::google::protobuf::int32 errorcode_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_front_5fengine_2eproto();
  friend void protobuf_AssignDesc_front_5fengine_2eproto();
  friend void protobuf_ShutdownFile_front_5fengine_2eproto();

  void InitAsDefaultInstance();
  static QueryBalanceCallBack* default_instance_;
};
// -------------------------------------------------------------------

class QueryFeeRequest : public ::google::protobuf::Message {
 public:
  QueryFeeRequest();
  virtual ~QueryFeeRequest();

  QueryFeeRequest(const QueryFeeRequest& from);

  inline QueryFeeRequest& operator=(const QueryFeeRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryFeeRequest& default_instance();

  void Swap(QueryFeeRequest* other);

  // implements Message ----------------------------------------------

  inline QueryFeeRequest* New() const { return New(NULL); }

  QueryFeeRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryFeeRequest& from);
  void MergeFrom(const QueryFeeRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(QueryFeeRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string request_id = 1;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 1;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // optional .FrontEngine.enums.CoinType coin_type = 2;
  void clear_coin_type();
  static const int kCoinTypeFieldNumber = 2;
  ::FrontEngine::enums_CoinType coin_type() const;
  void set_coin_type(::FrontEngine::enums_CoinType value);

  // @@protoc_insertion_point(class_scope:FrontEngine.QueryFeeRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  int coin_type_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_front_5fengine_2eproto();
  friend void protobuf_AssignDesc_front_5fengine_2eproto();
  friend void protobuf_ShutdownFile_front_5fengine_2eproto();

  void InitAsDefaultInstance();
  static QueryFeeRequest* default_instance_;
};
// -------------------------------------------------------------------

class QueryFeeCallBack : public ::google::protobuf::Message {
 public:
  QueryFeeCallBack();
  virtual ~QueryFeeCallBack();

  QueryFeeCallBack(const QueryFeeCallBack& from);

  inline QueryFeeCallBack& operator=(const QueryFeeCallBack& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryFeeCallBack& default_instance();

  void Swap(QueryFeeCallBack* other);

  // implements Message ----------------------------------------------

  inline QueryFeeCallBack* New() const { return New(NULL); }

  QueryFeeCallBack* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryFeeCallBack& from);
  void MergeFrom(const QueryFeeCallBack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(QueryFeeCallBack* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string request_id = 1;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 1;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // optional .FrontEngine.enums.CoinType coin_type = 2;
  void clear_coin_type();
  static const int kCoinTypeFieldNumber = 2;
  ::FrontEngine::enums_CoinType coin_type() const;
  void set_coin_type(::FrontEngine::enums_CoinType value);

  // optional string fee = 3;
  void clear_fee();
  static const int kFeeFieldNumber = 3;
  const ::std::string& fee() const;
  void set_fee(const ::std::string& value);
  void set_fee(const char* value);
  void set_fee(const char* value, size_t size);
  ::std::string* mutable_fee();
  ::std::string* release_fee();
  void set_allocated_fee(::std::string* fee);

  // optional int32 errorCode = 4;
  void clear_errorcode();
  static const int kErrorCodeFieldNumber = 4;
  ::google::protobuf::int32 errorcode() const;
  void set_errorcode(::google::protobuf::int32 value);

  // optional string error = 5;
  void clear_error();
  static const int kErrorFieldNumber = 5;
  const ::std::string& error() const;
  void set_error(const ::std::string& value);
  void set_error(const char* value);
  void set_error(const char* value, size_t size);
  ::std::string* mutable_error();
  ::std::string* release_error();
  void set_allocated_error(::std::string* error);

  // @@protoc_insertion_point(class_scope:FrontEngine.QueryFeeCallBack)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::internal::ArenaStringPtr fee_;
  int coin_type_;
  ::google::protobuf::int32 errorcode_;
  ::google::protobuf::internal::ArenaStringPtr error_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_front_5fengine_2eproto();
  friend void protobuf_AssignDesc_front_5fengine_2eproto();
  friend void protobuf_ShutdownFile_front_5fengine_2eproto();

  void InitAsDefaultInstance();
  static QueryFeeCallBack* default_instance_;
};
// -------------------------------------------------------------------

class QueryOrderRequest : public ::google::protobuf::Message {
 public:
  QueryOrderRequest();
  virtual ~QueryOrderRequest();

  QueryOrderRequest(const QueryOrderRequest& from);

  inline QueryOrderRequest& operator=(const QueryOrderRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryOrderRequest& default_instance();

  void Swap(QueryOrderRequest* other);

  // implements Message ----------------------------------------------

  inline QueryOrderRequest* New() const { return New(NULL); }

  QueryOrderRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryOrderRequest& from);
  void MergeFrom(const QueryOrderRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(QueryOrderRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string request_id = 1;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 1;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // optional .FrontEngine.enums.CoinType coin_type = 2;
  void clear_coin_type();
  static const int kCoinTypeFieldNumber = 2;
  ::FrontEngine::enums_CoinType coin_type() const;
  void set_coin_type(::FrontEngine::enums_CoinType value);

  // optional string order_id = 3;
  void clear_order_id();
  static const int kOrderIdFieldNumber = 3;
  const ::std::string& order_id() const;
  void set_order_id(const ::std::string& value);
  void set_order_id(const char* value);
  void set_order_id(const char* value, size_t size);
  ::std::string* mutable_order_id();
  ::std::string* release_order_id();
  void set_allocated_order_id(::std::string* order_id);

  // @@protoc_insertion_point(class_scope:FrontEngine.QueryOrderRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::internal::ArenaStringPtr order_id_;
  int coin_type_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_front_5fengine_2eproto();
  friend void protobuf_AssignDesc_front_5fengine_2eproto();
  friend void protobuf_ShutdownFile_front_5fengine_2eproto();

  void InitAsDefaultInstance();
  static QueryOrderRequest* default_instance_;
};
// -------------------------------------------------------------------

class QueryOrderCallBack : public ::google::protobuf::Message {
 public:
  QueryOrderCallBack();
  virtual ~QueryOrderCallBack();

  QueryOrderCallBack(const QueryOrderCallBack& from);

  inline QueryOrderCallBack& operator=(const QueryOrderCallBack& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryOrderCallBack& default_instance();

  void Swap(QueryOrderCallBack* other);

  // implements Message ----------------------------------------------

  inline QueryOrderCallBack* New() const { return New(NULL); }

  QueryOrderCallBack* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryOrderCallBack& from);
  void MergeFrom(const QueryOrderCallBack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(QueryOrderCallBack* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string request_id = 1;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 1;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // optional .FrontEngine.Order order = 2;
  bool has_order() const;
  void clear_order();
  static const int kOrderFieldNumber = 2;
  const ::FrontEngine::Order& order() const;
  ::FrontEngine::Order* mutable_order();
  ::FrontEngine::Order* release_order();
  void set_allocated_order(::FrontEngine::Order* order);

  // optional int32 errorCode = 3;
  void clear_errorcode();
  static const int kErrorCodeFieldNumber = 3;
  ::google::protobuf::int32 errorcode() const;
  void set_errorcode(::google::protobuf::int32 value);

  // optional string error = 4;
  void clear_error();
  static const int kErrorFieldNumber = 4;
  const ::std::string& error() const;
  void set_error(const ::std::string& value);
  void set_error(const char* value);
  void set_error(const char* value, size_t size);
  ::std::string* mutable_error();
  ::std::string* release_error();
  void set_allocated_error(::std::string* error);

  // @@protoc_insertion_point(class_scope:FrontEngine.QueryOrderCallBack)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::FrontEngine::Order* order_;
  ::google::protobuf::internal::ArenaStringPtr error_;
  ::google::protobuf::int32 errorcode_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_front_5fengine_2eproto();
  friend void protobuf_AssignDesc_front_5fengine_2eproto();
  friend void protobuf_ShutdownFile_front_5fengine_2eproto();

  void InitAsDefaultInstance();
  static QueryOrderCallBack* default_instance_;
};
// -------------------------------------------------------------------

class QueryOrdersRequest : public ::google::protobuf::Message {
 public:
  QueryOrdersRequest();
  virtual ~QueryOrdersRequest();

  QueryOrdersRequest(const QueryOrdersRequest& from);

  inline QueryOrdersRequest& operator=(const QueryOrdersRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryOrdersRequest& default_instance();

  void Swap(QueryOrdersRequest* other);

  // implements Message ----------------------------------------------

  inline QueryOrdersRequest* New() const { return New(NULL); }

  QueryOrdersRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryOrdersRequest& from);
  void MergeFrom(const QueryOrdersRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(QueryOrdersRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string request_id = 1;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 1;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // optional .FrontEngine.enums.CoinType coin_type = 2;
  void clear_coin_type();
  static const int kCoinTypeFieldNumber = 2;
  ::FrontEngine::enums_CoinType coin_type() const;
  void set_coin_type(::FrontEngine::enums_CoinType value);

  // optional string address = 3;
  void clear_address();
  static const int kAddressFieldNumber = 3;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // optional .FrontEngine.Order order = 4;
  bool has_order() const;
  void clear_order();
  static const int kOrderFieldNumber = 4;
  const ::FrontEngine::Order& order() const;
  ::FrontEngine::Order* mutable_order();
  ::FrontEngine::Order* release_order();
  void set_allocated_order(::FrontEngine::Order* order);

  // @@protoc_insertion_point(class_scope:FrontEngine.QueryOrdersRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  ::FrontEngine::Order* order_;
  int coin_type_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_front_5fengine_2eproto();
  friend void protobuf_AssignDesc_front_5fengine_2eproto();
  friend void protobuf_ShutdownFile_front_5fengine_2eproto();

  void InitAsDefaultInstance();
  static QueryOrdersRequest* default_instance_;
};
// -------------------------------------------------------------------

class QueryOrdersCallBack : public ::google::protobuf::Message {
 public:
  QueryOrdersCallBack();
  virtual ~QueryOrdersCallBack();

  QueryOrdersCallBack(const QueryOrdersCallBack& from);

  inline QueryOrdersCallBack& operator=(const QueryOrdersCallBack& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryOrdersCallBack& default_instance();

  void Swap(QueryOrdersCallBack* other);

  // implements Message ----------------------------------------------

  inline QueryOrdersCallBack* New() const { return New(NULL); }

  QueryOrdersCallBack* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryOrdersCallBack& from);
  void MergeFrom(const QueryOrdersCallBack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(QueryOrdersCallBack* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string request_id = 1;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 1;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // repeated .FrontEngine.Order order = 2;
  int order_size() const;
  void clear_order();
  static const int kOrderFieldNumber = 2;
  const ::FrontEngine::Order& order(int index) const;
  ::FrontEngine::Order* mutable_order(int index);
  ::FrontEngine::Order* add_order();
  ::google::protobuf::RepeatedPtrField< ::FrontEngine::Order >*
      mutable_order();
  const ::google::protobuf::RepeatedPtrField< ::FrontEngine::Order >&
      order() const;

  // optional int32 length = 3;
  void clear_length();
  static const int kLengthFieldNumber = 3;
  ::google::protobuf::int32 length() const;
  void set_length(::google::protobuf::int32 value);

  // optional int32 errorCode = 4;
  void clear_errorcode();
  static const int kErrorCodeFieldNumber = 4;
  ::google::protobuf::int32 errorcode() const;
  void set_errorcode(::google::protobuf::int32 value);

  // optional string error = 5;
  void clear_error();
  static const int kErrorFieldNumber = 5;
  const ::std::string& error() const;
  void set_error(const ::std::string& value);
  void set_error(const char* value);
  void set_error(const char* value, size_t size);
  ::std::string* mutable_error();
  ::std::string* release_error();
  void set_allocated_error(::std::string* error);

  // @@protoc_insertion_point(class_scope:FrontEngine.QueryOrdersCallBack)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::RepeatedPtrField< ::FrontEngine::Order > order_;
  ::google::protobuf::int32 length_;
  ::google::protobuf::int32 errorcode_;
  ::google::protobuf::internal::ArenaStringPtr error_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_front_5fengine_2eproto();
  friend void protobuf_AssignDesc_front_5fengine_2eproto();
  friend void protobuf_ShutdownFile_front_5fengine_2eproto();

  void InitAsDefaultInstance();
  static QueryOrdersCallBack* default_instance_;
};
// -------------------------------------------------------------------

class SendCoinRequest : public ::google::protobuf::Message {
 public:
  SendCoinRequest();
  virtual ~SendCoinRequest();

  SendCoinRequest(const SendCoinRequest& from);

  inline SendCoinRequest& operator=(const SendCoinRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SendCoinRequest& default_instance();

  void Swap(SendCoinRequest* other);

  // implements Message ----------------------------------------------

  inline SendCoinRequest* New() const { return New(NULL); }

  SendCoinRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SendCoinRequest& from);
  void MergeFrom(const SendCoinRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SendCoinRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string request_id = 1;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 1;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // optional .FrontEngine.enums.CoinType coin_type = 2;
  void clear_coin_type();
  static const int kCoinTypeFieldNumber = 2;
  ::FrontEngine::enums_CoinType coin_type() const;
  void set_coin_type(::FrontEngine::enums_CoinType value);

  // optional string from_address = 3;
  void clear_from_address();
  static const int kFromAddressFieldNumber = 3;
  const ::std::string& from_address() const;
  void set_from_address(const ::std::string& value);
  void set_from_address(const char* value);
  void set_from_address(const char* value, size_t size);
  ::std::string* mutable_from_address();
  ::std::string* release_from_address();
  void set_allocated_from_address(::std::string* from_address);

  // optional string from_pwd = 4;
  void clear_from_pwd();
  static const int kFromPwdFieldNumber = 4;
  const ::std::string& from_pwd() const;
  void set_from_pwd(const ::std::string& value);
  void set_from_pwd(const char* value);
  void set_from_pwd(const char* value, size_t size);
  ::std::string* mutable_from_pwd();
  ::std::string* release_from_pwd();
  void set_allocated_from_pwd(::std::string* from_pwd);

  // optional string to_address = 5;
  void clear_to_address();
  static const int kToAddressFieldNumber = 5;
  const ::std::string& to_address() const;
  void set_to_address(const ::std::string& value);
  void set_to_address(const char* value);
  void set_to_address(const char* value, size_t size);
  ::std::string* mutable_to_address();
  ::std::string* release_to_address();
  void set_allocated_to_address(::std::string* to_address);

  // optional string description = 6;
  void clear_description();
  static const int kDescriptionFieldNumber = 6;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // optional string amount = 7;
  void clear_amount();
  static const int kAmountFieldNumber = 7;
  const ::std::string& amount() const;
  void set_amount(const ::std::string& value);
  void set_amount(const char* value);
  void set_amount(const char* value, size_t size);
  ::std::string* mutable_amount();
  ::std::string* release_amount();
  void set_allocated_amount(::std::string* amount);

  // optional .FrontEngine.Order order = 8;
  bool has_order() const;
  void clear_order();
  static const int kOrderFieldNumber = 8;
  const ::FrontEngine::Order& order() const;
  ::FrontEngine::Order* mutable_order();
  ::FrontEngine::Order* release_order();
  void set_allocated_order(::FrontEngine::Order* order);

  // @@protoc_insertion_point(class_scope:FrontEngine.SendCoinRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::internal::ArenaStringPtr from_address_;
  ::google::protobuf::internal::ArenaStringPtr from_pwd_;
  ::google::protobuf::internal::ArenaStringPtr to_address_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::internal::ArenaStringPtr amount_;
  ::FrontEngine::Order* order_;
  int coin_type_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_front_5fengine_2eproto();
  friend void protobuf_AssignDesc_front_5fengine_2eproto();
  friend void protobuf_ShutdownFile_front_5fengine_2eproto();

  void InitAsDefaultInstance();
  static SendCoinRequest* default_instance_;
};
// -------------------------------------------------------------------

class RecieveCoinRequest : public ::google::protobuf::Message {
 public:
  RecieveCoinRequest();
  virtual ~RecieveCoinRequest();

  RecieveCoinRequest(const RecieveCoinRequest& from);

  inline RecieveCoinRequest& operator=(const RecieveCoinRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RecieveCoinRequest& default_instance();

  void Swap(RecieveCoinRequest* other);

  // implements Message ----------------------------------------------

  inline RecieveCoinRequest* New() const { return New(NULL); }

  RecieveCoinRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RecieveCoinRequest& from);
  void MergeFrom(const RecieveCoinRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RecieveCoinRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string request_id = 1;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 1;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // optional .FrontEngine.enums.CoinType coin_type = 2;
  void clear_coin_type();
  static const int kCoinTypeFieldNumber = 2;
  ::FrontEngine::enums_CoinType coin_type() const;
  void set_coin_type(::FrontEngine::enums_CoinType value);

  // optional string from_address = 3;
  void clear_from_address();
  static const int kFromAddressFieldNumber = 3;
  const ::std::string& from_address() const;
  void set_from_address(const ::std::string& value);
  void set_from_address(const char* value);
  void set_from_address(const char* value, size_t size);
  ::std::string* mutable_from_address();
  ::std::string* release_from_address();
  void set_allocated_from_address(::std::string* from_address);

  // optional string from_pwd = 4;
  void clear_from_pwd();
  static const int kFromPwdFieldNumber = 4;
  const ::std::string& from_pwd() const;
  void set_from_pwd(const ::std::string& value);
  void set_from_pwd(const char* value);
  void set_from_pwd(const char* value, size_t size);
  ::std::string* mutable_from_pwd();
  ::std::string* release_from_pwd();
  void set_allocated_from_pwd(::std::string* from_pwd);

  // optional string to_address = 5;
  void clear_to_address();
  static const int kToAddressFieldNumber = 5;
  const ::std::string& to_address() const;
  void set_to_address(const ::std::string& value);
  void set_to_address(const char* value);
  void set_to_address(const char* value, size_t size);
  ::std::string* mutable_to_address();
  ::std::string* release_to_address();
  void set_allocated_to_address(::std::string* to_address);

  // optional string description = 6;
  void clear_description();
  static const int kDescriptionFieldNumber = 6;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // optional string amount = 7;
  void clear_amount();
  static const int kAmountFieldNumber = 7;
  const ::std::string& amount() const;
  void set_amount(const ::std::string& value);
  void set_amount(const char* value);
  void set_amount(const char* value, size_t size);
  ::std::string* mutable_amount();
  ::std::string* release_amount();
  void set_allocated_amount(::std::string* amount);

  // optional .FrontEngine.Order order = 8;
  bool has_order() const;
  void clear_order();
  static const int kOrderFieldNumber = 8;
  const ::FrontEngine::Order& order() const;
  ::FrontEngine::Order* mutable_order();
  ::FrontEngine::Order* release_order();
  void set_allocated_order(::FrontEngine::Order* order);

  // @@protoc_insertion_point(class_scope:FrontEngine.RecieveCoinRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::internal::ArenaStringPtr from_address_;
  ::google::protobuf::internal::ArenaStringPtr from_pwd_;
  ::google::protobuf::internal::ArenaStringPtr to_address_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::internal::ArenaStringPtr amount_;
  ::FrontEngine::Order* order_;
  int coin_type_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_front_5fengine_2eproto();
  friend void protobuf_AssignDesc_front_5fengine_2eproto();
  friend void protobuf_ShutdownFile_front_5fengine_2eproto();

  void InitAsDefaultInstance();
  static RecieveCoinRequest* default_instance_;
};
// -------------------------------------------------------------------

class TradedCallBack : public ::google::protobuf::Message {
 public:
  TradedCallBack();
  virtual ~TradedCallBack();

  TradedCallBack(const TradedCallBack& from);

  inline TradedCallBack& operator=(const TradedCallBack& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TradedCallBack& default_instance();

  void Swap(TradedCallBack* other);

  // implements Message ----------------------------------------------

  inline TradedCallBack* New() const { return New(NULL); }

  TradedCallBack* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TradedCallBack& from);
  void MergeFrom(const TradedCallBack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TradedCallBack* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string request_id = 1;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 1;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // optional .FrontEngine.Order order = 2;
  bool has_order() const;
  void clear_order();
  static const int kOrderFieldNumber = 2;
  const ::FrontEngine::Order& order() const;
  ::FrontEngine::Order* mutable_order();
  ::FrontEngine::Order* release_order();
  void set_allocated_order(::FrontEngine::Order* order);

  // optional int32 errorCode = 3;
  void clear_errorcode();
  static const int kErrorCodeFieldNumber = 3;
  ::google::protobuf::int32 errorcode() const;
  void set_errorcode(::google::protobuf::int32 value);

  // optional string error = 4;
  void clear_error();
  static const int kErrorFieldNumber = 4;
  const ::std::string& error() const;
  void set_error(const ::std::string& value);
  void set_error(const char* value);
  void set_error(const char* value, size_t size);
  ::std::string* mutable_error();
  ::std::string* release_error();
  void set_allocated_error(::std::string* error);

  // @@protoc_insertion_point(class_scope:FrontEngine.TradedCallBack)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::FrontEngine::Order* order_;
  ::google::protobuf::internal::ArenaStringPtr error_;
  ::google::protobuf::int32 errorcode_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_front_5fengine_2eproto();
  friend void protobuf_AssignDesc_front_5fengine_2eproto();
  friend void protobuf_ShutdownFile_front_5fengine_2eproto();

  void InitAsDefaultInstance();
  static TradedCallBack* default_instance_;
};
// -------------------------------------------------------------------

class CanceledCallBack : public ::google::protobuf::Message {
 public:
  CanceledCallBack();
  virtual ~CanceledCallBack();

  CanceledCallBack(const CanceledCallBack& from);

  inline CanceledCallBack& operator=(const CanceledCallBack& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CanceledCallBack& default_instance();

  void Swap(CanceledCallBack* other);

  // implements Message ----------------------------------------------

  inline CanceledCallBack* New() const { return New(NULL); }

  CanceledCallBack* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CanceledCallBack& from);
  void MergeFrom(const CanceledCallBack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CanceledCallBack* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string request_id = 1;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 1;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // optional .FrontEngine.Order order = 2;
  bool has_order() const;
  void clear_order();
  static const int kOrderFieldNumber = 2;
  const ::FrontEngine::Order& order() const;
  ::FrontEngine::Order* mutable_order();
  ::FrontEngine::Order* release_order();
  void set_allocated_order(::FrontEngine::Order* order);

  // optional int32 errorCode = 3;
  void clear_errorcode();
  static const int kErrorCodeFieldNumber = 3;
  ::google::protobuf::int32 errorcode() const;
  void set_errorcode(::google::protobuf::int32 value);

  // optional string error = 4;
  void clear_error();
  static const int kErrorFieldNumber = 4;
  const ::std::string& error() const;
  void set_error(const ::std::string& value);
  void set_error(const char* value);
  void set_error(const char* value, size_t size);
  ::std::string* mutable_error();
  ::std::string* release_error();
  void set_allocated_error(::std::string* error);

  // @@protoc_insertion_point(class_scope:FrontEngine.CanceledCallBack)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::FrontEngine::Order* order_;
  ::google::protobuf::internal::ArenaStringPtr error_;
  ::google::protobuf::int32 errorcode_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_front_5fengine_2eproto();
  friend void protobuf_AssignDesc_front_5fengine_2eproto();
  friend void protobuf_ShutdownFile_front_5fengine_2eproto();

  void InitAsDefaultInstance();
  static CanceledCallBack* default_instance_;
};
// -------------------------------------------------------------------

class RejectedCallBack : public ::google::protobuf::Message {
 public:
  RejectedCallBack();
  virtual ~RejectedCallBack();

  RejectedCallBack(const RejectedCallBack& from);

  inline RejectedCallBack& operator=(const RejectedCallBack& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RejectedCallBack& default_instance();

  void Swap(RejectedCallBack* other);

  // implements Message ----------------------------------------------

  inline RejectedCallBack* New() const { return New(NULL); }

  RejectedCallBack* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RejectedCallBack& from);
  void MergeFrom(const RejectedCallBack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RejectedCallBack* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string request_id = 1;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 1;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // optional .FrontEngine.Order order = 2;
  bool has_order() const;
  void clear_order();
  static const int kOrderFieldNumber = 2;
  const ::FrontEngine::Order& order() const;
  ::FrontEngine::Order* mutable_order();
  ::FrontEngine::Order* release_order();
  void set_allocated_order(::FrontEngine::Order* order);

  // optional int32 errorCode = 3;
  void clear_errorcode();
  static const int kErrorCodeFieldNumber = 3;
  ::google::protobuf::int32 errorcode() const;
  void set_errorcode(::google::protobuf::int32 value);

  // optional string error = 4;
  void clear_error();
  static const int kErrorFieldNumber = 4;
  const ::std::string& error() const;
  void set_error(const ::std::string& value);
  void set_error(const char* value);
  void set_error(const char* value, size_t size);
  ::std::string* mutable_error();
  ::std::string* release_error();
  void set_allocated_error(::std::string* error);

  // @@protoc_insertion_point(class_scope:FrontEngine.RejectedCallBack)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::FrontEngine::Order* order_;
  ::google::protobuf::internal::ArenaStringPtr error_;
  ::google::protobuf::int32 errorcode_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_front_5fengine_2eproto();
  friend void protobuf_AssignDesc_front_5fengine_2eproto();
  friend void protobuf_ShutdownFile_front_5fengine_2eproto();

  void InitAsDefaultInstance();
  static RejectedCallBack* default_instance_;
};
// -------------------------------------------------------------------

class RequestMessage : public ::google::protobuf::Message {
 public:
  RequestMessage();
  virtual ~RequestMessage();

  RequestMessage(const RequestMessage& from);

  inline RequestMessage& operator=(const RequestMessage& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RequestMessage& default_instance();

  void Swap(RequestMessage* other);

  // implements Message ----------------------------------------------

  inline RequestMessage* New() const { return New(NULL); }

  RequestMessage* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RequestMessage& from);
  void MergeFrom(const RequestMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RequestMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string request_id = 1;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 1;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // optional string client_id = 2;
  void clear_client_id();
  static const int kClientIdFieldNumber = 2;
  const ::std::string& client_id() const;
  void set_client_id(const ::std::string& value);
  void set_client_id(const char* value);
  void set_client_id(const char* value, size_t size);
  ::std::string* mutable_client_id();
  ::std::string* release_client_id();
  void set_allocated_client_id(::std::string* client_id);

  // optional string front_id = 3;
  void clear_front_id();
  static const int kFrontIdFieldNumber = 3;
  const ::std::string& front_id() const;
  void set_front_id(const ::std::string& value);
  void set_front_id(const char* value);
  void set_front_id(const char* value, size_t size);
  ::std::string* mutable_front_id();
  ::std::string* release_front_id();
  void set_allocated_front_id(::std::string* front_id);

  // optional string md5 = 4;
  void clear_md5();
  static const int kMd5FieldNumber = 4;
  const ::std::string& md5() const;
  void set_md5(const ::std::string& value);
  void set_md5(const char* value);
  void set_md5(const char* value, size_t size);
  ::std::string* mutable_md5();
  ::std::string* release_md5();
  void set_allocated_md5(::std::string* md5);

  // optional .FrontEngine.enums.RequestType type = 5;
  void clear_type();
  static const int kTypeFieldNumber = 5;
  ::FrontEngine::enums_RequestType type() const;
  void set_type(::FrontEngine::enums_RequestType value);

  // optional .FrontEngine.CreateAccountRequest account = 6;
  bool has_account() const;
  void clear_account();
  static const int kAccountFieldNumber = 6;
  const ::FrontEngine::CreateAccountRequest& account() const;
  ::FrontEngine::CreateAccountRequest* mutable_account();
  ::FrontEngine::CreateAccountRequest* release_account();
  void set_allocated_account(::FrontEngine::CreateAccountRequest* account);

  // optional .FrontEngine.QueryBalanceRequest balance = 7;
  bool has_balance() const;
  void clear_balance();
  static const int kBalanceFieldNumber = 7;
  const ::FrontEngine::QueryBalanceRequest& balance() const;
  ::FrontEngine::QueryBalanceRequest* mutable_balance();
  ::FrontEngine::QueryBalanceRequest* release_balance();
  void set_allocated_balance(::FrontEngine::QueryBalanceRequest* balance);

  // optional .FrontEngine.QueryFeeRequest fee = 8;
  bool has_fee() const;
  void clear_fee();
  static const int kFeeFieldNumber = 8;
  const ::FrontEngine::QueryFeeRequest& fee() const;
  ::FrontEngine::QueryFeeRequest* mutable_fee();
  ::FrontEngine::QueryFeeRequest* release_fee();
  void set_allocated_fee(::FrontEngine::QueryFeeRequest* fee);

  // optional .FrontEngine.QueryOrderRequest order = 9;
  bool has_order() const;
  void clear_order();
  static const int kOrderFieldNumber = 9;
  const ::FrontEngine::QueryOrderRequest& order() const;
  ::FrontEngine::QueryOrderRequest* mutable_order();
  ::FrontEngine::QueryOrderRequest* release_order();
  void set_allocated_order(::FrontEngine::QueryOrderRequest* order);

  // optional .FrontEngine.QueryOrdersRequest orders = 10;
  bool has_orders() const;
  void clear_orders();
  static const int kOrdersFieldNumber = 10;
  const ::FrontEngine::QueryOrdersRequest& orders() const;
  ::FrontEngine::QueryOrdersRequest* mutable_orders();
  ::FrontEngine::QueryOrdersRequest* release_orders();
  void set_allocated_orders(::FrontEngine::QueryOrdersRequest* orders);

  // optional .FrontEngine.SendCoinRequest send_info = 11;
  bool has_send_info() const;
  void clear_send_info();
  static const int kSendInfoFieldNumber = 11;
  const ::FrontEngine::SendCoinRequest& send_info() const;
  ::FrontEngine::SendCoinRequest* mutable_send_info();
  ::FrontEngine::SendCoinRequest* release_send_info();
  void set_allocated_send_info(::FrontEngine::SendCoinRequest* send_info);

  // optional .FrontEngine.RecieveCoinRequest recieve_info = 12;
  bool has_recieve_info() const;
  void clear_recieve_info();
  static const int kRecieveInfoFieldNumber = 12;
  const ::FrontEngine::RecieveCoinRequest& recieve_info() const;
  ::FrontEngine::RecieveCoinRequest* mutable_recieve_info();
  ::FrontEngine::RecieveCoinRequest* release_recieve_info();
  void set_allocated_recieve_info(::FrontEngine::RecieveCoinRequest* recieve_info);

  // optional .FrontEngine.HeartBeatRequest heart_beat = 13;
  bool has_heart_beat() const;
  void clear_heart_beat();
  static const int kHeartBeatFieldNumber = 13;
  const ::FrontEngine::HeartBeatRequest& heart_beat() const;
  ::FrontEngine::HeartBeatRequest* mutable_heart_beat();
  ::FrontEngine::HeartBeatRequest* release_heart_beat();
  void set_allocated_heart_beat(::FrontEngine::HeartBeatRequest* heart_beat);

  // optional .FrontEngine.CheckAppId app_id = 14;
  bool has_app_id() const;
  void clear_app_id();
  static const int kAppIdFieldNumber = 14;
  const ::FrontEngine::CheckAppId& app_id() const;
  ::FrontEngine::CheckAppId* mutable_app_id();
  ::FrontEngine::CheckAppId* release_app_id();
  void set_allocated_app_id(::FrontEngine::CheckAppId* app_id);

  // @@protoc_insertion_point(class_scope:FrontEngine.RequestMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::internal::ArenaStringPtr client_id_;
  ::google::protobuf::internal::ArenaStringPtr front_id_;
  ::google::protobuf::internal::ArenaStringPtr md5_;
  ::FrontEngine::CreateAccountRequest* account_;
  ::FrontEngine::QueryBalanceRequest* balance_;
  ::FrontEngine::QueryFeeRequest* fee_;
  ::FrontEngine::QueryOrderRequest* order_;
  ::FrontEngine::QueryOrdersRequest* orders_;
  ::FrontEngine::SendCoinRequest* send_info_;
  ::FrontEngine::RecieveCoinRequest* recieve_info_;
  ::FrontEngine::HeartBeatRequest* heart_beat_;
  ::FrontEngine::CheckAppId* app_id_;
  int type_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_front_5fengine_2eproto();
  friend void protobuf_AssignDesc_front_5fengine_2eproto();
  friend void protobuf_ShutdownFile_front_5fengine_2eproto();

  void InitAsDefaultInstance();
  static RequestMessage* default_instance_;
};
// -------------------------------------------------------------------

class CallBackMessage : public ::google::protobuf::Message {
 public:
  CallBackMessage();
  virtual ~CallBackMessage();

  CallBackMessage(const CallBackMessage& from);

  inline CallBackMessage& operator=(const CallBackMessage& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CallBackMessage& default_instance();

  void Swap(CallBackMessage* other);

  // implements Message ----------------------------------------------

  inline CallBackMessage* New() const { return New(NULL); }

  CallBackMessage* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CallBackMessage& from);
  void MergeFrom(const CallBackMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CallBackMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string request_id = 1;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 1;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // optional string client_id = 2;
  void clear_client_id();
  static const int kClientIdFieldNumber = 2;
  const ::std::string& client_id() const;
  void set_client_id(const ::std::string& value);
  void set_client_id(const char* value);
  void set_client_id(const char* value, size_t size);
  ::std::string* mutable_client_id();
  ::std::string* release_client_id();
  void set_allocated_client_id(::std::string* client_id);

  // optional string front_id = 3;
  void clear_front_id();
  static const int kFrontIdFieldNumber = 3;
  const ::std::string& front_id() const;
  void set_front_id(const ::std::string& value);
  void set_front_id(const char* value);
  void set_front_id(const char* value, size_t size);
  ::std::string* mutable_front_id();
  ::std::string* release_front_id();
  void set_allocated_front_id(::std::string* front_id);

  // optional string md5 = 4;
  void clear_md5();
  static const int kMd5FieldNumber = 4;
  const ::std::string& md5() const;
  void set_md5(const ::std::string& value);
  void set_md5(const char* value);
  void set_md5(const char* value, size_t size);
  ::std::string* mutable_md5();
  ::std::string* release_md5();
  void set_allocated_md5(::std::string* md5);

  // optional .FrontEngine.enums.CallBackType type = 5;
  void clear_type();
  static const int kTypeFieldNumber = 5;
  ::FrontEngine::enums_CallBackType type() const;
  void set_type(::FrontEngine::enums_CallBackType value);

  // optional .FrontEngine.CreateAccountCallBack account = 6;
  bool has_account() const;
  void clear_account();
  static const int kAccountFieldNumber = 6;
  const ::FrontEngine::CreateAccountCallBack& account() const;
  ::FrontEngine::CreateAccountCallBack* mutable_account();
  ::FrontEngine::CreateAccountCallBack* release_account();
  void set_allocated_account(::FrontEngine::CreateAccountCallBack* account);

  // optional .FrontEngine.QueryBalanceCallBack balance = 7;
  bool has_balance() const;
  void clear_balance();
  static const int kBalanceFieldNumber = 7;
  const ::FrontEngine::QueryBalanceCallBack& balance() const;
  ::FrontEngine::QueryBalanceCallBack* mutable_balance();
  ::FrontEngine::QueryBalanceCallBack* release_balance();
  void set_allocated_balance(::FrontEngine::QueryBalanceCallBack* balance);

  // optional .FrontEngine.QueryFeeCallBack fee = 8;
  bool has_fee() const;
  void clear_fee();
  static const int kFeeFieldNumber = 8;
  const ::FrontEngine::QueryFeeCallBack& fee() const;
  ::FrontEngine::QueryFeeCallBack* mutable_fee();
  ::FrontEngine::QueryFeeCallBack* release_fee();
  void set_allocated_fee(::FrontEngine::QueryFeeCallBack* fee);

  // optional .FrontEngine.QueryOrderCallBack order = 9;
  bool has_order() const;
  void clear_order();
  static const int kOrderFieldNumber = 9;
  const ::FrontEngine::QueryOrderCallBack& order() const;
  ::FrontEngine::QueryOrderCallBack* mutable_order();
  ::FrontEngine::QueryOrderCallBack* release_order();
  void set_allocated_order(::FrontEngine::QueryOrderCallBack* order);

  // optional .FrontEngine.QueryOrdersCallBack orders = 10;
  bool has_orders() const;
  void clear_orders();
  static const int kOrdersFieldNumber = 10;
  const ::FrontEngine::QueryOrdersCallBack& orders() const;
  ::FrontEngine::QueryOrdersCallBack* mutable_orders();
  ::FrontEngine::QueryOrdersCallBack* release_orders();
  void set_allocated_orders(::FrontEngine::QueryOrdersCallBack* orders);

  // optional .FrontEngine.TradedCallBack traded_info = 11;
  bool has_traded_info() const;
  void clear_traded_info();
  static const int kTradedInfoFieldNumber = 11;
  const ::FrontEngine::TradedCallBack& traded_info() const;
  ::FrontEngine::TradedCallBack* mutable_traded_info();
  ::FrontEngine::TradedCallBack* release_traded_info();
  void set_allocated_traded_info(::FrontEngine::TradedCallBack* traded_info);

  // optional .FrontEngine.CanceledCallBack canceled_info = 12;
  bool has_canceled_info() const;
  void clear_canceled_info();
  static const int kCanceledInfoFieldNumber = 12;
  const ::FrontEngine::CanceledCallBack& canceled_info() const;
  ::FrontEngine::CanceledCallBack* mutable_canceled_info();
  ::FrontEngine::CanceledCallBack* release_canceled_info();
  void set_allocated_canceled_info(::FrontEngine::CanceledCallBack* canceled_info);

  // optional .FrontEngine.RejectedCallBack rejected_info = 13;
  bool has_rejected_info() const;
  void clear_rejected_info();
  static const int kRejectedInfoFieldNumber = 13;
  const ::FrontEngine::RejectedCallBack& rejected_info() const;
  ::FrontEngine::RejectedCallBack* mutable_rejected_info();
  ::FrontEngine::RejectedCallBack* release_rejected_info();
  void set_allocated_rejected_info(::FrontEngine::RejectedCallBack* rejected_info);

  // optional .FrontEngine.HeartBeatCallBack heart_beat = 14;
  bool has_heart_beat() const;
  void clear_heart_beat();
  static const int kHeartBeatFieldNumber = 14;
  const ::FrontEngine::HeartBeatCallBack& heart_beat() const;
  ::FrontEngine::HeartBeatCallBack* mutable_heart_beat();
  ::FrontEngine::HeartBeatCallBack* release_heart_beat();
  void set_allocated_heart_beat(::FrontEngine::HeartBeatCallBack* heart_beat);

  // optional .FrontEngine.CheckAppIdCallBack app_id = 15;
  bool has_app_id() const;
  void clear_app_id();
  static const int kAppIdFieldNumber = 15;
  const ::FrontEngine::CheckAppIdCallBack& app_id() const;
  ::FrontEngine::CheckAppIdCallBack* mutable_app_id();
  ::FrontEngine::CheckAppIdCallBack* release_app_id();
  void set_allocated_app_id(::FrontEngine::CheckAppIdCallBack* app_id);

  // @@protoc_insertion_point(class_scope:FrontEngine.CallBackMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::internal::ArenaStringPtr client_id_;
  ::google::protobuf::internal::ArenaStringPtr front_id_;
  ::google::protobuf::internal::ArenaStringPtr md5_;
  ::FrontEngine::CreateAccountCallBack* account_;
  ::FrontEngine::QueryBalanceCallBack* balance_;
  ::FrontEngine::QueryFeeCallBack* fee_;
  ::FrontEngine::QueryOrderCallBack* order_;
  ::FrontEngine::QueryOrdersCallBack* orders_;
  ::FrontEngine::TradedCallBack* traded_info_;
  ::FrontEngine::CanceledCallBack* canceled_info_;
  ::FrontEngine::RejectedCallBack* rejected_info_;
  ::FrontEngine::HeartBeatCallBack* heart_beat_;
  ::FrontEngine::CheckAppIdCallBack* app_id_;
  int type_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_front_5fengine_2eproto();
  friend void protobuf_AssignDesc_front_5fengine_2eproto();
  friend void protobuf_ShutdownFile_front_5fengine_2eproto();

  void InitAsDefaultInstance();
  static CallBackMessage* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// enums

// -------------------------------------------------------------------

// Order

// optional string order_id = 1;
inline void Order::clear_order_id() {
  order_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Order::order_id() const {
  // @@protoc_insertion_point(field_get:FrontEngine.Order.order_id)
  return order_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Order::set_order_id(const ::std::string& value) {
  
  order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FrontEngine.Order.order_id)
}
inline void Order::set_order_id(const char* value) {
  
  order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FrontEngine.Order.order_id)
}
inline void Order::set_order_id(const char* value, size_t size) {
  
  order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FrontEngine.Order.order_id)
}
inline ::std::string* Order::mutable_order_id() {
  
  // @@protoc_insertion_point(field_mutable:FrontEngine.Order.order_id)
  return order_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Order::release_order_id() {
  
  return order_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Order::set_allocated_order_id(::std::string* order_id) {
  if (order_id != NULL) {
    
  } else {
    
  }
  order_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), order_id);
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.Order.order_id)
}

// optional .FrontEngine.enums.CoinType type = 2;
inline void Order::clear_type() {
  type_ = 0;
}
inline ::FrontEngine::enums_CoinType Order::type() const {
  // @@protoc_insertion_point(field_get:FrontEngine.Order.type)
  return static_cast< ::FrontEngine::enums_CoinType >(type_);
}
inline void Order::set_type(::FrontEngine::enums_CoinType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:FrontEngine.Order.type)
}

// optional string from_address = 3;
inline void Order::clear_from_address() {
  from_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Order::from_address() const {
  // @@protoc_insertion_point(field_get:FrontEngine.Order.from_address)
  return from_address_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Order::set_from_address(const ::std::string& value) {
  
  from_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FrontEngine.Order.from_address)
}
inline void Order::set_from_address(const char* value) {
  
  from_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FrontEngine.Order.from_address)
}
inline void Order::set_from_address(const char* value, size_t size) {
  
  from_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FrontEngine.Order.from_address)
}
inline ::std::string* Order::mutable_from_address() {
  
  // @@protoc_insertion_point(field_mutable:FrontEngine.Order.from_address)
  return from_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Order::release_from_address() {
  
  return from_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Order::set_allocated_from_address(::std::string* from_address) {
  if (from_address != NULL) {
    
  } else {
    
  }
  from_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from_address);
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.Order.from_address)
}

// optional string to_address = 4;
inline void Order::clear_to_address() {
  to_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Order::to_address() const {
  // @@protoc_insertion_point(field_get:FrontEngine.Order.to_address)
  return to_address_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Order::set_to_address(const ::std::string& value) {
  
  to_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FrontEngine.Order.to_address)
}
inline void Order::set_to_address(const char* value) {
  
  to_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FrontEngine.Order.to_address)
}
inline void Order::set_to_address(const char* value, size_t size) {
  
  to_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FrontEngine.Order.to_address)
}
inline ::std::string* Order::mutable_to_address() {
  
  // @@protoc_insertion_point(field_mutable:FrontEngine.Order.to_address)
  return to_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Order::release_to_address() {
  
  return to_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Order::set_allocated_to_address(::std::string* to_address) {
  if (to_address != NULL) {
    
  } else {
    
  }
  to_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), to_address);
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.Order.to_address)
}

// optional string description = 5;
inline void Order::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Order::description() const {
  // @@protoc_insertion_point(field_get:FrontEngine.Order.description)
  return description_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Order::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FrontEngine.Order.description)
}
inline void Order::set_description(const char* value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FrontEngine.Order.description)
}
inline void Order::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FrontEngine.Order.description)
}
inline ::std::string* Order::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:FrontEngine.Order.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Order::release_description() {
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Order::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.Order.description)
}

// optional string amount = 6;
inline void Order::clear_amount() {
  amount_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Order::amount() const {
  // @@protoc_insertion_point(field_get:FrontEngine.Order.amount)
  return amount_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Order::set_amount(const ::std::string& value) {
  
  amount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FrontEngine.Order.amount)
}
inline void Order::set_amount(const char* value) {
  
  amount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FrontEngine.Order.amount)
}
inline void Order::set_amount(const char* value, size_t size) {
  
  amount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FrontEngine.Order.amount)
}
inline ::std::string* Order::mutable_amount() {
  
  // @@protoc_insertion_point(field_mutable:FrontEngine.Order.amount)
  return amount_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Order::release_amount() {
  
  return amount_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Order::set_allocated_amount(::std::string* amount) {
  if (amount != NULL) {
    
  } else {
    
  }
  amount_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), amount);
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.Order.amount)
}

// optional string fee = 7;
inline void Order::clear_fee() {
  fee_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Order::fee() const {
  // @@protoc_insertion_point(field_get:FrontEngine.Order.fee)
  return fee_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Order::set_fee(const ::std::string& value) {
  
  fee_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FrontEngine.Order.fee)
}
inline void Order::set_fee(const char* value) {
  
  fee_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FrontEngine.Order.fee)
}
inline void Order::set_fee(const char* value, size_t size) {
  
  fee_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FrontEngine.Order.fee)
}
inline ::std::string* Order::mutable_fee() {
  
  // @@protoc_insertion_point(field_mutable:FrontEngine.Order.fee)
  return fee_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Order::release_fee() {
  
  return fee_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Order::set_allocated_fee(::std::string* fee) {
  if (fee != NULL) {
    
  } else {
    
  }
  fee_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fee);
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.Order.fee)
}

// optional int32 order_date = 8;
inline void Order::clear_order_date() {
  order_date_ = 0;
}
inline ::google::protobuf::int32 Order::order_date() const {
  // @@protoc_insertion_point(field_get:FrontEngine.Order.order_date)
  return order_date_;
}
inline void Order::set_order_date(::google::protobuf::int32 value) {
  
  order_date_ = value;
  // @@protoc_insertion_point(field_set:FrontEngine.Order.order_date)
}

// optional int32 order_time = 9;
inline void Order::clear_order_time() {
  order_time_ = 0;
}
inline ::google::protobuf::int32 Order::order_time() const {
  // @@protoc_insertion_point(field_get:FrontEngine.Order.order_time)
  return order_time_;
}
inline void Order::set_order_time(::google::protobuf::int32 value) {
  
  order_time_ = value;
  // @@protoc_insertion_point(field_set:FrontEngine.Order.order_time)
}

// optional .FrontEngine.enums.OrderStatus status = 10;
inline void Order::clear_status() {
  status_ = 0;
}
inline ::FrontEngine::enums_OrderStatus Order::status() const {
  // @@protoc_insertion_point(field_get:FrontEngine.Order.status)
  return static_cast< ::FrontEngine::enums_OrderStatus >(status_);
}
inline void Order::set_status(::FrontEngine::enums_OrderStatus value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:FrontEngine.Order.status)
}

// -------------------------------------------------------------------

// CoinInfo

// optional .FrontEngine.enums.CoinType type = 1;
inline void CoinInfo::clear_type() {
  type_ = 0;
}
inline ::FrontEngine::enums_CoinType CoinInfo::type() const {
  // @@protoc_insertion_point(field_get:FrontEngine.CoinInfo.type)
  return static_cast< ::FrontEngine::enums_CoinType >(type_);
}
inline void CoinInfo::set_type(::FrontEngine::enums_CoinType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:FrontEngine.CoinInfo.type)
}

// optional string ch_name = 2;
inline void CoinInfo::clear_ch_name() {
  ch_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CoinInfo::ch_name() const {
  // @@protoc_insertion_point(field_get:FrontEngine.CoinInfo.ch_name)
  return ch_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CoinInfo::set_ch_name(const ::std::string& value) {
  
  ch_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FrontEngine.CoinInfo.ch_name)
}
inline void CoinInfo::set_ch_name(const char* value) {
  
  ch_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FrontEngine.CoinInfo.ch_name)
}
inline void CoinInfo::set_ch_name(const char* value, size_t size) {
  
  ch_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FrontEngine.CoinInfo.ch_name)
}
inline ::std::string* CoinInfo::mutable_ch_name() {
  
  // @@protoc_insertion_point(field_mutable:FrontEngine.CoinInfo.ch_name)
  return ch_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CoinInfo::release_ch_name() {
  
  return ch_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CoinInfo::set_allocated_ch_name(::std::string* ch_name) {
  if (ch_name != NULL) {
    
  } else {
    
  }
  ch_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ch_name);
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.CoinInfo.ch_name)
}

// optional string en_name = 3;
inline void CoinInfo::clear_en_name() {
  en_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CoinInfo::en_name() const {
  // @@protoc_insertion_point(field_get:FrontEngine.CoinInfo.en_name)
  return en_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CoinInfo::set_en_name(const ::std::string& value) {
  
  en_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FrontEngine.CoinInfo.en_name)
}
inline void CoinInfo::set_en_name(const char* value) {
  
  en_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FrontEngine.CoinInfo.en_name)
}
inline void CoinInfo::set_en_name(const char* value, size_t size) {
  
  en_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FrontEngine.CoinInfo.en_name)
}
inline ::std::string* CoinInfo::mutable_en_name() {
  
  // @@protoc_insertion_point(field_mutable:FrontEngine.CoinInfo.en_name)
  return en_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CoinInfo::release_en_name() {
  
  return en_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CoinInfo::set_allocated_en_name(::std::string* en_name) {
  if (en_name != NULL) {
    
  } else {
    
  }
  en_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), en_name);
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.CoinInfo.en_name)
}

// optional double base_fee = 4;
inline void CoinInfo::clear_base_fee() {
  base_fee_ = 0;
}
inline double CoinInfo::base_fee() const {
  // @@protoc_insertion_point(field_get:FrontEngine.CoinInfo.base_fee)
  return base_fee_;
}
inline void CoinInfo::set_base_fee(double value) {
  
  base_fee_ = value;
  // @@protoc_insertion_point(field_set:FrontEngine.CoinInfo.base_fee)
}

// -------------------------------------------------------------------

// CoinCapital

// optional string address = 1;
inline void CoinCapital::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CoinCapital::address() const {
  // @@protoc_insertion_point(field_get:FrontEngine.CoinCapital.address)
  return address_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CoinCapital::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FrontEngine.CoinCapital.address)
}
inline void CoinCapital::set_address(const char* value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FrontEngine.CoinCapital.address)
}
inline void CoinCapital::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FrontEngine.CoinCapital.address)
}
inline ::std::string* CoinCapital::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:FrontEngine.CoinCapital.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CoinCapital::release_address() {
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CoinCapital::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.CoinCapital.address)
}

// optional .FrontEngine.enums.CoinType type = 2;
inline void CoinCapital::clear_type() {
  type_ = 0;
}
inline ::FrontEngine::enums_CoinType CoinCapital::type() const {
  // @@protoc_insertion_point(field_get:FrontEngine.CoinCapital.type)
  return static_cast< ::FrontEngine::enums_CoinType >(type_);
}
inline void CoinCapital::set_type(::FrontEngine::enums_CoinType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:FrontEngine.CoinCapital.type)
}

// optional string amount = 3;
inline void CoinCapital::clear_amount() {
  amount_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CoinCapital::amount() const {
  // @@protoc_insertion_point(field_get:FrontEngine.CoinCapital.amount)
  return amount_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CoinCapital::set_amount(const ::std::string& value) {
  
  amount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FrontEngine.CoinCapital.amount)
}
inline void CoinCapital::set_amount(const char* value) {
  
  amount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FrontEngine.CoinCapital.amount)
}
inline void CoinCapital::set_amount(const char* value, size_t size) {
  
  amount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FrontEngine.CoinCapital.amount)
}
inline ::std::string* CoinCapital::mutable_amount() {
  
  // @@protoc_insertion_point(field_mutable:FrontEngine.CoinCapital.amount)
  return amount_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CoinCapital::release_amount() {
  
  return amount_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CoinCapital::set_allocated_amount(::std::string* amount) {
  if (amount != NULL) {
    
  } else {
    
  }
  amount_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), amount);
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.CoinCapital.amount)
}

// optional string frozen_amount = 4;
inline void CoinCapital::clear_frozen_amount() {
  frozen_amount_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CoinCapital::frozen_amount() const {
  // @@protoc_insertion_point(field_get:FrontEngine.CoinCapital.frozen_amount)
  return frozen_amount_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CoinCapital::set_frozen_amount(const ::std::string& value) {
  
  frozen_amount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FrontEngine.CoinCapital.frozen_amount)
}
inline void CoinCapital::set_frozen_amount(const char* value) {
  
  frozen_amount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FrontEngine.CoinCapital.frozen_amount)
}
inline void CoinCapital::set_frozen_amount(const char* value, size_t size) {
  
  frozen_amount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FrontEngine.CoinCapital.frozen_amount)
}
inline ::std::string* CoinCapital::mutable_frozen_amount() {
  
  // @@protoc_insertion_point(field_mutable:FrontEngine.CoinCapital.frozen_amount)
  return frozen_amount_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CoinCapital::release_frozen_amount() {
  
  return frozen_amount_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CoinCapital::set_allocated_frozen_amount(::std::string* frozen_amount) {
  if (frozen_amount != NULL) {
    
  } else {
    
  }
  frozen_amount_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), frozen_amount);
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.CoinCapital.frozen_amount)
}

// -------------------------------------------------------------------

// UserInfo

// optional .FrontEngine.enums.CoinType type = 1;
inline void UserInfo::clear_type() {
  type_ = 0;
}
inline ::FrontEngine::enums_CoinType UserInfo::type() const {
  // @@protoc_insertion_point(field_get:FrontEngine.UserInfo.type)
  return static_cast< ::FrontEngine::enums_CoinType >(type_);
}
inline void UserInfo::set_type(::FrontEngine::enums_CoinType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:FrontEngine.UserInfo.type)
}

// optional string username = 2;
inline void UserInfo::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserInfo::username() const {
  // @@protoc_insertion_point(field_get:FrontEngine.UserInfo.username)
  return username_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserInfo::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FrontEngine.UserInfo.username)
}
inline void UserInfo::set_username(const char* value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FrontEngine.UserInfo.username)
}
inline void UserInfo::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FrontEngine.UserInfo.username)
}
inline ::std::string* UserInfo::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:FrontEngine.UserInfo.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserInfo::release_username() {
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserInfo::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.UserInfo.username)
}

// optional string password = 3;
inline void UserInfo::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserInfo::password() const {
  // @@protoc_insertion_point(field_get:FrontEngine.UserInfo.password)
  return password_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserInfo::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FrontEngine.UserInfo.password)
}
inline void UserInfo::set_password(const char* value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FrontEngine.UserInfo.password)
}
inline void UserInfo::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FrontEngine.UserInfo.password)
}
inline ::std::string* UserInfo::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:FrontEngine.UserInfo.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserInfo::release_password() {
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserInfo::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.UserInfo.password)
}

// optional string address = 4;
inline void UserInfo::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserInfo::address() const {
  // @@protoc_insertion_point(field_get:FrontEngine.UserInfo.address)
  return address_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserInfo::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FrontEngine.UserInfo.address)
}
inline void UserInfo::set_address(const char* value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FrontEngine.UserInfo.address)
}
inline void UserInfo::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FrontEngine.UserInfo.address)
}
inline ::std::string* UserInfo::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:FrontEngine.UserInfo.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserInfo::release_address() {
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserInfo::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.UserInfo.address)
}

// -------------------------------------------------------------------

// HeartBeatRequest

// optional string request_id = 1;
inline void HeartBeatRequest::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HeartBeatRequest::request_id() const {
  // @@protoc_insertion_point(field_get:FrontEngine.HeartBeatRequest.request_id)
  return request_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HeartBeatRequest::set_request_id(const ::std::string& value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FrontEngine.HeartBeatRequest.request_id)
}
inline void HeartBeatRequest::set_request_id(const char* value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FrontEngine.HeartBeatRequest.request_id)
}
inline void HeartBeatRequest::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FrontEngine.HeartBeatRequest.request_id)
}
inline ::std::string* HeartBeatRequest::mutable_request_id() {
  
  // @@protoc_insertion_point(field_mutable:FrontEngine.HeartBeatRequest.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HeartBeatRequest::release_request_id() {
  
  return request_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HeartBeatRequest::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.HeartBeatRequest.request_id)
}

// optional string data = 2;
inline void HeartBeatRequest::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HeartBeatRequest::data() const {
  // @@protoc_insertion_point(field_get:FrontEngine.HeartBeatRequest.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HeartBeatRequest::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FrontEngine.HeartBeatRequest.data)
}
inline void HeartBeatRequest::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FrontEngine.HeartBeatRequest.data)
}
inline void HeartBeatRequest::set_data(const char* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FrontEngine.HeartBeatRequest.data)
}
inline ::std::string* HeartBeatRequest::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:FrontEngine.HeartBeatRequest.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HeartBeatRequest::release_data() {
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HeartBeatRequest::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.HeartBeatRequest.data)
}

// -------------------------------------------------------------------

// HeartBeatCallBack

// optional string request_id = 1;
inline void HeartBeatCallBack::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HeartBeatCallBack::request_id() const {
  // @@protoc_insertion_point(field_get:FrontEngine.HeartBeatCallBack.request_id)
  return request_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HeartBeatCallBack::set_request_id(const ::std::string& value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FrontEngine.HeartBeatCallBack.request_id)
}
inline void HeartBeatCallBack::set_request_id(const char* value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FrontEngine.HeartBeatCallBack.request_id)
}
inline void HeartBeatCallBack::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FrontEngine.HeartBeatCallBack.request_id)
}
inline ::std::string* HeartBeatCallBack::mutable_request_id() {
  
  // @@protoc_insertion_point(field_mutable:FrontEngine.HeartBeatCallBack.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HeartBeatCallBack::release_request_id() {
  
  return request_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HeartBeatCallBack::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.HeartBeatCallBack.request_id)
}

// optional string data = 2;
inline void HeartBeatCallBack::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HeartBeatCallBack::data() const {
  // @@protoc_insertion_point(field_get:FrontEngine.HeartBeatCallBack.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HeartBeatCallBack::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FrontEngine.HeartBeatCallBack.data)
}
inline void HeartBeatCallBack::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FrontEngine.HeartBeatCallBack.data)
}
inline void HeartBeatCallBack::set_data(const char* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FrontEngine.HeartBeatCallBack.data)
}
inline ::std::string* HeartBeatCallBack::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:FrontEngine.HeartBeatCallBack.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HeartBeatCallBack::release_data() {
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HeartBeatCallBack::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.HeartBeatCallBack.data)
}

// -------------------------------------------------------------------

// CheckAppId

// optional string request_id = 1;
inline void CheckAppId::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CheckAppId::request_id() const {
  // @@protoc_insertion_point(field_get:FrontEngine.CheckAppId.request_id)
  return request_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CheckAppId::set_request_id(const ::std::string& value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FrontEngine.CheckAppId.request_id)
}
inline void CheckAppId::set_request_id(const char* value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FrontEngine.CheckAppId.request_id)
}
inline void CheckAppId::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FrontEngine.CheckAppId.request_id)
}
inline ::std::string* CheckAppId::mutable_request_id() {
  
  // @@protoc_insertion_point(field_mutable:FrontEngine.CheckAppId.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CheckAppId::release_request_id() {
  
  return request_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CheckAppId::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.CheckAppId.request_id)
}

// optional string app_id = 2;
inline void CheckAppId::clear_app_id() {
  app_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CheckAppId::app_id() const {
  // @@protoc_insertion_point(field_get:FrontEngine.CheckAppId.app_id)
  return app_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CheckAppId::set_app_id(const ::std::string& value) {
  
  app_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FrontEngine.CheckAppId.app_id)
}
inline void CheckAppId::set_app_id(const char* value) {
  
  app_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FrontEngine.CheckAppId.app_id)
}
inline void CheckAppId::set_app_id(const char* value, size_t size) {
  
  app_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FrontEngine.CheckAppId.app_id)
}
inline ::std::string* CheckAppId::mutable_app_id() {
  
  // @@protoc_insertion_point(field_mutable:FrontEngine.CheckAppId.app_id)
  return app_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CheckAppId::release_app_id() {
  
  return app_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CheckAppId::set_allocated_app_id(::std::string* app_id) {
  if (app_id != NULL) {
    
  } else {
    
  }
  app_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), app_id);
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.CheckAppId.app_id)
}

// -------------------------------------------------------------------

// CheckAppIdCallBack

// optional string request_id = 1;
inline void CheckAppIdCallBack::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CheckAppIdCallBack::request_id() const {
  // @@protoc_insertion_point(field_get:FrontEngine.CheckAppIdCallBack.request_id)
  return request_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CheckAppIdCallBack::set_request_id(const ::std::string& value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FrontEngine.CheckAppIdCallBack.request_id)
}
inline void CheckAppIdCallBack::set_request_id(const char* value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FrontEngine.CheckAppIdCallBack.request_id)
}
inline void CheckAppIdCallBack::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FrontEngine.CheckAppIdCallBack.request_id)
}
inline ::std::string* CheckAppIdCallBack::mutable_request_id() {
  
  // @@protoc_insertion_point(field_mutable:FrontEngine.CheckAppIdCallBack.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CheckAppIdCallBack::release_request_id() {
  
  return request_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CheckAppIdCallBack::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.CheckAppIdCallBack.request_id)
}

// optional string app_id = 2;
inline void CheckAppIdCallBack::clear_app_id() {
  app_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CheckAppIdCallBack::app_id() const {
  // @@protoc_insertion_point(field_get:FrontEngine.CheckAppIdCallBack.app_id)
  return app_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CheckAppIdCallBack::set_app_id(const ::std::string& value) {
  
  app_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FrontEngine.CheckAppIdCallBack.app_id)
}
inline void CheckAppIdCallBack::set_app_id(const char* value) {
  
  app_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FrontEngine.CheckAppIdCallBack.app_id)
}
inline void CheckAppIdCallBack::set_app_id(const char* value, size_t size) {
  
  app_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FrontEngine.CheckAppIdCallBack.app_id)
}
inline ::std::string* CheckAppIdCallBack::mutable_app_id() {
  
  // @@protoc_insertion_point(field_mutable:FrontEngine.CheckAppIdCallBack.app_id)
  return app_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CheckAppIdCallBack::release_app_id() {
  
  return app_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CheckAppIdCallBack::set_allocated_app_id(::std::string* app_id) {
  if (app_id != NULL) {
    
  } else {
    
  }
  app_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), app_id);
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.CheckAppIdCallBack.app_id)
}

// optional string sdk_id = 3;
inline void CheckAppIdCallBack::clear_sdk_id() {
  sdk_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CheckAppIdCallBack::sdk_id() const {
  // @@protoc_insertion_point(field_get:FrontEngine.CheckAppIdCallBack.sdk_id)
  return sdk_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CheckAppIdCallBack::set_sdk_id(const ::std::string& value) {
  
  sdk_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FrontEngine.CheckAppIdCallBack.sdk_id)
}
inline void CheckAppIdCallBack::set_sdk_id(const char* value) {
  
  sdk_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FrontEngine.CheckAppIdCallBack.sdk_id)
}
inline void CheckAppIdCallBack::set_sdk_id(const char* value, size_t size) {
  
  sdk_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FrontEngine.CheckAppIdCallBack.sdk_id)
}
inline ::std::string* CheckAppIdCallBack::mutable_sdk_id() {
  
  // @@protoc_insertion_point(field_mutable:FrontEngine.CheckAppIdCallBack.sdk_id)
  return sdk_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CheckAppIdCallBack::release_sdk_id() {
  
  return sdk_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CheckAppIdCallBack::set_allocated_sdk_id(::std::string* sdk_id) {
  if (sdk_id != NULL) {
    
  } else {
    
  }
  sdk_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sdk_id);
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.CheckAppIdCallBack.sdk_id)
}

// -------------------------------------------------------------------

// CreateAccountRequest

// optional string request_id = 1;
inline void CreateAccountRequest::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateAccountRequest::request_id() const {
  // @@protoc_insertion_point(field_get:FrontEngine.CreateAccountRequest.request_id)
  return request_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateAccountRequest::set_request_id(const ::std::string& value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FrontEngine.CreateAccountRequest.request_id)
}
inline void CreateAccountRequest::set_request_id(const char* value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FrontEngine.CreateAccountRequest.request_id)
}
inline void CreateAccountRequest::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FrontEngine.CreateAccountRequest.request_id)
}
inline ::std::string* CreateAccountRequest::mutable_request_id() {
  
  // @@protoc_insertion_point(field_mutable:FrontEngine.CreateAccountRequest.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateAccountRequest::release_request_id() {
  
  return request_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateAccountRequest::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.CreateAccountRequest.request_id)
}

// optional .FrontEngine.enums.CoinType coin_type = 2;
inline void CreateAccountRequest::clear_coin_type() {
  coin_type_ = 0;
}
inline ::FrontEngine::enums_CoinType CreateAccountRequest::coin_type() const {
  // @@protoc_insertion_point(field_get:FrontEngine.CreateAccountRequest.coin_type)
  return static_cast< ::FrontEngine::enums_CoinType >(coin_type_);
}
inline void CreateAccountRequest::set_coin_type(::FrontEngine::enums_CoinType value) {
  
  coin_type_ = value;
  // @@protoc_insertion_point(field_set:FrontEngine.CreateAccountRequest.coin_type)
}

// optional string username = 3;
inline void CreateAccountRequest::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateAccountRequest::username() const {
  // @@protoc_insertion_point(field_get:FrontEngine.CreateAccountRequest.username)
  return username_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateAccountRequest::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FrontEngine.CreateAccountRequest.username)
}
inline void CreateAccountRequest::set_username(const char* value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FrontEngine.CreateAccountRequest.username)
}
inline void CreateAccountRequest::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FrontEngine.CreateAccountRequest.username)
}
inline ::std::string* CreateAccountRequest::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:FrontEngine.CreateAccountRequest.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateAccountRequest::release_username() {
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateAccountRequest::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.CreateAccountRequest.username)
}

// optional string password = 4;
inline void CreateAccountRequest::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateAccountRequest::password() const {
  // @@protoc_insertion_point(field_get:FrontEngine.CreateAccountRequest.password)
  return password_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateAccountRequest::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FrontEngine.CreateAccountRequest.password)
}
inline void CreateAccountRequest::set_password(const char* value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FrontEngine.CreateAccountRequest.password)
}
inline void CreateAccountRequest::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FrontEngine.CreateAccountRequest.password)
}
inline ::std::string* CreateAccountRequest::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:FrontEngine.CreateAccountRequest.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateAccountRequest::release_password() {
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateAccountRequest::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.CreateAccountRequest.password)
}

// -------------------------------------------------------------------

// CreateAccountCallBack

// optional string request_id = 1;
inline void CreateAccountCallBack::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateAccountCallBack::request_id() const {
  // @@protoc_insertion_point(field_get:FrontEngine.CreateAccountCallBack.request_id)
  return request_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateAccountCallBack::set_request_id(const ::std::string& value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FrontEngine.CreateAccountCallBack.request_id)
}
inline void CreateAccountCallBack::set_request_id(const char* value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FrontEngine.CreateAccountCallBack.request_id)
}
inline void CreateAccountCallBack::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FrontEngine.CreateAccountCallBack.request_id)
}
inline ::std::string* CreateAccountCallBack::mutable_request_id() {
  
  // @@protoc_insertion_point(field_mutable:FrontEngine.CreateAccountCallBack.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateAccountCallBack::release_request_id() {
  
  return request_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateAccountCallBack::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.CreateAccountCallBack.request_id)
}

// optional .FrontEngine.UserInfo account = 2;
inline bool CreateAccountCallBack::has_account() const {
  return !_is_default_instance_ && account_ != NULL;
}
inline void CreateAccountCallBack::clear_account() {
  if (GetArenaNoVirtual() == NULL && account_ != NULL) delete account_;
  account_ = NULL;
}
inline const ::FrontEngine::UserInfo& CreateAccountCallBack::account() const {
  // @@protoc_insertion_point(field_get:FrontEngine.CreateAccountCallBack.account)
  return account_ != NULL ? *account_ : *default_instance_->account_;
}
inline ::FrontEngine::UserInfo* CreateAccountCallBack::mutable_account() {
  
  if (account_ == NULL) {
    account_ = new ::FrontEngine::UserInfo;
  }
  // @@protoc_insertion_point(field_mutable:FrontEngine.CreateAccountCallBack.account)
  return account_;
}
inline ::FrontEngine::UserInfo* CreateAccountCallBack::release_account() {
  
  ::FrontEngine::UserInfo* temp = account_;
  account_ = NULL;
  return temp;
}
inline void CreateAccountCallBack::set_allocated_account(::FrontEngine::UserInfo* account) {
  delete account_;
  account_ = account;
  if (account) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.CreateAccountCallBack.account)
}

// optional int32 errorCode = 3;
inline void CreateAccountCallBack::clear_errorcode() {
  errorcode_ = 0;
}
inline ::google::protobuf::int32 CreateAccountCallBack::errorcode() const {
  // @@protoc_insertion_point(field_get:FrontEngine.CreateAccountCallBack.errorCode)
  return errorcode_;
}
inline void CreateAccountCallBack::set_errorcode(::google::protobuf::int32 value) {
  
  errorcode_ = value;
  // @@protoc_insertion_point(field_set:FrontEngine.CreateAccountCallBack.errorCode)
}

// optional string error = 4;
inline void CreateAccountCallBack::clear_error() {
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateAccountCallBack::error() const {
  // @@protoc_insertion_point(field_get:FrontEngine.CreateAccountCallBack.error)
  return error_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateAccountCallBack::set_error(const ::std::string& value) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FrontEngine.CreateAccountCallBack.error)
}
inline void CreateAccountCallBack::set_error(const char* value) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FrontEngine.CreateAccountCallBack.error)
}
inline void CreateAccountCallBack::set_error(const char* value, size_t size) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FrontEngine.CreateAccountCallBack.error)
}
inline ::std::string* CreateAccountCallBack::mutable_error() {
  
  // @@protoc_insertion_point(field_mutable:FrontEngine.CreateAccountCallBack.error)
  return error_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateAccountCallBack::release_error() {
  
  return error_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateAccountCallBack::set_allocated_error(::std::string* error) {
  if (error != NULL) {
    
  } else {
    
  }
  error_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error);
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.CreateAccountCallBack.error)
}

// -------------------------------------------------------------------

// QueryBalanceRequest

// optional string request_id = 1;
inline void QueryBalanceRequest::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QueryBalanceRequest::request_id() const {
  // @@protoc_insertion_point(field_get:FrontEngine.QueryBalanceRequest.request_id)
  return request_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryBalanceRequest::set_request_id(const ::std::string& value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FrontEngine.QueryBalanceRequest.request_id)
}
inline void QueryBalanceRequest::set_request_id(const char* value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FrontEngine.QueryBalanceRequest.request_id)
}
inline void QueryBalanceRequest::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FrontEngine.QueryBalanceRequest.request_id)
}
inline ::std::string* QueryBalanceRequest::mutable_request_id() {
  
  // @@protoc_insertion_point(field_mutable:FrontEngine.QueryBalanceRequest.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QueryBalanceRequest::release_request_id() {
  
  return request_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryBalanceRequest::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.QueryBalanceRequest.request_id)
}

// optional .FrontEngine.enums.CoinType coin_type = 2;
inline void QueryBalanceRequest::clear_coin_type() {
  coin_type_ = 0;
}
inline ::FrontEngine::enums_CoinType QueryBalanceRequest::coin_type() const {
  // @@protoc_insertion_point(field_get:FrontEngine.QueryBalanceRequest.coin_type)
  return static_cast< ::FrontEngine::enums_CoinType >(coin_type_);
}
inline void QueryBalanceRequest::set_coin_type(::FrontEngine::enums_CoinType value) {
  
  coin_type_ = value;
  // @@protoc_insertion_point(field_set:FrontEngine.QueryBalanceRequest.coin_type)
}

// optional string address = 3;
inline void QueryBalanceRequest::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QueryBalanceRequest::address() const {
  // @@protoc_insertion_point(field_get:FrontEngine.QueryBalanceRequest.address)
  return address_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryBalanceRequest::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FrontEngine.QueryBalanceRequest.address)
}
inline void QueryBalanceRequest::set_address(const char* value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FrontEngine.QueryBalanceRequest.address)
}
inline void QueryBalanceRequest::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FrontEngine.QueryBalanceRequest.address)
}
inline ::std::string* QueryBalanceRequest::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:FrontEngine.QueryBalanceRequest.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QueryBalanceRequest::release_address() {
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryBalanceRequest::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.QueryBalanceRequest.address)
}

// -------------------------------------------------------------------

// QueryBalanceCallBack

// optional string request_id = 1;
inline void QueryBalanceCallBack::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QueryBalanceCallBack::request_id() const {
  // @@protoc_insertion_point(field_get:FrontEngine.QueryBalanceCallBack.request_id)
  return request_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryBalanceCallBack::set_request_id(const ::std::string& value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FrontEngine.QueryBalanceCallBack.request_id)
}
inline void QueryBalanceCallBack::set_request_id(const char* value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FrontEngine.QueryBalanceCallBack.request_id)
}
inline void QueryBalanceCallBack::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FrontEngine.QueryBalanceCallBack.request_id)
}
inline ::std::string* QueryBalanceCallBack::mutable_request_id() {
  
  // @@protoc_insertion_point(field_mutable:FrontEngine.QueryBalanceCallBack.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QueryBalanceCallBack::release_request_id() {
  
  return request_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryBalanceCallBack::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.QueryBalanceCallBack.request_id)
}

// optional .FrontEngine.CoinCapital capital = 2;
inline bool QueryBalanceCallBack::has_capital() const {
  return !_is_default_instance_ && capital_ != NULL;
}
inline void QueryBalanceCallBack::clear_capital() {
  if (GetArenaNoVirtual() == NULL && capital_ != NULL) delete capital_;
  capital_ = NULL;
}
inline const ::FrontEngine::CoinCapital& QueryBalanceCallBack::capital() const {
  // @@protoc_insertion_point(field_get:FrontEngine.QueryBalanceCallBack.capital)
  return capital_ != NULL ? *capital_ : *default_instance_->capital_;
}
inline ::FrontEngine::CoinCapital* QueryBalanceCallBack::mutable_capital() {
  
  if (capital_ == NULL) {
    capital_ = new ::FrontEngine::CoinCapital;
  }
  // @@protoc_insertion_point(field_mutable:FrontEngine.QueryBalanceCallBack.capital)
  return capital_;
}
inline ::FrontEngine::CoinCapital* QueryBalanceCallBack::release_capital() {
  
  ::FrontEngine::CoinCapital* temp = capital_;
  capital_ = NULL;
  return temp;
}
inline void QueryBalanceCallBack::set_allocated_capital(::FrontEngine::CoinCapital* capital) {
  delete capital_;
  capital_ = capital;
  if (capital) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.QueryBalanceCallBack.capital)
}

// optional int32 errorCode = 3;
inline void QueryBalanceCallBack::clear_errorcode() {
  errorcode_ = 0;
}
inline ::google::protobuf::int32 QueryBalanceCallBack::errorcode() const {
  // @@protoc_insertion_point(field_get:FrontEngine.QueryBalanceCallBack.errorCode)
  return errorcode_;
}
inline void QueryBalanceCallBack::set_errorcode(::google::protobuf::int32 value) {
  
  errorcode_ = value;
  // @@protoc_insertion_point(field_set:FrontEngine.QueryBalanceCallBack.errorCode)
}

// optional string error = 4;
inline void QueryBalanceCallBack::clear_error() {
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QueryBalanceCallBack::error() const {
  // @@protoc_insertion_point(field_get:FrontEngine.QueryBalanceCallBack.error)
  return error_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryBalanceCallBack::set_error(const ::std::string& value) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FrontEngine.QueryBalanceCallBack.error)
}
inline void QueryBalanceCallBack::set_error(const char* value) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FrontEngine.QueryBalanceCallBack.error)
}
inline void QueryBalanceCallBack::set_error(const char* value, size_t size) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FrontEngine.QueryBalanceCallBack.error)
}
inline ::std::string* QueryBalanceCallBack::mutable_error() {
  
  // @@protoc_insertion_point(field_mutable:FrontEngine.QueryBalanceCallBack.error)
  return error_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QueryBalanceCallBack::release_error() {
  
  return error_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryBalanceCallBack::set_allocated_error(::std::string* error) {
  if (error != NULL) {
    
  } else {
    
  }
  error_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error);
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.QueryBalanceCallBack.error)
}

// -------------------------------------------------------------------

// QueryFeeRequest

// optional string request_id = 1;
inline void QueryFeeRequest::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QueryFeeRequest::request_id() const {
  // @@protoc_insertion_point(field_get:FrontEngine.QueryFeeRequest.request_id)
  return request_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryFeeRequest::set_request_id(const ::std::string& value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FrontEngine.QueryFeeRequest.request_id)
}
inline void QueryFeeRequest::set_request_id(const char* value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FrontEngine.QueryFeeRequest.request_id)
}
inline void QueryFeeRequest::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FrontEngine.QueryFeeRequest.request_id)
}
inline ::std::string* QueryFeeRequest::mutable_request_id() {
  
  // @@protoc_insertion_point(field_mutable:FrontEngine.QueryFeeRequest.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QueryFeeRequest::release_request_id() {
  
  return request_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryFeeRequest::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.QueryFeeRequest.request_id)
}

// optional .FrontEngine.enums.CoinType coin_type = 2;
inline void QueryFeeRequest::clear_coin_type() {
  coin_type_ = 0;
}
inline ::FrontEngine::enums_CoinType QueryFeeRequest::coin_type() const {
  // @@protoc_insertion_point(field_get:FrontEngine.QueryFeeRequest.coin_type)
  return static_cast< ::FrontEngine::enums_CoinType >(coin_type_);
}
inline void QueryFeeRequest::set_coin_type(::FrontEngine::enums_CoinType value) {
  
  coin_type_ = value;
  // @@protoc_insertion_point(field_set:FrontEngine.QueryFeeRequest.coin_type)
}

// -------------------------------------------------------------------

// QueryFeeCallBack

// optional string request_id = 1;
inline void QueryFeeCallBack::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QueryFeeCallBack::request_id() const {
  // @@protoc_insertion_point(field_get:FrontEngine.QueryFeeCallBack.request_id)
  return request_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryFeeCallBack::set_request_id(const ::std::string& value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FrontEngine.QueryFeeCallBack.request_id)
}
inline void QueryFeeCallBack::set_request_id(const char* value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FrontEngine.QueryFeeCallBack.request_id)
}
inline void QueryFeeCallBack::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FrontEngine.QueryFeeCallBack.request_id)
}
inline ::std::string* QueryFeeCallBack::mutable_request_id() {
  
  // @@protoc_insertion_point(field_mutable:FrontEngine.QueryFeeCallBack.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QueryFeeCallBack::release_request_id() {
  
  return request_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryFeeCallBack::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.QueryFeeCallBack.request_id)
}

// optional .FrontEngine.enums.CoinType coin_type = 2;
inline void QueryFeeCallBack::clear_coin_type() {
  coin_type_ = 0;
}
inline ::FrontEngine::enums_CoinType QueryFeeCallBack::coin_type() const {
  // @@protoc_insertion_point(field_get:FrontEngine.QueryFeeCallBack.coin_type)
  return static_cast< ::FrontEngine::enums_CoinType >(coin_type_);
}
inline void QueryFeeCallBack::set_coin_type(::FrontEngine::enums_CoinType value) {
  
  coin_type_ = value;
  // @@protoc_insertion_point(field_set:FrontEngine.QueryFeeCallBack.coin_type)
}

// optional string fee = 3;
inline void QueryFeeCallBack::clear_fee() {
  fee_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QueryFeeCallBack::fee() const {
  // @@protoc_insertion_point(field_get:FrontEngine.QueryFeeCallBack.fee)
  return fee_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryFeeCallBack::set_fee(const ::std::string& value) {
  
  fee_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FrontEngine.QueryFeeCallBack.fee)
}
inline void QueryFeeCallBack::set_fee(const char* value) {
  
  fee_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FrontEngine.QueryFeeCallBack.fee)
}
inline void QueryFeeCallBack::set_fee(const char* value, size_t size) {
  
  fee_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FrontEngine.QueryFeeCallBack.fee)
}
inline ::std::string* QueryFeeCallBack::mutable_fee() {
  
  // @@protoc_insertion_point(field_mutable:FrontEngine.QueryFeeCallBack.fee)
  return fee_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QueryFeeCallBack::release_fee() {
  
  return fee_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryFeeCallBack::set_allocated_fee(::std::string* fee) {
  if (fee != NULL) {
    
  } else {
    
  }
  fee_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fee);
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.QueryFeeCallBack.fee)
}

// optional int32 errorCode = 4;
inline void QueryFeeCallBack::clear_errorcode() {
  errorcode_ = 0;
}
inline ::google::protobuf::int32 QueryFeeCallBack::errorcode() const {
  // @@protoc_insertion_point(field_get:FrontEngine.QueryFeeCallBack.errorCode)
  return errorcode_;
}
inline void QueryFeeCallBack::set_errorcode(::google::protobuf::int32 value) {
  
  errorcode_ = value;
  // @@protoc_insertion_point(field_set:FrontEngine.QueryFeeCallBack.errorCode)
}

// optional string error = 5;
inline void QueryFeeCallBack::clear_error() {
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QueryFeeCallBack::error() const {
  // @@protoc_insertion_point(field_get:FrontEngine.QueryFeeCallBack.error)
  return error_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryFeeCallBack::set_error(const ::std::string& value) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FrontEngine.QueryFeeCallBack.error)
}
inline void QueryFeeCallBack::set_error(const char* value) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FrontEngine.QueryFeeCallBack.error)
}
inline void QueryFeeCallBack::set_error(const char* value, size_t size) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FrontEngine.QueryFeeCallBack.error)
}
inline ::std::string* QueryFeeCallBack::mutable_error() {
  
  // @@protoc_insertion_point(field_mutable:FrontEngine.QueryFeeCallBack.error)
  return error_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QueryFeeCallBack::release_error() {
  
  return error_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryFeeCallBack::set_allocated_error(::std::string* error) {
  if (error != NULL) {
    
  } else {
    
  }
  error_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error);
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.QueryFeeCallBack.error)
}

// -------------------------------------------------------------------

// QueryOrderRequest

// optional string request_id = 1;
inline void QueryOrderRequest::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QueryOrderRequest::request_id() const {
  // @@protoc_insertion_point(field_get:FrontEngine.QueryOrderRequest.request_id)
  return request_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryOrderRequest::set_request_id(const ::std::string& value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FrontEngine.QueryOrderRequest.request_id)
}
inline void QueryOrderRequest::set_request_id(const char* value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FrontEngine.QueryOrderRequest.request_id)
}
inline void QueryOrderRequest::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FrontEngine.QueryOrderRequest.request_id)
}
inline ::std::string* QueryOrderRequest::mutable_request_id() {
  
  // @@protoc_insertion_point(field_mutable:FrontEngine.QueryOrderRequest.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QueryOrderRequest::release_request_id() {
  
  return request_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryOrderRequest::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.QueryOrderRequest.request_id)
}

// optional .FrontEngine.enums.CoinType coin_type = 2;
inline void QueryOrderRequest::clear_coin_type() {
  coin_type_ = 0;
}
inline ::FrontEngine::enums_CoinType QueryOrderRequest::coin_type() const {
  // @@protoc_insertion_point(field_get:FrontEngine.QueryOrderRequest.coin_type)
  return static_cast< ::FrontEngine::enums_CoinType >(coin_type_);
}
inline void QueryOrderRequest::set_coin_type(::FrontEngine::enums_CoinType value) {
  
  coin_type_ = value;
  // @@protoc_insertion_point(field_set:FrontEngine.QueryOrderRequest.coin_type)
}

// optional string order_id = 3;
inline void QueryOrderRequest::clear_order_id() {
  order_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QueryOrderRequest::order_id() const {
  // @@protoc_insertion_point(field_get:FrontEngine.QueryOrderRequest.order_id)
  return order_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryOrderRequest::set_order_id(const ::std::string& value) {
  
  order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FrontEngine.QueryOrderRequest.order_id)
}
inline void QueryOrderRequest::set_order_id(const char* value) {
  
  order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FrontEngine.QueryOrderRequest.order_id)
}
inline void QueryOrderRequest::set_order_id(const char* value, size_t size) {
  
  order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FrontEngine.QueryOrderRequest.order_id)
}
inline ::std::string* QueryOrderRequest::mutable_order_id() {
  
  // @@protoc_insertion_point(field_mutable:FrontEngine.QueryOrderRequest.order_id)
  return order_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QueryOrderRequest::release_order_id() {
  
  return order_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryOrderRequest::set_allocated_order_id(::std::string* order_id) {
  if (order_id != NULL) {
    
  } else {
    
  }
  order_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), order_id);
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.QueryOrderRequest.order_id)
}

// -------------------------------------------------------------------

// QueryOrderCallBack

// optional string request_id = 1;
inline void QueryOrderCallBack::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QueryOrderCallBack::request_id() const {
  // @@protoc_insertion_point(field_get:FrontEngine.QueryOrderCallBack.request_id)
  return request_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryOrderCallBack::set_request_id(const ::std::string& value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FrontEngine.QueryOrderCallBack.request_id)
}
inline void QueryOrderCallBack::set_request_id(const char* value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FrontEngine.QueryOrderCallBack.request_id)
}
inline void QueryOrderCallBack::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FrontEngine.QueryOrderCallBack.request_id)
}
inline ::std::string* QueryOrderCallBack::mutable_request_id() {
  
  // @@protoc_insertion_point(field_mutable:FrontEngine.QueryOrderCallBack.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QueryOrderCallBack::release_request_id() {
  
  return request_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryOrderCallBack::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.QueryOrderCallBack.request_id)
}

// optional .FrontEngine.Order order = 2;
inline bool QueryOrderCallBack::has_order() const {
  return !_is_default_instance_ && order_ != NULL;
}
inline void QueryOrderCallBack::clear_order() {
  if (GetArenaNoVirtual() == NULL && order_ != NULL) delete order_;
  order_ = NULL;
}
inline const ::FrontEngine::Order& QueryOrderCallBack::order() const {
  // @@protoc_insertion_point(field_get:FrontEngine.QueryOrderCallBack.order)
  return order_ != NULL ? *order_ : *default_instance_->order_;
}
inline ::FrontEngine::Order* QueryOrderCallBack::mutable_order() {
  
  if (order_ == NULL) {
    order_ = new ::FrontEngine::Order;
  }
  // @@protoc_insertion_point(field_mutable:FrontEngine.QueryOrderCallBack.order)
  return order_;
}
inline ::FrontEngine::Order* QueryOrderCallBack::release_order() {
  
  ::FrontEngine::Order* temp = order_;
  order_ = NULL;
  return temp;
}
inline void QueryOrderCallBack::set_allocated_order(::FrontEngine::Order* order) {
  delete order_;
  order_ = order;
  if (order) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.QueryOrderCallBack.order)
}

// optional int32 errorCode = 3;
inline void QueryOrderCallBack::clear_errorcode() {
  errorcode_ = 0;
}
inline ::google::protobuf::int32 QueryOrderCallBack::errorcode() const {
  // @@protoc_insertion_point(field_get:FrontEngine.QueryOrderCallBack.errorCode)
  return errorcode_;
}
inline void QueryOrderCallBack::set_errorcode(::google::protobuf::int32 value) {
  
  errorcode_ = value;
  // @@protoc_insertion_point(field_set:FrontEngine.QueryOrderCallBack.errorCode)
}

// optional string error = 4;
inline void QueryOrderCallBack::clear_error() {
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QueryOrderCallBack::error() const {
  // @@protoc_insertion_point(field_get:FrontEngine.QueryOrderCallBack.error)
  return error_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryOrderCallBack::set_error(const ::std::string& value) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FrontEngine.QueryOrderCallBack.error)
}
inline void QueryOrderCallBack::set_error(const char* value) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FrontEngine.QueryOrderCallBack.error)
}
inline void QueryOrderCallBack::set_error(const char* value, size_t size) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FrontEngine.QueryOrderCallBack.error)
}
inline ::std::string* QueryOrderCallBack::mutable_error() {
  
  // @@protoc_insertion_point(field_mutable:FrontEngine.QueryOrderCallBack.error)
  return error_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QueryOrderCallBack::release_error() {
  
  return error_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryOrderCallBack::set_allocated_error(::std::string* error) {
  if (error != NULL) {
    
  } else {
    
  }
  error_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error);
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.QueryOrderCallBack.error)
}

// -------------------------------------------------------------------

// QueryOrdersRequest

// optional string request_id = 1;
inline void QueryOrdersRequest::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QueryOrdersRequest::request_id() const {
  // @@protoc_insertion_point(field_get:FrontEngine.QueryOrdersRequest.request_id)
  return request_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryOrdersRequest::set_request_id(const ::std::string& value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FrontEngine.QueryOrdersRequest.request_id)
}
inline void QueryOrdersRequest::set_request_id(const char* value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FrontEngine.QueryOrdersRequest.request_id)
}
inline void QueryOrdersRequest::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FrontEngine.QueryOrdersRequest.request_id)
}
inline ::std::string* QueryOrdersRequest::mutable_request_id() {
  
  // @@protoc_insertion_point(field_mutable:FrontEngine.QueryOrdersRequest.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QueryOrdersRequest::release_request_id() {
  
  return request_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryOrdersRequest::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.QueryOrdersRequest.request_id)
}

// optional .FrontEngine.enums.CoinType coin_type = 2;
inline void QueryOrdersRequest::clear_coin_type() {
  coin_type_ = 0;
}
inline ::FrontEngine::enums_CoinType QueryOrdersRequest::coin_type() const {
  // @@protoc_insertion_point(field_get:FrontEngine.QueryOrdersRequest.coin_type)
  return static_cast< ::FrontEngine::enums_CoinType >(coin_type_);
}
inline void QueryOrdersRequest::set_coin_type(::FrontEngine::enums_CoinType value) {
  
  coin_type_ = value;
  // @@protoc_insertion_point(field_set:FrontEngine.QueryOrdersRequest.coin_type)
}

// optional string address = 3;
inline void QueryOrdersRequest::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QueryOrdersRequest::address() const {
  // @@protoc_insertion_point(field_get:FrontEngine.QueryOrdersRequest.address)
  return address_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryOrdersRequest::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FrontEngine.QueryOrdersRequest.address)
}
inline void QueryOrdersRequest::set_address(const char* value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FrontEngine.QueryOrdersRequest.address)
}
inline void QueryOrdersRequest::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FrontEngine.QueryOrdersRequest.address)
}
inline ::std::string* QueryOrdersRequest::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:FrontEngine.QueryOrdersRequest.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QueryOrdersRequest::release_address() {
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryOrdersRequest::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.QueryOrdersRequest.address)
}

// optional .FrontEngine.Order order = 4;
inline bool QueryOrdersRequest::has_order() const {
  return !_is_default_instance_ && order_ != NULL;
}
inline void QueryOrdersRequest::clear_order() {
  if (GetArenaNoVirtual() == NULL && order_ != NULL) delete order_;
  order_ = NULL;
}
inline const ::FrontEngine::Order& QueryOrdersRequest::order() const {
  // @@protoc_insertion_point(field_get:FrontEngine.QueryOrdersRequest.order)
  return order_ != NULL ? *order_ : *default_instance_->order_;
}
inline ::FrontEngine::Order* QueryOrdersRequest::mutable_order() {
  
  if (order_ == NULL) {
    order_ = new ::FrontEngine::Order;
  }
  // @@protoc_insertion_point(field_mutable:FrontEngine.QueryOrdersRequest.order)
  return order_;
}
inline ::FrontEngine::Order* QueryOrdersRequest::release_order() {
  
  ::FrontEngine::Order* temp = order_;
  order_ = NULL;
  return temp;
}
inline void QueryOrdersRequest::set_allocated_order(::FrontEngine::Order* order) {
  delete order_;
  order_ = order;
  if (order) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.QueryOrdersRequest.order)
}

// -------------------------------------------------------------------

// QueryOrdersCallBack

// optional string request_id = 1;
inline void QueryOrdersCallBack::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QueryOrdersCallBack::request_id() const {
  // @@protoc_insertion_point(field_get:FrontEngine.QueryOrdersCallBack.request_id)
  return request_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryOrdersCallBack::set_request_id(const ::std::string& value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FrontEngine.QueryOrdersCallBack.request_id)
}
inline void QueryOrdersCallBack::set_request_id(const char* value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FrontEngine.QueryOrdersCallBack.request_id)
}
inline void QueryOrdersCallBack::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FrontEngine.QueryOrdersCallBack.request_id)
}
inline ::std::string* QueryOrdersCallBack::mutable_request_id() {
  
  // @@protoc_insertion_point(field_mutable:FrontEngine.QueryOrdersCallBack.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QueryOrdersCallBack::release_request_id() {
  
  return request_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryOrdersCallBack::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.QueryOrdersCallBack.request_id)
}

// repeated .FrontEngine.Order order = 2;
inline int QueryOrdersCallBack::order_size() const {
  return order_.size();
}
inline void QueryOrdersCallBack::clear_order() {
  order_.Clear();
}
inline const ::FrontEngine::Order& QueryOrdersCallBack::order(int index) const {
  // @@protoc_insertion_point(field_get:FrontEngine.QueryOrdersCallBack.order)
  return order_.Get(index);
}
inline ::FrontEngine::Order* QueryOrdersCallBack::mutable_order(int index) {
  // @@protoc_insertion_point(field_mutable:FrontEngine.QueryOrdersCallBack.order)
  return order_.Mutable(index);
}
inline ::FrontEngine::Order* QueryOrdersCallBack::add_order() {
  // @@protoc_insertion_point(field_add:FrontEngine.QueryOrdersCallBack.order)
  return order_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::FrontEngine::Order >*
QueryOrdersCallBack::mutable_order() {
  // @@protoc_insertion_point(field_mutable_list:FrontEngine.QueryOrdersCallBack.order)
  return &order_;
}
inline const ::google::protobuf::RepeatedPtrField< ::FrontEngine::Order >&
QueryOrdersCallBack::order() const {
  // @@protoc_insertion_point(field_list:FrontEngine.QueryOrdersCallBack.order)
  return order_;
}

// optional int32 length = 3;
inline void QueryOrdersCallBack::clear_length() {
  length_ = 0;
}
inline ::google::protobuf::int32 QueryOrdersCallBack::length() const {
  // @@protoc_insertion_point(field_get:FrontEngine.QueryOrdersCallBack.length)
  return length_;
}
inline void QueryOrdersCallBack::set_length(::google::protobuf::int32 value) {
  
  length_ = value;
  // @@protoc_insertion_point(field_set:FrontEngine.QueryOrdersCallBack.length)
}

// optional int32 errorCode = 4;
inline void QueryOrdersCallBack::clear_errorcode() {
  errorcode_ = 0;
}
inline ::google::protobuf::int32 QueryOrdersCallBack::errorcode() const {
  // @@protoc_insertion_point(field_get:FrontEngine.QueryOrdersCallBack.errorCode)
  return errorcode_;
}
inline void QueryOrdersCallBack::set_errorcode(::google::protobuf::int32 value) {
  
  errorcode_ = value;
  // @@protoc_insertion_point(field_set:FrontEngine.QueryOrdersCallBack.errorCode)
}

// optional string error = 5;
inline void QueryOrdersCallBack::clear_error() {
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QueryOrdersCallBack::error() const {
  // @@protoc_insertion_point(field_get:FrontEngine.QueryOrdersCallBack.error)
  return error_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryOrdersCallBack::set_error(const ::std::string& value) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FrontEngine.QueryOrdersCallBack.error)
}
inline void QueryOrdersCallBack::set_error(const char* value) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FrontEngine.QueryOrdersCallBack.error)
}
inline void QueryOrdersCallBack::set_error(const char* value, size_t size) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FrontEngine.QueryOrdersCallBack.error)
}
inline ::std::string* QueryOrdersCallBack::mutable_error() {
  
  // @@protoc_insertion_point(field_mutable:FrontEngine.QueryOrdersCallBack.error)
  return error_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QueryOrdersCallBack::release_error() {
  
  return error_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryOrdersCallBack::set_allocated_error(::std::string* error) {
  if (error != NULL) {
    
  } else {
    
  }
  error_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error);
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.QueryOrdersCallBack.error)
}

// -------------------------------------------------------------------

// SendCoinRequest

// optional string request_id = 1;
inline void SendCoinRequest::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SendCoinRequest::request_id() const {
  // @@protoc_insertion_point(field_get:FrontEngine.SendCoinRequest.request_id)
  return request_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SendCoinRequest::set_request_id(const ::std::string& value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FrontEngine.SendCoinRequest.request_id)
}
inline void SendCoinRequest::set_request_id(const char* value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FrontEngine.SendCoinRequest.request_id)
}
inline void SendCoinRequest::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FrontEngine.SendCoinRequest.request_id)
}
inline ::std::string* SendCoinRequest::mutable_request_id() {
  
  // @@protoc_insertion_point(field_mutable:FrontEngine.SendCoinRequest.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SendCoinRequest::release_request_id() {
  
  return request_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SendCoinRequest::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.SendCoinRequest.request_id)
}

// optional .FrontEngine.enums.CoinType coin_type = 2;
inline void SendCoinRequest::clear_coin_type() {
  coin_type_ = 0;
}
inline ::FrontEngine::enums_CoinType SendCoinRequest::coin_type() const {
  // @@protoc_insertion_point(field_get:FrontEngine.SendCoinRequest.coin_type)
  return static_cast< ::FrontEngine::enums_CoinType >(coin_type_);
}
inline void SendCoinRequest::set_coin_type(::FrontEngine::enums_CoinType value) {
  
  coin_type_ = value;
  // @@protoc_insertion_point(field_set:FrontEngine.SendCoinRequest.coin_type)
}

// optional string from_address = 3;
inline void SendCoinRequest::clear_from_address() {
  from_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SendCoinRequest::from_address() const {
  // @@protoc_insertion_point(field_get:FrontEngine.SendCoinRequest.from_address)
  return from_address_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SendCoinRequest::set_from_address(const ::std::string& value) {
  
  from_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FrontEngine.SendCoinRequest.from_address)
}
inline void SendCoinRequest::set_from_address(const char* value) {
  
  from_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FrontEngine.SendCoinRequest.from_address)
}
inline void SendCoinRequest::set_from_address(const char* value, size_t size) {
  
  from_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FrontEngine.SendCoinRequest.from_address)
}
inline ::std::string* SendCoinRequest::mutable_from_address() {
  
  // @@protoc_insertion_point(field_mutable:FrontEngine.SendCoinRequest.from_address)
  return from_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SendCoinRequest::release_from_address() {
  
  return from_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SendCoinRequest::set_allocated_from_address(::std::string* from_address) {
  if (from_address != NULL) {
    
  } else {
    
  }
  from_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from_address);
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.SendCoinRequest.from_address)
}

// optional string from_pwd = 4;
inline void SendCoinRequest::clear_from_pwd() {
  from_pwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SendCoinRequest::from_pwd() const {
  // @@protoc_insertion_point(field_get:FrontEngine.SendCoinRequest.from_pwd)
  return from_pwd_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SendCoinRequest::set_from_pwd(const ::std::string& value) {
  
  from_pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FrontEngine.SendCoinRequest.from_pwd)
}
inline void SendCoinRequest::set_from_pwd(const char* value) {
  
  from_pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FrontEngine.SendCoinRequest.from_pwd)
}
inline void SendCoinRequest::set_from_pwd(const char* value, size_t size) {
  
  from_pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FrontEngine.SendCoinRequest.from_pwd)
}
inline ::std::string* SendCoinRequest::mutable_from_pwd() {
  
  // @@protoc_insertion_point(field_mutable:FrontEngine.SendCoinRequest.from_pwd)
  return from_pwd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SendCoinRequest::release_from_pwd() {
  
  return from_pwd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SendCoinRequest::set_allocated_from_pwd(::std::string* from_pwd) {
  if (from_pwd != NULL) {
    
  } else {
    
  }
  from_pwd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from_pwd);
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.SendCoinRequest.from_pwd)
}

// optional string to_address = 5;
inline void SendCoinRequest::clear_to_address() {
  to_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SendCoinRequest::to_address() const {
  // @@protoc_insertion_point(field_get:FrontEngine.SendCoinRequest.to_address)
  return to_address_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SendCoinRequest::set_to_address(const ::std::string& value) {
  
  to_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FrontEngine.SendCoinRequest.to_address)
}
inline void SendCoinRequest::set_to_address(const char* value) {
  
  to_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FrontEngine.SendCoinRequest.to_address)
}
inline void SendCoinRequest::set_to_address(const char* value, size_t size) {
  
  to_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FrontEngine.SendCoinRequest.to_address)
}
inline ::std::string* SendCoinRequest::mutable_to_address() {
  
  // @@protoc_insertion_point(field_mutable:FrontEngine.SendCoinRequest.to_address)
  return to_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SendCoinRequest::release_to_address() {
  
  return to_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SendCoinRequest::set_allocated_to_address(::std::string* to_address) {
  if (to_address != NULL) {
    
  } else {
    
  }
  to_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), to_address);
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.SendCoinRequest.to_address)
}

// optional string description = 6;
inline void SendCoinRequest::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SendCoinRequest::description() const {
  // @@protoc_insertion_point(field_get:FrontEngine.SendCoinRequest.description)
  return description_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SendCoinRequest::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FrontEngine.SendCoinRequest.description)
}
inline void SendCoinRequest::set_description(const char* value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FrontEngine.SendCoinRequest.description)
}
inline void SendCoinRequest::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FrontEngine.SendCoinRequest.description)
}
inline ::std::string* SendCoinRequest::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:FrontEngine.SendCoinRequest.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SendCoinRequest::release_description() {
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SendCoinRequest::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.SendCoinRequest.description)
}

// optional string amount = 7;
inline void SendCoinRequest::clear_amount() {
  amount_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SendCoinRequest::amount() const {
  // @@protoc_insertion_point(field_get:FrontEngine.SendCoinRequest.amount)
  return amount_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SendCoinRequest::set_amount(const ::std::string& value) {
  
  amount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FrontEngine.SendCoinRequest.amount)
}
inline void SendCoinRequest::set_amount(const char* value) {
  
  amount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FrontEngine.SendCoinRequest.amount)
}
inline void SendCoinRequest::set_amount(const char* value, size_t size) {
  
  amount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FrontEngine.SendCoinRequest.amount)
}
inline ::std::string* SendCoinRequest::mutable_amount() {
  
  // @@protoc_insertion_point(field_mutable:FrontEngine.SendCoinRequest.amount)
  return amount_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SendCoinRequest::release_amount() {
  
  return amount_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SendCoinRequest::set_allocated_amount(::std::string* amount) {
  if (amount != NULL) {
    
  } else {
    
  }
  amount_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), amount);
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.SendCoinRequest.amount)
}

// optional .FrontEngine.Order order = 8;
inline bool SendCoinRequest::has_order() const {
  return !_is_default_instance_ && order_ != NULL;
}
inline void SendCoinRequest::clear_order() {
  if (GetArenaNoVirtual() == NULL && order_ != NULL) delete order_;
  order_ = NULL;
}
inline const ::FrontEngine::Order& SendCoinRequest::order() const {
  // @@protoc_insertion_point(field_get:FrontEngine.SendCoinRequest.order)
  return order_ != NULL ? *order_ : *default_instance_->order_;
}
inline ::FrontEngine::Order* SendCoinRequest::mutable_order() {
  
  if (order_ == NULL) {
    order_ = new ::FrontEngine::Order;
  }
  // @@protoc_insertion_point(field_mutable:FrontEngine.SendCoinRequest.order)
  return order_;
}
inline ::FrontEngine::Order* SendCoinRequest::release_order() {
  
  ::FrontEngine::Order* temp = order_;
  order_ = NULL;
  return temp;
}
inline void SendCoinRequest::set_allocated_order(::FrontEngine::Order* order) {
  delete order_;
  order_ = order;
  if (order) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.SendCoinRequest.order)
}

// -------------------------------------------------------------------

// RecieveCoinRequest

// optional string request_id = 1;
inline void RecieveCoinRequest::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RecieveCoinRequest::request_id() const {
  // @@protoc_insertion_point(field_get:FrontEngine.RecieveCoinRequest.request_id)
  return request_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RecieveCoinRequest::set_request_id(const ::std::string& value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FrontEngine.RecieveCoinRequest.request_id)
}
inline void RecieveCoinRequest::set_request_id(const char* value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FrontEngine.RecieveCoinRequest.request_id)
}
inline void RecieveCoinRequest::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FrontEngine.RecieveCoinRequest.request_id)
}
inline ::std::string* RecieveCoinRequest::mutable_request_id() {
  
  // @@protoc_insertion_point(field_mutable:FrontEngine.RecieveCoinRequest.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RecieveCoinRequest::release_request_id() {
  
  return request_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RecieveCoinRequest::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.RecieveCoinRequest.request_id)
}

// optional .FrontEngine.enums.CoinType coin_type = 2;
inline void RecieveCoinRequest::clear_coin_type() {
  coin_type_ = 0;
}
inline ::FrontEngine::enums_CoinType RecieveCoinRequest::coin_type() const {
  // @@protoc_insertion_point(field_get:FrontEngine.RecieveCoinRequest.coin_type)
  return static_cast< ::FrontEngine::enums_CoinType >(coin_type_);
}
inline void RecieveCoinRequest::set_coin_type(::FrontEngine::enums_CoinType value) {
  
  coin_type_ = value;
  // @@protoc_insertion_point(field_set:FrontEngine.RecieveCoinRequest.coin_type)
}

// optional string from_address = 3;
inline void RecieveCoinRequest::clear_from_address() {
  from_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RecieveCoinRequest::from_address() const {
  // @@protoc_insertion_point(field_get:FrontEngine.RecieveCoinRequest.from_address)
  return from_address_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RecieveCoinRequest::set_from_address(const ::std::string& value) {
  
  from_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FrontEngine.RecieveCoinRequest.from_address)
}
inline void RecieveCoinRequest::set_from_address(const char* value) {
  
  from_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FrontEngine.RecieveCoinRequest.from_address)
}
inline void RecieveCoinRequest::set_from_address(const char* value, size_t size) {
  
  from_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FrontEngine.RecieveCoinRequest.from_address)
}
inline ::std::string* RecieveCoinRequest::mutable_from_address() {
  
  // @@protoc_insertion_point(field_mutable:FrontEngine.RecieveCoinRequest.from_address)
  return from_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RecieveCoinRequest::release_from_address() {
  
  return from_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RecieveCoinRequest::set_allocated_from_address(::std::string* from_address) {
  if (from_address != NULL) {
    
  } else {
    
  }
  from_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from_address);
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.RecieveCoinRequest.from_address)
}

// optional string from_pwd = 4;
inline void RecieveCoinRequest::clear_from_pwd() {
  from_pwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RecieveCoinRequest::from_pwd() const {
  // @@protoc_insertion_point(field_get:FrontEngine.RecieveCoinRequest.from_pwd)
  return from_pwd_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RecieveCoinRequest::set_from_pwd(const ::std::string& value) {
  
  from_pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FrontEngine.RecieveCoinRequest.from_pwd)
}
inline void RecieveCoinRequest::set_from_pwd(const char* value) {
  
  from_pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FrontEngine.RecieveCoinRequest.from_pwd)
}
inline void RecieveCoinRequest::set_from_pwd(const char* value, size_t size) {
  
  from_pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FrontEngine.RecieveCoinRequest.from_pwd)
}
inline ::std::string* RecieveCoinRequest::mutable_from_pwd() {
  
  // @@protoc_insertion_point(field_mutable:FrontEngine.RecieveCoinRequest.from_pwd)
  return from_pwd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RecieveCoinRequest::release_from_pwd() {
  
  return from_pwd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RecieveCoinRequest::set_allocated_from_pwd(::std::string* from_pwd) {
  if (from_pwd != NULL) {
    
  } else {
    
  }
  from_pwd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from_pwd);
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.RecieveCoinRequest.from_pwd)
}

// optional string to_address = 5;
inline void RecieveCoinRequest::clear_to_address() {
  to_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RecieveCoinRequest::to_address() const {
  // @@protoc_insertion_point(field_get:FrontEngine.RecieveCoinRequest.to_address)
  return to_address_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RecieveCoinRequest::set_to_address(const ::std::string& value) {
  
  to_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FrontEngine.RecieveCoinRequest.to_address)
}
inline void RecieveCoinRequest::set_to_address(const char* value) {
  
  to_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FrontEngine.RecieveCoinRequest.to_address)
}
inline void RecieveCoinRequest::set_to_address(const char* value, size_t size) {
  
  to_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FrontEngine.RecieveCoinRequest.to_address)
}
inline ::std::string* RecieveCoinRequest::mutable_to_address() {
  
  // @@protoc_insertion_point(field_mutable:FrontEngine.RecieveCoinRequest.to_address)
  return to_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RecieveCoinRequest::release_to_address() {
  
  return to_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RecieveCoinRequest::set_allocated_to_address(::std::string* to_address) {
  if (to_address != NULL) {
    
  } else {
    
  }
  to_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), to_address);
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.RecieveCoinRequest.to_address)
}

// optional string description = 6;
inline void RecieveCoinRequest::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RecieveCoinRequest::description() const {
  // @@protoc_insertion_point(field_get:FrontEngine.RecieveCoinRequest.description)
  return description_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RecieveCoinRequest::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FrontEngine.RecieveCoinRequest.description)
}
inline void RecieveCoinRequest::set_description(const char* value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FrontEngine.RecieveCoinRequest.description)
}
inline void RecieveCoinRequest::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FrontEngine.RecieveCoinRequest.description)
}
inline ::std::string* RecieveCoinRequest::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:FrontEngine.RecieveCoinRequest.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RecieveCoinRequest::release_description() {
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RecieveCoinRequest::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.RecieveCoinRequest.description)
}

// optional string amount = 7;
inline void RecieveCoinRequest::clear_amount() {
  amount_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RecieveCoinRequest::amount() const {
  // @@protoc_insertion_point(field_get:FrontEngine.RecieveCoinRequest.amount)
  return amount_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RecieveCoinRequest::set_amount(const ::std::string& value) {
  
  amount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FrontEngine.RecieveCoinRequest.amount)
}
inline void RecieveCoinRequest::set_amount(const char* value) {
  
  amount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FrontEngine.RecieveCoinRequest.amount)
}
inline void RecieveCoinRequest::set_amount(const char* value, size_t size) {
  
  amount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FrontEngine.RecieveCoinRequest.amount)
}
inline ::std::string* RecieveCoinRequest::mutable_amount() {
  
  // @@protoc_insertion_point(field_mutable:FrontEngine.RecieveCoinRequest.amount)
  return amount_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RecieveCoinRequest::release_amount() {
  
  return amount_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RecieveCoinRequest::set_allocated_amount(::std::string* amount) {
  if (amount != NULL) {
    
  } else {
    
  }
  amount_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), amount);
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.RecieveCoinRequest.amount)
}

// optional .FrontEngine.Order order = 8;
inline bool RecieveCoinRequest::has_order() const {
  return !_is_default_instance_ && order_ != NULL;
}
inline void RecieveCoinRequest::clear_order() {
  if (GetArenaNoVirtual() == NULL && order_ != NULL) delete order_;
  order_ = NULL;
}
inline const ::FrontEngine::Order& RecieveCoinRequest::order() const {
  // @@protoc_insertion_point(field_get:FrontEngine.RecieveCoinRequest.order)
  return order_ != NULL ? *order_ : *default_instance_->order_;
}
inline ::FrontEngine::Order* RecieveCoinRequest::mutable_order() {
  
  if (order_ == NULL) {
    order_ = new ::FrontEngine::Order;
  }
  // @@protoc_insertion_point(field_mutable:FrontEngine.RecieveCoinRequest.order)
  return order_;
}
inline ::FrontEngine::Order* RecieveCoinRequest::release_order() {
  
  ::FrontEngine::Order* temp = order_;
  order_ = NULL;
  return temp;
}
inline void RecieveCoinRequest::set_allocated_order(::FrontEngine::Order* order) {
  delete order_;
  order_ = order;
  if (order) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.RecieveCoinRequest.order)
}

// -------------------------------------------------------------------

// TradedCallBack

// optional string request_id = 1;
inline void TradedCallBack::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TradedCallBack::request_id() const {
  // @@protoc_insertion_point(field_get:FrontEngine.TradedCallBack.request_id)
  return request_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TradedCallBack::set_request_id(const ::std::string& value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FrontEngine.TradedCallBack.request_id)
}
inline void TradedCallBack::set_request_id(const char* value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FrontEngine.TradedCallBack.request_id)
}
inline void TradedCallBack::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FrontEngine.TradedCallBack.request_id)
}
inline ::std::string* TradedCallBack::mutable_request_id() {
  
  // @@protoc_insertion_point(field_mutable:FrontEngine.TradedCallBack.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TradedCallBack::release_request_id() {
  
  return request_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TradedCallBack::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.TradedCallBack.request_id)
}

// optional .FrontEngine.Order order = 2;
inline bool TradedCallBack::has_order() const {
  return !_is_default_instance_ && order_ != NULL;
}
inline void TradedCallBack::clear_order() {
  if (GetArenaNoVirtual() == NULL && order_ != NULL) delete order_;
  order_ = NULL;
}
inline const ::FrontEngine::Order& TradedCallBack::order() const {
  // @@protoc_insertion_point(field_get:FrontEngine.TradedCallBack.order)
  return order_ != NULL ? *order_ : *default_instance_->order_;
}
inline ::FrontEngine::Order* TradedCallBack::mutable_order() {
  
  if (order_ == NULL) {
    order_ = new ::FrontEngine::Order;
  }
  // @@protoc_insertion_point(field_mutable:FrontEngine.TradedCallBack.order)
  return order_;
}
inline ::FrontEngine::Order* TradedCallBack::release_order() {
  
  ::FrontEngine::Order* temp = order_;
  order_ = NULL;
  return temp;
}
inline void TradedCallBack::set_allocated_order(::FrontEngine::Order* order) {
  delete order_;
  order_ = order;
  if (order) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.TradedCallBack.order)
}

// optional int32 errorCode = 3;
inline void TradedCallBack::clear_errorcode() {
  errorcode_ = 0;
}
inline ::google::protobuf::int32 TradedCallBack::errorcode() const {
  // @@protoc_insertion_point(field_get:FrontEngine.TradedCallBack.errorCode)
  return errorcode_;
}
inline void TradedCallBack::set_errorcode(::google::protobuf::int32 value) {
  
  errorcode_ = value;
  // @@protoc_insertion_point(field_set:FrontEngine.TradedCallBack.errorCode)
}

// optional string error = 4;
inline void TradedCallBack::clear_error() {
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TradedCallBack::error() const {
  // @@protoc_insertion_point(field_get:FrontEngine.TradedCallBack.error)
  return error_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TradedCallBack::set_error(const ::std::string& value) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FrontEngine.TradedCallBack.error)
}
inline void TradedCallBack::set_error(const char* value) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FrontEngine.TradedCallBack.error)
}
inline void TradedCallBack::set_error(const char* value, size_t size) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FrontEngine.TradedCallBack.error)
}
inline ::std::string* TradedCallBack::mutable_error() {
  
  // @@protoc_insertion_point(field_mutable:FrontEngine.TradedCallBack.error)
  return error_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TradedCallBack::release_error() {
  
  return error_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TradedCallBack::set_allocated_error(::std::string* error) {
  if (error != NULL) {
    
  } else {
    
  }
  error_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error);
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.TradedCallBack.error)
}

// -------------------------------------------------------------------

// CanceledCallBack

// optional string request_id = 1;
inline void CanceledCallBack::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CanceledCallBack::request_id() const {
  // @@protoc_insertion_point(field_get:FrontEngine.CanceledCallBack.request_id)
  return request_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CanceledCallBack::set_request_id(const ::std::string& value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FrontEngine.CanceledCallBack.request_id)
}
inline void CanceledCallBack::set_request_id(const char* value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FrontEngine.CanceledCallBack.request_id)
}
inline void CanceledCallBack::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FrontEngine.CanceledCallBack.request_id)
}
inline ::std::string* CanceledCallBack::mutable_request_id() {
  
  // @@protoc_insertion_point(field_mutable:FrontEngine.CanceledCallBack.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CanceledCallBack::release_request_id() {
  
  return request_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CanceledCallBack::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.CanceledCallBack.request_id)
}

// optional .FrontEngine.Order order = 2;
inline bool CanceledCallBack::has_order() const {
  return !_is_default_instance_ && order_ != NULL;
}
inline void CanceledCallBack::clear_order() {
  if (GetArenaNoVirtual() == NULL && order_ != NULL) delete order_;
  order_ = NULL;
}
inline const ::FrontEngine::Order& CanceledCallBack::order() const {
  // @@protoc_insertion_point(field_get:FrontEngine.CanceledCallBack.order)
  return order_ != NULL ? *order_ : *default_instance_->order_;
}
inline ::FrontEngine::Order* CanceledCallBack::mutable_order() {
  
  if (order_ == NULL) {
    order_ = new ::FrontEngine::Order;
  }
  // @@protoc_insertion_point(field_mutable:FrontEngine.CanceledCallBack.order)
  return order_;
}
inline ::FrontEngine::Order* CanceledCallBack::release_order() {
  
  ::FrontEngine::Order* temp = order_;
  order_ = NULL;
  return temp;
}
inline void CanceledCallBack::set_allocated_order(::FrontEngine::Order* order) {
  delete order_;
  order_ = order;
  if (order) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.CanceledCallBack.order)
}

// optional int32 errorCode = 3;
inline void CanceledCallBack::clear_errorcode() {
  errorcode_ = 0;
}
inline ::google::protobuf::int32 CanceledCallBack::errorcode() const {
  // @@protoc_insertion_point(field_get:FrontEngine.CanceledCallBack.errorCode)
  return errorcode_;
}
inline void CanceledCallBack::set_errorcode(::google::protobuf::int32 value) {
  
  errorcode_ = value;
  // @@protoc_insertion_point(field_set:FrontEngine.CanceledCallBack.errorCode)
}

// optional string error = 4;
inline void CanceledCallBack::clear_error() {
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CanceledCallBack::error() const {
  // @@protoc_insertion_point(field_get:FrontEngine.CanceledCallBack.error)
  return error_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CanceledCallBack::set_error(const ::std::string& value) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FrontEngine.CanceledCallBack.error)
}
inline void CanceledCallBack::set_error(const char* value) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FrontEngine.CanceledCallBack.error)
}
inline void CanceledCallBack::set_error(const char* value, size_t size) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FrontEngine.CanceledCallBack.error)
}
inline ::std::string* CanceledCallBack::mutable_error() {
  
  // @@protoc_insertion_point(field_mutable:FrontEngine.CanceledCallBack.error)
  return error_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CanceledCallBack::release_error() {
  
  return error_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CanceledCallBack::set_allocated_error(::std::string* error) {
  if (error != NULL) {
    
  } else {
    
  }
  error_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error);
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.CanceledCallBack.error)
}

// -------------------------------------------------------------------

// RejectedCallBack

// optional string request_id = 1;
inline void RejectedCallBack::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RejectedCallBack::request_id() const {
  // @@protoc_insertion_point(field_get:FrontEngine.RejectedCallBack.request_id)
  return request_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RejectedCallBack::set_request_id(const ::std::string& value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FrontEngine.RejectedCallBack.request_id)
}
inline void RejectedCallBack::set_request_id(const char* value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FrontEngine.RejectedCallBack.request_id)
}
inline void RejectedCallBack::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FrontEngine.RejectedCallBack.request_id)
}
inline ::std::string* RejectedCallBack::mutable_request_id() {
  
  // @@protoc_insertion_point(field_mutable:FrontEngine.RejectedCallBack.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RejectedCallBack::release_request_id() {
  
  return request_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RejectedCallBack::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.RejectedCallBack.request_id)
}

// optional .FrontEngine.Order order = 2;
inline bool RejectedCallBack::has_order() const {
  return !_is_default_instance_ && order_ != NULL;
}
inline void RejectedCallBack::clear_order() {
  if (GetArenaNoVirtual() == NULL && order_ != NULL) delete order_;
  order_ = NULL;
}
inline const ::FrontEngine::Order& RejectedCallBack::order() const {
  // @@protoc_insertion_point(field_get:FrontEngine.RejectedCallBack.order)
  return order_ != NULL ? *order_ : *default_instance_->order_;
}
inline ::FrontEngine::Order* RejectedCallBack::mutable_order() {
  
  if (order_ == NULL) {
    order_ = new ::FrontEngine::Order;
  }
  // @@protoc_insertion_point(field_mutable:FrontEngine.RejectedCallBack.order)
  return order_;
}
inline ::FrontEngine::Order* RejectedCallBack::release_order() {
  
  ::FrontEngine::Order* temp = order_;
  order_ = NULL;
  return temp;
}
inline void RejectedCallBack::set_allocated_order(::FrontEngine::Order* order) {
  delete order_;
  order_ = order;
  if (order) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.RejectedCallBack.order)
}

// optional int32 errorCode = 3;
inline void RejectedCallBack::clear_errorcode() {
  errorcode_ = 0;
}
inline ::google::protobuf::int32 RejectedCallBack::errorcode() const {
  // @@protoc_insertion_point(field_get:FrontEngine.RejectedCallBack.errorCode)
  return errorcode_;
}
inline void RejectedCallBack::set_errorcode(::google::protobuf::int32 value) {
  
  errorcode_ = value;
  // @@protoc_insertion_point(field_set:FrontEngine.RejectedCallBack.errorCode)
}

// optional string error = 4;
inline void RejectedCallBack::clear_error() {
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RejectedCallBack::error() const {
  // @@protoc_insertion_point(field_get:FrontEngine.RejectedCallBack.error)
  return error_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RejectedCallBack::set_error(const ::std::string& value) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FrontEngine.RejectedCallBack.error)
}
inline void RejectedCallBack::set_error(const char* value) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FrontEngine.RejectedCallBack.error)
}
inline void RejectedCallBack::set_error(const char* value, size_t size) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FrontEngine.RejectedCallBack.error)
}
inline ::std::string* RejectedCallBack::mutable_error() {
  
  // @@protoc_insertion_point(field_mutable:FrontEngine.RejectedCallBack.error)
  return error_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RejectedCallBack::release_error() {
  
  return error_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RejectedCallBack::set_allocated_error(::std::string* error) {
  if (error != NULL) {
    
  } else {
    
  }
  error_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error);
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.RejectedCallBack.error)
}

// -------------------------------------------------------------------

// RequestMessage

// optional string request_id = 1;
inline void RequestMessage::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RequestMessage::request_id() const {
  // @@protoc_insertion_point(field_get:FrontEngine.RequestMessage.request_id)
  return request_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RequestMessage::set_request_id(const ::std::string& value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FrontEngine.RequestMessage.request_id)
}
inline void RequestMessage::set_request_id(const char* value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FrontEngine.RequestMessage.request_id)
}
inline void RequestMessage::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FrontEngine.RequestMessage.request_id)
}
inline ::std::string* RequestMessage::mutable_request_id() {
  
  // @@protoc_insertion_point(field_mutable:FrontEngine.RequestMessage.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RequestMessage::release_request_id() {
  
  return request_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RequestMessage::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.RequestMessage.request_id)
}

// optional string client_id = 2;
inline void RequestMessage::clear_client_id() {
  client_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RequestMessage::client_id() const {
  // @@protoc_insertion_point(field_get:FrontEngine.RequestMessage.client_id)
  return client_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RequestMessage::set_client_id(const ::std::string& value) {
  
  client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FrontEngine.RequestMessage.client_id)
}
inline void RequestMessage::set_client_id(const char* value) {
  
  client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FrontEngine.RequestMessage.client_id)
}
inline void RequestMessage::set_client_id(const char* value, size_t size) {
  
  client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FrontEngine.RequestMessage.client_id)
}
inline ::std::string* RequestMessage::mutable_client_id() {
  
  // @@protoc_insertion_point(field_mutable:FrontEngine.RequestMessage.client_id)
  return client_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RequestMessage::release_client_id() {
  
  return client_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RequestMessage::set_allocated_client_id(::std::string* client_id) {
  if (client_id != NULL) {
    
  } else {
    
  }
  client_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_id);
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.RequestMessage.client_id)
}

// optional string front_id = 3;
inline void RequestMessage::clear_front_id() {
  front_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RequestMessage::front_id() const {
  // @@protoc_insertion_point(field_get:FrontEngine.RequestMessage.front_id)
  return front_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RequestMessage::set_front_id(const ::std::string& value) {
  
  front_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FrontEngine.RequestMessage.front_id)
}
inline void RequestMessage::set_front_id(const char* value) {
  
  front_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FrontEngine.RequestMessage.front_id)
}
inline void RequestMessage::set_front_id(const char* value, size_t size) {
  
  front_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FrontEngine.RequestMessage.front_id)
}
inline ::std::string* RequestMessage::mutable_front_id() {
  
  // @@protoc_insertion_point(field_mutable:FrontEngine.RequestMessage.front_id)
  return front_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RequestMessage::release_front_id() {
  
  return front_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RequestMessage::set_allocated_front_id(::std::string* front_id) {
  if (front_id != NULL) {
    
  } else {
    
  }
  front_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), front_id);
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.RequestMessage.front_id)
}

// optional string md5 = 4;
inline void RequestMessage::clear_md5() {
  md5_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RequestMessage::md5() const {
  // @@protoc_insertion_point(field_get:FrontEngine.RequestMessage.md5)
  return md5_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RequestMessage::set_md5(const ::std::string& value) {
  
  md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FrontEngine.RequestMessage.md5)
}
inline void RequestMessage::set_md5(const char* value) {
  
  md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FrontEngine.RequestMessage.md5)
}
inline void RequestMessage::set_md5(const char* value, size_t size) {
  
  md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FrontEngine.RequestMessage.md5)
}
inline ::std::string* RequestMessage::mutable_md5() {
  
  // @@protoc_insertion_point(field_mutable:FrontEngine.RequestMessage.md5)
  return md5_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RequestMessage::release_md5() {
  
  return md5_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RequestMessage::set_allocated_md5(::std::string* md5) {
  if (md5 != NULL) {
    
  } else {
    
  }
  md5_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), md5);
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.RequestMessage.md5)
}

// optional .FrontEngine.enums.RequestType type = 5;
inline void RequestMessage::clear_type() {
  type_ = 0;
}
inline ::FrontEngine::enums_RequestType RequestMessage::type() const {
  // @@protoc_insertion_point(field_get:FrontEngine.RequestMessage.type)
  return static_cast< ::FrontEngine::enums_RequestType >(type_);
}
inline void RequestMessage::set_type(::FrontEngine::enums_RequestType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:FrontEngine.RequestMessage.type)
}

// optional .FrontEngine.CreateAccountRequest account = 6;
inline bool RequestMessage::has_account() const {
  return !_is_default_instance_ && account_ != NULL;
}
inline void RequestMessage::clear_account() {
  if (GetArenaNoVirtual() == NULL && account_ != NULL) delete account_;
  account_ = NULL;
}
inline const ::FrontEngine::CreateAccountRequest& RequestMessage::account() const {
  // @@protoc_insertion_point(field_get:FrontEngine.RequestMessage.account)
  return account_ != NULL ? *account_ : *default_instance_->account_;
}
inline ::FrontEngine::CreateAccountRequest* RequestMessage::mutable_account() {
  
  if (account_ == NULL) {
    account_ = new ::FrontEngine::CreateAccountRequest;
  }
  // @@protoc_insertion_point(field_mutable:FrontEngine.RequestMessage.account)
  return account_;
}
inline ::FrontEngine::CreateAccountRequest* RequestMessage::release_account() {
  
  ::FrontEngine::CreateAccountRequest* temp = account_;
  account_ = NULL;
  return temp;
}
inline void RequestMessage::set_allocated_account(::FrontEngine::CreateAccountRequest* account) {
  delete account_;
  account_ = account;
  if (account) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.RequestMessage.account)
}

// optional .FrontEngine.QueryBalanceRequest balance = 7;
inline bool RequestMessage::has_balance() const {
  return !_is_default_instance_ && balance_ != NULL;
}
inline void RequestMessage::clear_balance() {
  if (GetArenaNoVirtual() == NULL && balance_ != NULL) delete balance_;
  balance_ = NULL;
}
inline const ::FrontEngine::QueryBalanceRequest& RequestMessage::balance() const {
  // @@protoc_insertion_point(field_get:FrontEngine.RequestMessage.balance)
  return balance_ != NULL ? *balance_ : *default_instance_->balance_;
}
inline ::FrontEngine::QueryBalanceRequest* RequestMessage::mutable_balance() {
  
  if (balance_ == NULL) {
    balance_ = new ::FrontEngine::QueryBalanceRequest;
  }
  // @@protoc_insertion_point(field_mutable:FrontEngine.RequestMessage.balance)
  return balance_;
}
inline ::FrontEngine::QueryBalanceRequest* RequestMessage::release_balance() {
  
  ::FrontEngine::QueryBalanceRequest* temp = balance_;
  balance_ = NULL;
  return temp;
}
inline void RequestMessage::set_allocated_balance(::FrontEngine::QueryBalanceRequest* balance) {
  delete balance_;
  balance_ = balance;
  if (balance) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.RequestMessage.balance)
}

// optional .FrontEngine.QueryFeeRequest fee = 8;
inline bool RequestMessage::has_fee() const {
  return !_is_default_instance_ && fee_ != NULL;
}
inline void RequestMessage::clear_fee() {
  if (GetArenaNoVirtual() == NULL && fee_ != NULL) delete fee_;
  fee_ = NULL;
}
inline const ::FrontEngine::QueryFeeRequest& RequestMessage::fee() const {
  // @@protoc_insertion_point(field_get:FrontEngine.RequestMessage.fee)
  return fee_ != NULL ? *fee_ : *default_instance_->fee_;
}
inline ::FrontEngine::QueryFeeRequest* RequestMessage::mutable_fee() {
  
  if (fee_ == NULL) {
    fee_ = new ::FrontEngine::QueryFeeRequest;
  }
  // @@protoc_insertion_point(field_mutable:FrontEngine.RequestMessage.fee)
  return fee_;
}
inline ::FrontEngine::QueryFeeRequest* RequestMessage::release_fee() {
  
  ::FrontEngine::QueryFeeRequest* temp = fee_;
  fee_ = NULL;
  return temp;
}
inline void RequestMessage::set_allocated_fee(::FrontEngine::QueryFeeRequest* fee) {
  delete fee_;
  fee_ = fee;
  if (fee) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.RequestMessage.fee)
}

// optional .FrontEngine.QueryOrderRequest order = 9;
inline bool RequestMessage::has_order() const {
  return !_is_default_instance_ && order_ != NULL;
}
inline void RequestMessage::clear_order() {
  if (GetArenaNoVirtual() == NULL && order_ != NULL) delete order_;
  order_ = NULL;
}
inline const ::FrontEngine::QueryOrderRequest& RequestMessage::order() const {
  // @@protoc_insertion_point(field_get:FrontEngine.RequestMessage.order)
  return order_ != NULL ? *order_ : *default_instance_->order_;
}
inline ::FrontEngine::QueryOrderRequest* RequestMessage::mutable_order() {
  
  if (order_ == NULL) {
    order_ = new ::FrontEngine::QueryOrderRequest;
  }
  // @@protoc_insertion_point(field_mutable:FrontEngine.RequestMessage.order)
  return order_;
}
inline ::FrontEngine::QueryOrderRequest* RequestMessage::release_order() {
  
  ::FrontEngine::QueryOrderRequest* temp = order_;
  order_ = NULL;
  return temp;
}
inline void RequestMessage::set_allocated_order(::FrontEngine::QueryOrderRequest* order) {
  delete order_;
  order_ = order;
  if (order) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.RequestMessage.order)
}

// optional .FrontEngine.QueryOrdersRequest orders = 10;
inline bool RequestMessage::has_orders() const {
  return !_is_default_instance_ && orders_ != NULL;
}
inline void RequestMessage::clear_orders() {
  if (GetArenaNoVirtual() == NULL && orders_ != NULL) delete orders_;
  orders_ = NULL;
}
inline const ::FrontEngine::QueryOrdersRequest& RequestMessage::orders() const {
  // @@protoc_insertion_point(field_get:FrontEngine.RequestMessage.orders)
  return orders_ != NULL ? *orders_ : *default_instance_->orders_;
}
inline ::FrontEngine::QueryOrdersRequest* RequestMessage::mutable_orders() {
  
  if (orders_ == NULL) {
    orders_ = new ::FrontEngine::QueryOrdersRequest;
  }
  // @@protoc_insertion_point(field_mutable:FrontEngine.RequestMessage.orders)
  return orders_;
}
inline ::FrontEngine::QueryOrdersRequest* RequestMessage::release_orders() {
  
  ::FrontEngine::QueryOrdersRequest* temp = orders_;
  orders_ = NULL;
  return temp;
}
inline void RequestMessage::set_allocated_orders(::FrontEngine::QueryOrdersRequest* orders) {
  delete orders_;
  orders_ = orders;
  if (orders) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.RequestMessage.orders)
}

// optional .FrontEngine.SendCoinRequest send_info = 11;
inline bool RequestMessage::has_send_info() const {
  return !_is_default_instance_ && send_info_ != NULL;
}
inline void RequestMessage::clear_send_info() {
  if (GetArenaNoVirtual() == NULL && send_info_ != NULL) delete send_info_;
  send_info_ = NULL;
}
inline const ::FrontEngine::SendCoinRequest& RequestMessage::send_info() const {
  // @@protoc_insertion_point(field_get:FrontEngine.RequestMessage.send_info)
  return send_info_ != NULL ? *send_info_ : *default_instance_->send_info_;
}
inline ::FrontEngine::SendCoinRequest* RequestMessage::mutable_send_info() {
  
  if (send_info_ == NULL) {
    send_info_ = new ::FrontEngine::SendCoinRequest;
  }
  // @@protoc_insertion_point(field_mutable:FrontEngine.RequestMessage.send_info)
  return send_info_;
}
inline ::FrontEngine::SendCoinRequest* RequestMessage::release_send_info() {
  
  ::FrontEngine::SendCoinRequest* temp = send_info_;
  send_info_ = NULL;
  return temp;
}
inline void RequestMessage::set_allocated_send_info(::FrontEngine::SendCoinRequest* send_info) {
  delete send_info_;
  send_info_ = send_info;
  if (send_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.RequestMessage.send_info)
}

// optional .FrontEngine.RecieveCoinRequest recieve_info = 12;
inline bool RequestMessage::has_recieve_info() const {
  return !_is_default_instance_ && recieve_info_ != NULL;
}
inline void RequestMessage::clear_recieve_info() {
  if (GetArenaNoVirtual() == NULL && recieve_info_ != NULL) delete recieve_info_;
  recieve_info_ = NULL;
}
inline const ::FrontEngine::RecieveCoinRequest& RequestMessage::recieve_info() const {
  // @@protoc_insertion_point(field_get:FrontEngine.RequestMessage.recieve_info)
  return recieve_info_ != NULL ? *recieve_info_ : *default_instance_->recieve_info_;
}
inline ::FrontEngine::RecieveCoinRequest* RequestMessage::mutable_recieve_info() {
  
  if (recieve_info_ == NULL) {
    recieve_info_ = new ::FrontEngine::RecieveCoinRequest;
  }
  // @@protoc_insertion_point(field_mutable:FrontEngine.RequestMessage.recieve_info)
  return recieve_info_;
}
inline ::FrontEngine::RecieveCoinRequest* RequestMessage::release_recieve_info() {
  
  ::FrontEngine::RecieveCoinRequest* temp = recieve_info_;
  recieve_info_ = NULL;
  return temp;
}
inline void RequestMessage::set_allocated_recieve_info(::FrontEngine::RecieveCoinRequest* recieve_info) {
  delete recieve_info_;
  recieve_info_ = recieve_info;
  if (recieve_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.RequestMessage.recieve_info)
}

// optional .FrontEngine.HeartBeatRequest heart_beat = 13;
inline bool RequestMessage::has_heart_beat() const {
  return !_is_default_instance_ && heart_beat_ != NULL;
}
inline void RequestMessage::clear_heart_beat() {
  if (GetArenaNoVirtual() == NULL && heart_beat_ != NULL) delete heart_beat_;
  heart_beat_ = NULL;
}
inline const ::FrontEngine::HeartBeatRequest& RequestMessage::heart_beat() const {
  // @@protoc_insertion_point(field_get:FrontEngine.RequestMessage.heart_beat)
  return heart_beat_ != NULL ? *heart_beat_ : *default_instance_->heart_beat_;
}
inline ::FrontEngine::HeartBeatRequest* RequestMessage::mutable_heart_beat() {
  
  if (heart_beat_ == NULL) {
    heart_beat_ = new ::FrontEngine::HeartBeatRequest;
  }
  // @@protoc_insertion_point(field_mutable:FrontEngine.RequestMessage.heart_beat)
  return heart_beat_;
}
inline ::FrontEngine::HeartBeatRequest* RequestMessage::release_heart_beat() {
  
  ::FrontEngine::HeartBeatRequest* temp = heart_beat_;
  heart_beat_ = NULL;
  return temp;
}
inline void RequestMessage::set_allocated_heart_beat(::FrontEngine::HeartBeatRequest* heart_beat) {
  delete heart_beat_;
  heart_beat_ = heart_beat;
  if (heart_beat) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.RequestMessage.heart_beat)
}

// optional .FrontEngine.CheckAppId app_id = 14;
inline bool RequestMessage::has_app_id() const {
  return !_is_default_instance_ && app_id_ != NULL;
}
inline void RequestMessage::clear_app_id() {
  if (GetArenaNoVirtual() == NULL && app_id_ != NULL) delete app_id_;
  app_id_ = NULL;
}
inline const ::FrontEngine::CheckAppId& RequestMessage::app_id() const {
  // @@protoc_insertion_point(field_get:FrontEngine.RequestMessage.app_id)
  return app_id_ != NULL ? *app_id_ : *default_instance_->app_id_;
}
inline ::FrontEngine::CheckAppId* RequestMessage::mutable_app_id() {
  
  if (app_id_ == NULL) {
    app_id_ = new ::FrontEngine::CheckAppId;
  }
  // @@protoc_insertion_point(field_mutable:FrontEngine.RequestMessage.app_id)
  return app_id_;
}
inline ::FrontEngine::CheckAppId* RequestMessage::release_app_id() {
  
  ::FrontEngine::CheckAppId* temp = app_id_;
  app_id_ = NULL;
  return temp;
}
inline void RequestMessage::set_allocated_app_id(::FrontEngine::CheckAppId* app_id) {
  delete app_id_;
  app_id_ = app_id;
  if (app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.RequestMessage.app_id)
}

// -------------------------------------------------------------------

// CallBackMessage

// optional string request_id = 1;
inline void CallBackMessage::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CallBackMessage::request_id() const {
  // @@protoc_insertion_point(field_get:FrontEngine.CallBackMessage.request_id)
  return request_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CallBackMessage::set_request_id(const ::std::string& value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FrontEngine.CallBackMessage.request_id)
}
inline void CallBackMessage::set_request_id(const char* value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FrontEngine.CallBackMessage.request_id)
}
inline void CallBackMessage::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FrontEngine.CallBackMessage.request_id)
}
inline ::std::string* CallBackMessage::mutable_request_id() {
  
  // @@protoc_insertion_point(field_mutable:FrontEngine.CallBackMessage.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CallBackMessage::release_request_id() {
  
  return request_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CallBackMessage::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.CallBackMessage.request_id)
}

// optional string client_id = 2;
inline void CallBackMessage::clear_client_id() {
  client_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CallBackMessage::client_id() const {
  // @@protoc_insertion_point(field_get:FrontEngine.CallBackMessage.client_id)
  return client_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CallBackMessage::set_client_id(const ::std::string& value) {
  
  client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FrontEngine.CallBackMessage.client_id)
}
inline void CallBackMessage::set_client_id(const char* value) {
  
  client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FrontEngine.CallBackMessage.client_id)
}
inline void CallBackMessage::set_client_id(const char* value, size_t size) {
  
  client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FrontEngine.CallBackMessage.client_id)
}
inline ::std::string* CallBackMessage::mutable_client_id() {
  
  // @@protoc_insertion_point(field_mutable:FrontEngine.CallBackMessage.client_id)
  return client_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CallBackMessage::release_client_id() {
  
  return client_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CallBackMessage::set_allocated_client_id(::std::string* client_id) {
  if (client_id != NULL) {
    
  } else {
    
  }
  client_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_id);
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.CallBackMessage.client_id)
}

// optional string front_id = 3;
inline void CallBackMessage::clear_front_id() {
  front_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CallBackMessage::front_id() const {
  // @@protoc_insertion_point(field_get:FrontEngine.CallBackMessage.front_id)
  return front_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CallBackMessage::set_front_id(const ::std::string& value) {
  
  front_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FrontEngine.CallBackMessage.front_id)
}
inline void CallBackMessage::set_front_id(const char* value) {
  
  front_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FrontEngine.CallBackMessage.front_id)
}
inline void CallBackMessage::set_front_id(const char* value, size_t size) {
  
  front_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FrontEngine.CallBackMessage.front_id)
}
inline ::std::string* CallBackMessage::mutable_front_id() {
  
  // @@protoc_insertion_point(field_mutable:FrontEngine.CallBackMessage.front_id)
  return front_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CallBackMessage::release_front_id() {
  
  return front_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CallBackMessage::set_allocated_front_id(::std::string* front_id) {
  if (front_id != NULL) {
    
  } else {
    
  }
  front_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), front_id);
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.CallBackMessage.front_id)
}

// optional string md5 = 4;
inline void CallBackMessage::clear_md5() {
  md5_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CallBackMessage::md5() const {
  // @@protoc_insertion_point(field_get:FrontEngine.CallBackMessage.md5)
  return md5_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CallBackMessage::set_md5(const ::std::string& value) {
  
  md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FrontEngine.CallBackMessage.md5)
}
inline void CallBackMessage::set_md5(const char* value) {
  
  md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FrontEngine.CallBackMessage.md5)
}
inline void CallBackMessage::set_md5(const char* value, size_t size) {
  
  md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FrontEngine.CallBackMessage.md5)
}
inline ::std::string* CallBackMessage::mutable_md5() {
  
  // @@protoc_insertion_point(field_mutable:FrontEngine.CallBackMessage.md5)
  return md5_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CallBackMessage::release_md5() {
  
  return md5_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CallBackMessage::set_allocated_md5(::std::string* md5) {
  if (md5 != NULL) {
    
  } else {
    
  }
  md5_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), md5);
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.CallBackMessage.md5)
}

// optional .FrontEngine.enums.CallBackType type = 5;
inline void CallBackMessage::clear_type() {
  type_ = 0;
}
inline ::FrontEngine::enums_CallBackType CallBackMessage::type() const {
  // @@protoc_insertion_point(field_get:FrontEngine.CallBackMessage.type)
  return static_cast< ::FrontEngine::enums_CallBackType >(type_);
}
inline void CallBackMessage::set_type(::FrontEngine::enums_CallBackType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:FrontEngine.CallBackMessage.type)
}

// optional .FrontEngine.CreateAccountCallBack account = 6;
inline bool CallBackMessage::has_account() const {
  return !_is_default_instance_ && account_ != NULL;
}
inline void CallBackMessage::clear_account() {
  if (GetArenaNoVirtual() == NULL && account_ != NULL) delete account_;
  account_ = NULL;
}
inline const ::FrontEngine::CreateAccountCallBack& CallBackMessage::account() const {
  // @@protoc_insertion_point(field_get:FrontEngine.CallBackMessage.account)
  return account_ != NULL ? *account_ : *default_instance_->account_;
}
inline ::FrontEngine::CreateAccountCallBack* CallBackMessage::mutable_account() {
  
  if (account_ == NULL) {
    account_ = new ::FrontEngine::CreateAccountCallBack;
  }
  // @@protoc_insertion_point(field_mutable:FrontEngine.CallBackMessage.account)
  return account_;
}
inline ::FrontEngine::CreateAccountCallBack* CallBackMessage::release_account() {
  
  ::FrontEngine::CreateAccountCallBack* temp = account_;
  account_ = NULL;
  return temp;
}
inline void CallBackMessage::set_allocated_account(::FrontEngine::CreateAccountCallBack* account) {
  delete account_;
  account_ = account;
  if (account) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.CallBackMessage.account)
}

// optional .FrontEngine.QueryBalanceCallBack balance = 7;
inline bool CallBackMessage::has_balance() const {
  return !_is_default_instance_ && balance_ != NULL;
}
inline void CallBackMessage::clear_balance() {
  if (GetArenaNoVirtual() == NULL && balance_ != NULL) delete balance_;
  balance_ = NULL;
}
inline const ::FrontEngine::QueryBalanceCallBack& CallBackMessage::balance() const {
  // @@protoc_insertion_point(field_get:FrontEngine.CallBackMessage.balance)
  return balance_ != NULL ? *balance_ : *default_instance_->balance_;
}
inline ::FrontEngine::QueryBalanceCallBack* CallBackMessage::mutable_balance() {
  
  if (balance_ == NULL) {
    balance_ = new ::FrontEngine::QueryBalanceCallBack;
  }
  // @@protoc_insertion_point(field_mutable:FrontEngine.CallBackMessage.balance)
  return balance_;
}
inline ::FrontEngine::QueryBalanceCallBack* CallBackMessage::release_balance() {
  
  ::FrontEngine::QueryBalanceCallBack* temp = balance_;
  balance_ = NULL;
  return temp;
}
inline void CallBackMessage::set_allocated_balance(::FrontEngine::QueryBalanceCallBack* balance) {
  delete balance_;
  balance_ = balance;
  if (balance) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.CallBackMessage.balance)
}

// optional .FrontEngine.QueryFeeCallBack fee = 8;
inline bool CallBackMessage::has_fee() const {
  return !_is_default_instance_ && fee_ != NULL;
}
inline void CallBackMessage::clear_fee() {
  if (GetArenaNoVirtual() == NULL && fee_ != NULL) delete fee_;
  fee_ = NULL;
}
inline const ::FrontEngine::QueryFeeCallBack& CallBackMessage::fee() const {
  // @@protoc_insertion_point(field_get:FrontEngine.CallBackMessage.fee)
  return fee_ != NULL ? *fee_ : *default_instance_->fee_;
}
inline ::FrontEngine::QueryFeeCallBack* CallBackMessage::mutable_fee() {
  
  if (fee_ == NULL) {
    fee_ = new ::FrontEngine::QueryFeeCallBack;
  }
  // @@protoc_insertion_point(field_mutable:FrontEngine.CallBackMessage.fee)
  return fee_;
}
inline ::FrontEngine::QueryFeeCallBack* CallBackMessage::release_fee() {
  
  ::FrontEngine::QueryFeeCallBack* temp = fee_;
  fee_ = NULL;
  return temp;
}
inline void CallBackMessage::set_allocated_fee(::FrontEngine::QueryFeeCallBack* fee) {
  delete fee_;
  fee_ = fee;
  if (fee) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.CallBackMessage.fee)
}

// optional .FrontEngine.QueryOrderCallBack order = 9;
inline bool CallBackMessage::has_order() const {
  return !_is_default_instance_ && order_ != NULL;
}
inline void CallBackMessage::clear_order() {
  if (GetArenaNoVirtual() == NULL && order_ != NULL) delete order_;
  order_ = NULL;
}
inline const ::FrontEngine::QueryOrderCallBack& CallBackMessage::order() const {
  // @@protoc_insertion_point(field_get:FrontEngine.CallBackMessage.order)
  return order_ != NULL ? *order_ : *default_instance_->order_;
}
inline ::FrontEngine::QueryOrderCallBack* CallBackMessage::mutable_order() {
  
  if (order_ == NULL) {
    order_ = new ::FrontEngine::QueryOrderCallBack;
  }
  // @@protoc_insertion_point(field_mutable:FrontEngine.CallBackMessage.order)
  return order_;
}
inline ::FrontEngine::QueryOrderCallBack* CallBackMessage::release_order() {
  
  ::FrontEngine::QueryOrderCallBack* temp = order_;
  order_ = NULL;
  return temp;
}
inline void CallBackMessage::set_allocated_order(::FrontEngine::QueryOrderCallBack* order) {
  delete order_;
  order_ = order;
  if (order) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.CallBackMessage.order)
}

// optional .FrontEngine.QueryOrdersCallBack orders = 10;
inline bool CallBackMessage::has_orders() const {
  return !_is_default_instance_ && orders_ != NULL;
}
inline void CallBackMessage::clear_orders() {
  if (GetArenaNoVirtual() == NULL && orders_ != NULL) delete orders_;
  orders_ = NULL;
}
inline const ::FrontEngine::QueryOrdersCallBack& CallBackMessage::orders() const {
  // @@protoc_insertion_point(field_get:FrontEngine.CallBackMessage.orders)
  return orders_ != NULL ? *orders_ : *default_instance_->orders_;
}
inline ::FrontEngine::QueryOrdersCallBack* CallBackMessage::mutable_orders() {
  
  if (orders_ == NULL) {
    orders_ = new ::FrontEngine::QueryOrdersCallBack;
  }
  // @@protoc_insertion_point(field_mutable:FrontEngine.CallBackMessage.orders)
  return orders_;
}
inline ::FrontEngine::QueryOrdersCallBack* CallBackMessage::release_orders() {
  
  ::FrontEngine::QueryOrdersCallBack* temp = orders_;
  orders_ = NULL;
  return temp;
}
inline void CallBackMessage::set_allocated_orders(::FrontEngine::QueryOrdersCallBack* orders) {
  delete orders_;
  orders_ = orders;
  if (orders) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.CallBackMessage.orders)
}

// optional .FrontEngine.TradedCallBack traded_info = 11;
inline bool CallBackMessage::has_traded_info() const {
  return !_is_default_instance_ && traded_info_ != NULL;
}
inline void CallBackMessage::clear_traded_info() {
  if (GetArenaNoVirtual() == NULL && traded_info_ != NULL) delete traded_info_;
  traded_info_ = NULL;
}
inline const ::FrontEngine::TradedCallBack& CallBackMessage::traded_info() const {
  // @@protoc_insertion_point(field_get:FrontEngine.CallBackMessage.traded_info)
  return traded_info_ != NULL ? *traded_info_ : *default_instance_->traded_info_;
}
inline ::FrontEngine::TradedCallBack* CallBackMessage::mutable_traded_info() {
  
  if (traded_info_ == NULL) {
    traded_info_ = new ::FrontEngine::TradedCallBack;
  }
  // @@protoc_insertion_point(field_mutable:FrontEngine.CallBackMessage.traded_info)
  return traded_info_;
}
inline ::FrontEngine::TradedCallBack* CallBackMessage::release_traded_info() {
  
  ::FrontEngine::TradedCallBack* temp = traded_info_;
  traded_info_ = NULL;
  return temp;
}
inline void CallBackMessage::set_allocated_traded_info(::FrontEngine::TradedCallBack* traded_info) {
  delete traded_info_;
  traded_info_ = traded_info;
  if (traded_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.CallBackMessage.traded_info)
}

// optional .FrontEngine.CanceledCallBack canceled_info = 12;
inline bool CallBackMessage::has_canceled_info() const {
  return !_is_default_instance_ && canceled_info_ != NULL;
}
inline void CallBackMessage::clear_canceled_info() {
  if (GetArenaNoVirtual() == NULL && canceled_info_ != NULL) delete canceled_info_;
  canceled_info_ = NULL;
}
inline const ::FrontEngine::CanceledCallBack& CallBackMessage::canceled_info() const {
  // @@protoc_insertion_point(field_get:FrontEngine.CallBackMessage.canceled_info)
  return canceled_info_ != NULL ? *canceled_info_ : *default_instance_->canceled_info_;
}
inline ::FrontEngine::CanceledCallBack* CallBackMessage::mutable_canceled_info() {
  
  if (canceled_info_ == NULL) {
    canceled_info_ = new ::FrontEngine::CanceledCallBack;
  }
  // @@protoc_insertion_point(field_mutable:FrontEngine.CallBackMessage.canceled_info)
  return canceled_info_;
}
inline ::FrontEngine::CanceledCallBack* CallBackMessage::release_canceled_info() {
  
  ::FrontEngine::CanceledCallBack* temp = canceled_info_;
  canceled_info_ = NULL;
  return temp;
}
inline void CallBackMessage::set_allocated_canceled_info(::FrontEngine::CanceledCallBack* canceled_info) {
  delete canceled_info_;
  canceled_info_ = canceled_info;
  if (canceled_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.CallBackMessage.canceled_info)
}

// optional .FrontEngine.RejectedCallBack rejected_info = 13;
inline bool CallBackMessage::has_rejected_info() const {
  return !_is_default_instance_ && rejected_info_ != NULL;
}
inline void CallBackMessage::clear_rejected_info() {
  if (GetArenaNoVirtual() == NULL && rejected_info_ != NULL) delete rejected_info_;
  rejected_info_ = NULL;
}
inline const ::FrontEngine::RejectedCallBack& CallBackMessage::rejected_info() const {
  // @@protoc_insertion_point(field_get:FrontEngine.CallBackMessage.rejected_info)
  return rejected_info_ != NULL ? *rejected_info_ : *default_instance_->rejected_info_;
}
inline ::FrontEngine::RejectedCallBack* CallBackMessage::mutable_rejected_info() {
  
  if (rejected_info_ == NULL) {
    rejected_info_ = new ::FrontEngine::RejectedCallBack;
  }
  // @@protoc_insertion_point(field_mutable:FrontEngine.CallBackMessage.rejected_info)
  return rejected_info_;
}
inline ::FrontEngine::RejectedCallBack* CallBackMessage::release_rejected_info() {
  
  ::FrontEngine::RejectedCallBack* temp = rejected_info_;
  rejected_info_ = NULL;
  return temp;
}
inline void CallBackMessage::set_allocated_rejected_info(::FrontEngine::RejectedCallBack* rejected_info) {
  delete rejected_info_;
  rejected_info_ = rejected_info;
  if (rejected_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.CallBackMessage.rejected_info)
}

// optional .FrontEngine.HeartBeatCallBack heart_beat = 14;
inline bool CallBackMessage::has_heart_beat() const {
  return !_is_default_instance_ && heart_beat_ != NULL;
}
inline void CallBackMessage::clear_heart_beat() {
  if (GetArenaNoVirtual() == NULL && heart_beat_ != NULL) delete heart_beat_;
  heart_beat_ = NULL;
}
inline const ::FrontEngine::HeartBeatCallBack& CallBackMessage::heart_beat() const {
  // @@protoc_insertion_point(field_get:FrontEngine.CallBackMessage.heart_beat)
  return heart_beat_ != NULL ? *heart_beat_ : *default_instance_->heart_beat_;
}
inline ::FrontEngine::HeartBeatCallBack* CallBackMessage::mutable_heart_beat() {
  
  if (heart_beat_ == NULL) {
    heart_beat_ = new ::FrontEngine::HeartBeatCallBack;
  }
  // @@protoc_insertion_point(field_mutable:FrontEngine.CallBackMessage.heart_beat)
  return heart_beat_;
}
inline ::FrontEngine::HeartBeatCallBack* CallBackMessage::release_heart_beat() {
  
  ::FrontEngine::HeartBeatCallBack* temp = heart_beat_;
  heart_beat_ = NULL;
  return temp;
}
inline void CallBackMessage::set_allocated_heart_beat(::FrontEngine::HeartBeatCallBack* heart_beat) {
  delete heart_beat_;
  heart_beat_ = heart_beat;
  if (heart_beat) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.CallBackMessage.heart_beat)
}

// optional .FrontEngine.CheckAppIdCallBack app_id = 15;
inline bool CallBackMessage::has_app_id() const {
  return !_is_default_instance_ && app_id_ != NULL;
}
inline void CallBackMessage::clear_app_id() {
  if (GetArenaNoVirtual() == NULL && app_id_ != NULL) delete app_id_;
  app_id_ = NULL;
}
inline const ::FrontEngine::CheckAppIdCallBack& CallBackMessage::app_id() const {
  // @@protoc_insertion_point(field_get:FrontEngine.CallBackMessage.app_id)
  return app_id_ != NULL ? *app_id_ : *default_instance_->app_id_;
}
inline ::FrontEngine::CheckAppIdCallBack* CallBackMessage::mutable_app_id() {
  
  if (app_id_ == NULL) {
    app_id_ = new ::FrontEngine::CheckAppIdCallBack;
  }
  // @@protoc_insertion_point(field_mutable:FrontEngine.CallBackMessage.app_id)
  return app_id_;
}
inline ::FrontEngine::CheckAppIdCallBack* CallBackMessage::release_app_id() {
  
  ::FrontEngine::CheckAppIdCallBack* temp = app_id_;
  app_id_ = NULL;
  return temp;
}
inline void CallBackMessage::set_allocated_app_id(::FrontEngine::CheckAppIdCallBack* app_id) {
  delete app_id_;
  app_id_ = app_id;
  if (app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.CallBackMessage.app_id)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace FrontEngine

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::FrontEngine::enums_OrderStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FrontEngine::enums_OrderStatus>() {
  return ::FrontEngine::enums_OrderStatus_descriptor();
}
template <> struct is_proto_enum< ::FrontEngine::enums_CoinType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FrontEngine::enums_CoinType>() {
  return ::FrontEngine::enums_CoinType_descriptor();
}
template <> struct is_proto_enum< ::FrontEngine::enums_RequestType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FrontEngine::enums_RequestType>() {
  return ::FrontEngine::enums_RequestType_descriptor();
}
template <> struct is_proto_enum< ::FrontEngine::enums_CallBackType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FrontEngine::enums_CallBackType>() {
  return ::FrontEngine::enums_CallBackType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_front_5fengine_2eproto__INCLUDED

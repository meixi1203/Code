// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: front_engine.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "front_engine.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace FrontEngine {

namespace {

const ::google::protobuf::Descriptor* enums_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  enums_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* enums_OrderStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* enums_CoinType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* enums_RequestType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* enums_CallBackType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Order_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Order_reflection_ = NULL;
const ::google::protobuf::Descriptor* CoinInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CoinInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CoinCapital_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CoinCapital_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeartBeatRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeartBeatRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeartBeatCallBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeartBeatCallBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* CheckAppId_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CheckAppId_reflection_ = NULL;
const ::google::protobuf::Descriptor* CheckAppIdCallBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CheckAppIdCallBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateAccountRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateAccountRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateAccountCallBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateAccountCallBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryBalanceRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryBalanceRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryBalanceCallBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryBalanceCallBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryFeeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryFeeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryFeeCallBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryFeeCallBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryOrderRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryOrderRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryOrderCallBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryOrderCallBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryOrdersRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryOrdersRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryOrdersCallBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryOrdersCallBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* SendCoinRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SendCoinRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RecieveCoinRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecieveCoinRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* TradedCallBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TradedCallBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* CanceledCallBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CanceledCallBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* CanceledRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CanceledRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RejectedCallBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RejectedCallBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* CallBackMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CallBackMessage_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_front_5fengine_2eproto() {
  protobuf_AddDesc_front_5fengine_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "front_engine.proto");
  GOOGLE_CHECK(file != NULL);
  enums_descriptor_ = file->message_type(0);
  static const int enums_offsets_[1] = {
  };
  enums_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      enums_descriptor_,
      enums::default_instance_,
      enums_offsets_,
      -1,
      -1,
      -1,
      sizeof(enums),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(enums, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(enums, _is_default_instance_));
  enums_OrderStatus_descriptor_ = enums_descriptor_->enum_type(0);
  enums_CoinType_descriptor_ = enums_descriptor_->enum_type(1);
  enums_RequestType_descriptor_ = enums_descriptor_->enum_type(2);
  enums_CallBackType_descriptor_ = enums_descriptor_->enum_type(3);
  Order_descriptor_ = file->message_type(1);
  static const int Order_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, order_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, from_address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, to_address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, fee_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, order_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, order_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, status_),
  };
  Order_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Order_descriptor_,
      Order::default_instance_,
      Order_offsets_,
      -1,
      -1,
      -1,
      sizeof(Order),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, _is_default_instance_));
  CoinInfo_descriptor_ = file->message_type(2);
  static const int CoinInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoinInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoinInfo, ch_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoinInfo, en_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoinInfo, base_fee_),
  };
  CoinInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CoinInfo_descriptor_,
      CoinInfo::default_instance_,
      CoinInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(CoinInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoinInfo, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoinInfo, _is_default_instance_));
  CoinCapital_descriptor_ = file->message_type(3);
  static const int CoinCapital_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoinCapital, address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoinCapital, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoinCapital, amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoinCapital, frozen_amount_),
  };
  CoinCapital_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CoinCapital_descriptor_,
      CoinCapital::default_instance_,
      CoinCapital_offsets_,
      -1,
      -1,
      -1,
      sizeof(CoinCapital),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoinCapital, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoinCapital, _is_default_instance_));
  UserInfo_descriptor_ = file->message_type(4);
  static const int UserInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, address_),
  };
  UserInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UserInfo_descriptor_,
      UserInfo::default_instance_,
      UserInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(UserInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, _is_default_instance_));
  HeartBeatRequest_descriptor_ = file->message_type(5);
  static const int HeartBeatRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeatRequest, request_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeatRequest, data_),
  };
  HeartBeatRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      HeartBeatRequest_descriptor_,
      HeartBeatRequest::default_instance_,
      HeartBeatRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(HeartBeatRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeatRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeatRequest, _is_default_instance_));
  HeartBeatCallBack_descriptor_ = file->message_type(6);
  static const int HeartBeatCallBack_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeatCallBack, request_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeatCallBack, data_),
  };
  HeartBeatCallBack_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      HeartBeatCallBack_descriptor_,
      HeartBeatCallBack::default_instance_,
      HeartBeatCallBack_offsets_,
      -1,
      -1,
      -1,
      sizeof(HeartBeatCallBack),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeatCallBack, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeatCallBack, _is_default_instance_));
  CheckAppId_descriptor_ = file->message_type(7);
  static const int CheckAppId_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckAppId, request_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckAppId, app_id_),
  };
  CheckAppId_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CheckAppId_descriptor_,
      CheckAppId::default_instance_,
      CheckAppId_offsets_,
      -1,
      -1,
      -1,
      sizeof(CheckAppId),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckAppId, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckAppId, _is_default_instance_));
  CheckAppIdCallBack_descriptor_ = file->message_type(8);
  static const int CheckAppIdCallBack_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckAppIdCallBack, request_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckAppIdCallBack, app_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckAppIdCallBack, sdk_id_),
  };
  CheckAppIdCallBack_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CheckAppIdCallBack_descriptor_,
      CheckAppIdCallBack::default_instance_,
      CheckAppIdCallBack_offsets_,
      -1,
      -1,
      -1,
      sizeof(CheckAppIdCallBack),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckAppIdCallBack, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckAppIdCallBack, _is_default_instance_));
  CreateAccountRequest_descriptor_ = file->message_type(9);
  static const int CreateAccountRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateAccountRequest, request_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateAccountRequest, coin_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateAccountRequest, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateAccountRequest, password_),
  };
  CreateAccountRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CreateAccountRequest_descriptor_,
      CreateAccountRequest::default_instance_,
      CreateAccountRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(CreateAccountRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateAccountRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateAccountRequest, _is_default_instance_));
  CreateAccountCallBack_descriptor_ = file->message_type(10);
  static const int CreateAccountCallBack_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateAccountCallBack, request_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateAccountCallBack, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateAccountCallBack, errorcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateAccountCallBack, error_),
  };
  CreateAccountCallBack_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CreateAccountCallBack_descriptor_,
      CreateAccountCallBack::default_instance_,
      CreateAccountCallBack_offsets_,
      -1,
      -1,
      -1,
      sizeof(CreateAccountCallBack),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateAccountCallBack, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateAccountCallBack, _is_default_instance_));
  QueryBalanceRequest_descriptor_ = file->message_type(11);
  static const int QueryBalanceRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryBalanceRequest, request_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryBalanceRequest, coin_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryBalanceRequest, address_),
  };
  QueryBalanceRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      QueryBalanceRequest_descriptor_,
      QueryBalanceRequest::default_instance_,
      QueryBalanceRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(QueryBalanceRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryBalanceRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryBalanceRequest, _is_default_instance_));
  QueryBalanceCallBack_descriptor_ = file->message_type(12);
  static const int QueryBalanceCallBack_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryBalanceCallBack, request_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryBalanceCallBack, capital_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryBalanceCallBack, errorcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryBalanceCallBack, error_),
  };
  QueryBalanceCallBack_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      QueryBalanceCallBack_descriptor_,
      QueryBalanceCallBack::default_instance_,
      QueryBalanceCallBack_offsets_,
      -1,
      -1,
      -1,
      sizeof(QueryBalanceCallBack),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryBalanceCallBack, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryBalanceCallBack, _is_default_instance_));
  QueryFeeRequest_descriptor_ = file->message_type(13);
  static const int QueryFeeRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryFeeRequest, request_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryFeeRequest, coin_type_),
  };
  QueryFeeRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      QueryFeeRequest_descriptor_,
      QueryFeeRequest::default_instance_,
      QueryFeeRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(QueryFeeRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryFeeRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryFeeRequest, _is_default_instance_));
  QueryFeeCallBack_descriptor_ = file->message_type(14);
  static const int QueryFeeCallBack_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryFeeCallBack, request_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryFeeCallBack, coin_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryFeeCallBack, fee_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryFeeCallBack, errorcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryFeeCallBack, error_),
  };
  QueryFeeCallBack_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      QueryFeeCallBack_descriptor_,
      QueryFeeCallBack::default_instance_,
      QueryFeeCallBack_offsets_,
      -1,
      -1,
      -1,
      sizeof(QueryFeeCallBack),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryFeeCallBack, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryFeeCallBack, _is_default_instance_));
  QueryOrderRequest_descriptor_ = file->message_type(15);
  static const int QueryOrderRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryOrderRequest, request_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryOrderRequest, coin_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryOrderRequest, order_id_),
  };
  QueryOrderRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      QueryOrderRequest_descriptor_,
      QueryOrderRequest::default_instance_,
      QueryOrderRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(QueryOrderRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryOrderRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryOrderRequest, _is_default_instance_));
  QueryOrderCallBack_descriptor_ = file->message_type(16);
  static const int QueryOrderCallBack_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryOrderCallBack, request_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryOrderCallBack, order_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryOrderCallBack, errorcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryOrderCallBack, error_),
  };
  QueryOrderCallBack_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      QueryOrderCallBack_descriptor_,
      QueryOrderCallBack::default_instance_,
      QueryOrderCallBack_offsets_,
      -1,
      -1,
      -1,
      sizeof(QueryOrderCallBack),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryOrderCallBack, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryOrderCallBack, _is_default_instance_));
  QueryOrdersRequest_descriptor_ = file->message_type(17);
  static const int QueryOrdersRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryOrdersRequest, request_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryOrdersRequest, coin_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryOrdersRequest, address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryOrdersRequest, order_),
  };
  QueryOrdersRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      QueryOrdersRequest_descriptor_,
      QueryOrdersRequest::default_instance_,
      QueryOrdersRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(QueryOrdersRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryOrdersRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryOrdersRequest, _is_default_instance_));
  QueryOrdersCallBack_descriptor_ = file->message_type(18);
  static const int QueryOrdersCallBack_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryOrdersCallBack, request_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryOrdersCallBack, order_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryOrdersCallBack, length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryOrdersCallBack, errorcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryOrdersCallBack, error_),
  };
  QueryOrdersCallBack_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      QueryOrdersCallBack_descriptor_,
      QueryOrdersCallBack::default_instance_,
      QueryOrdersCallBack_offsets_,
      -1,
      -1,
      -1,
      sizeof(QueryOrdersCallBack),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryOrdersCallBack, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryOrdersCallBack, _is_default_instance_));
  SendCoinRequest_descriptor_ = file->message_type(19);
  static const int SendCoinRequest_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendCoinRequest, request_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendCoinRequest, coin_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendCoinRequest, from_address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendCoinRequest, from_pwd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendCoinRequest, to_address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendCoinRequest, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendCoinRequest, amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendCoinRequest, order_),
  };
  SendCoinRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SendCoinRequest_descriptor_,
      SendCoinRequest::default_instance_,
      SendCoinRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(SendCoinRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendCoinRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendCoinRequest, _is_default_instance_));
  RecieveCoinRequest_descriptor_ = file->message_type(20);
  static const int RecieveCoinRequest_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecieveCoinRequest, request_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecieveCoinRequest, coin_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecieveCoinRequest, from_address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecieveCoinRequest, from_pwd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecieveCoinRequest, to_address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecieveCoinRequest, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecieveCoinRequest, amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecieveCoinRequest, order_),
  };
  RecieveCoinRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RecieveCoinRequest_descriptor_,
      RecieveCoinRequest::default_instance_,
      RecieveCoinRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(RecieveCoinRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecieveCoinRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecieveCoinRequest, _is_default_instance_));
  TradedCallBack_descriptor_ = file->message_type(21);
  static const int TradedCallBack_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradedCallBack, request_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradedCallBack, order_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradedCallBack, errorcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradedCallBack, error_),
  };
  TradedCallBack_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TradedCallBack_descriptor_,
      TradedCallBack::default_instance_,
      TradedCallBack_offsets_,
      -1,
      -1,
      -1,
      sizeof(TradedCallBack),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradedCallBack, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradedCallBack, _is_default_instance_));
  CanceledCallBack_descriptor_ = file->message_type(22);
  static const int CanceledCallBack_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CanceledCallBack, request_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CanceledCallBack, order_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CanceledCallBack, errorcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CanceledCallBack, error_),
  };
  CanceledCallBack_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CanceledCallBack_descriptor_,
      CanceledCallBack::default_instance_,
      CanceledCallBack_offsets_,
      -1,
      -1,
      -1,
      sizeof(CanceledCallBack),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CanceledCallBack, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CanceledCallBack, _is_default_instance_));
  CanceledRequest_descriptor_ = file->message_type(23);
  static const int CanceledRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CanceledRequest, request_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CanceledRequest, order_),
  };
  CanceledRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CanceledRequest_descriptor_,
      CanceledRequest::default_instance_,
      CanceledRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(CanceledRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CanceledRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CanceledRequest, _is_default_instance_));
  RejectedCallBack_descriptor_ = file->message_type(24);
  static const int RejectedCallBack_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RejectedCallBack, request_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RejectedCallBack, order_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RejectedCallBack, errorcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RejectedCallBack, error_),
  };
  RejectedCallBack_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RejectedCallBack_descriptor_,
      RejectedCallBack::default_instance_,
      RejectedCallBack_offsets_,
      -1,
      -1,
      -1,
      sizeof(RejectedCallBack),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RejectedCallBack, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RejectedCallBack, _is_default_instance_));
  RequestMessage_descriptor_ = file->message_type(25);
  static const int RequestMessage_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestMessage, request_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestMessage, client_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestMessage, front_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestMessage, md5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestMessage, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestMessage, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestMessage, balance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestMessage, fee_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestMessage, order_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestMessage, orders_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestMessage, send_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestMessage, recieve_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestMessage, canceled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestMessage, heart_beat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestMessage, app_id_),
  };
  RequestMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RequestMessage_descriptor_,
      RequestMessage::default_instance_,
      RequestMessage_offsets_,
      -1,
      -1,
      -1,
      sizeof(RequestMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestMessage, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestMessage, _is_default_instance_));
  CallBackMessage_descriptor_ = file->message_type(26);
  static const int CallBackMessage_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallBackMessage, request_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallBackMessage, client_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallBackMessage, front_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallBackMessage, md5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallBackMessage, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallBackMessage, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallBackMessage, balance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallBackMessage, fee_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallBackMessage, order_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallBackMessage, orders_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallBackMessage, traded_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallBackMessage, canceled_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallBackMessage, rejected_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallBackMessage, heart_beat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallBackMessage, app_id_),
  };
  CallBackMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CallBackMessage_descriptor_,
      CallBackMessage::default_instance_,
      CallBackMessage_offsets_,
      -1,
      -1,
      -1,
      sizeof(CallBackMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallBackMessage, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallBackMessage, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_front_5fengine_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      enums_descriptor_, &enums::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Order_descriptor_, &Order::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CoinInfo_descriptor_, &CoinInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CoinCapital_descriptor_, &CoinCapital::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UserInfo_descriptor_, &UserInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      HeartBeatRequest_descriptor_, &HeartBeatRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      HeartBeatCallBack_descriptor_, &HeartBeatCallBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CheckAppId_descriptor_, &CheckAppId::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CheckAppIdCallBack_descriptor_, &CheckAppIdCallBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CreateAccountRequest_descriptor_, &CreateAccountRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CreateAccountCallBack_descriptor_, &CreateAccountCallBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      QueryBalanceRequest_descriptor_, &QueryBalanceRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      QueryBalanceCallBack_descriptor_, &QueryBalanceCallBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      QueryFeeRequest_descriptor_, &QueryFeeRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      QueryFeeCallBack_descriptor_, &QueryFeeCallBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      QueryOrderRequest_descriptor_, &QueryOrderRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      QueryOrderCallBack_descriptor_, &QueryOrderCallBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      QueryOrdersRequest_descriptor_, &QueryOrdersRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      QueryOrdersCallBack_descriptor_, &QueryOrdersCallBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SendCoinRequest_descriptor_, &SendCoinRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RecieveCoinRequest_descriptor_, &RecieveCoinRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TradedCallBack_descriptor_, &TradedCallBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CanceledCallBack_descriptor_, &CanceledCallBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CanceledRequest_descriptor_, &CanceledRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RejectedCallBack_descriptor_, &RejectedCallBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RequestMessage_descriptor_, &RequestMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CallBackMessage_descriptor_, &CallBackMessage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_front_5fengine_2eproto() {
  delete enums::default_instance_;
  delete enums_reflection_;
  delete Order::default_instance_;
  delete Order_reflection_;
  delete CoinInfo::default_instance_;
  delete CoinInfo_reflection_;
  delete CoinCapital::default_instance_;
  delete CoinCapital_reflection_;
  delete UserInfo::default_instance_;
  delete UserInfo_reflection_;
  delete HeartBeatRequest::default_instance_;
  delete HeartBeatRequest_reflection_;
  delete HeartBeatCallBack::default_instance_;
  delete HeartBeatCallBack_reflection_;
  delete CheckAppId::default_instance_;
  delete CheckAppId_reflection_;
  delete CheckAppIdCallBack::default_instance_;
  delete CheckAppIdCallBack_reflection_;
  delete CreateAccountRequest::default_instance_;
  delete CreateAccountRequest_reflection_;
  delete CreateAccountCallBack::default_instance_;
  delete CreateAccountCallBack_reflection_;
  delete QueryBalanceRequest::default_instance_;
  delete QueryBalanceRequest_reflection_;
  delete QueryBalanceCallBack::default_instance_;
  delete QueryBalanceCallBack_reflection_;
  delete QueryFeeRequest::default_instance_;
  delete QueryFeeRequest_reflection_;
  delete QueryFeeCallBack::default_instance_;
  delete QueryFeeCallBack_reflection_;
  delete QueryOrderRequest::default_instance_;
  delete QueryOrderRequest_reflection_;
  delete QueryOrderCallBack::default_instance_;
  delete QueryOrderCallBack_reflection_;
  delete QueryOrdersRequest::default_instance_;
  delete QueryOrdersRequest_reflection_;
  delete QueryOrdersCallBack::default_instance_;
  delete QueryOrdersCallBack_reflection_;
  delete SendCoinRequest::default_instance_;
  delete SendCoinRequest_reflection_;
  delete RecieveCoinRequest::default_instance_;
  delete RecieveCoinRequest_reflection_;
  delete TradedCallBack::default_instance_;
  delete TradedCallBack_reflection_;
  delete CanceledCallBack::default_instance_;
  delete CanceledCallBack_reflection_;
  delete CanceledRequest::default_instance_;
  delete CanceledRequest_reflection_;
  delete RejectedCallBack::default_instance_;
  delete RejectedCallBack_reflection_;
  delete RequestMessage::default_instance_;
  delete RequestMessage_reflection_;
  delete CallBackMessage::default_instance_;
  delete CallBackMessage_reflection_;
}

void protobuf_AddDesc_front_5fengine_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022front_engine.proto\022\013FrontEngine\"\325\005\n\005en"
    "ums\"\212\001\n\013OrderStatus\022\025\n\021NONE_ORDER_STATUS"
    "\020\000\022\022\n\016TO_BE_REPORTED\020\001\022\014\n\010REPORTED\020\002\022\022\n\016"
    "PARTIAL_TRADED\020\003\022\024\n\020PARTIAL_CANCELED\020\004\022\n"
    "\n\006TRADED\020\005\022\014\n\010REJECTED\020\006\":\n\010CoinType\022\022\n\016"
    "NONE_COIN_TYPE\020\000\022\007\n\003BTC\020\001\022\007\n\003ETH\020\002\022\010\n\004BU"
    "SD\020\003\"\356\001\n\013RequestType\022\025\n\021NONE_REQUEST_TYP"
    "E\020\000\022\030\n\024CreateAccountRequest\020\001\022\027\n\023QueryBa"
    "lanceRequest\020\002\022\023\n\017QueryFeeRequest\020\003\022\025\n\021Q"
    "ueryOrderRequest\020\004\022\026\n\022QueryOrdersRequest"
    "\020\005\022\023\n\017SendCoinRequest\020\006\022\026\n\022RecieveCoinRe"
    "quest\020\007\022\024\n\020HeartBeatRequest\020\010\022\016\n\nCheckAp"
    "pId\020\t\"\221\002\n\014CallBackType\022\026\n\022NONE_CALLBACK_"
    "TYPE\020\000\022\031\n\025CreateAccountCallBack\020\001\022\030\n\024Que"
    "ryBalanceCallBack\020\002\022\024\n\020QueryFeeCallBack\020"
    "\003\022\026\n\022QueryOrderCallBack\020\004\022\027\n\023QueryOrders"
    "CallBack\020\005\022\022\n\016TradedCallBack\020\006\022\024\n\020Cancel"
    "edCallBack\020\007\022\024\n\020RejectedCallBack\020\010\022\025\n\021He"
    "artBeatCallBack\020\t\022\026\n\022CheckAppIdCallBack\020"
    "\n\"\370\001\n\005Order\022\020\n\010order_id\030\001 \001(\t\022)\n\004type\030\002 "
    "\001(\0162\033.FrontEngine.enums.CoinType\022\024\n\014from"
    "_address\030\003 \001(\t\022\022\n\nto_address\030\004 \001(\t\022\023\n\013de"
    "scription\030\005 \001(\t\022\016\n\006amount\030\006 \001(\t\022\013\n\003fee\030\007"
    " \001(\t\022\022\n\norder_date\030\010 \001(\005\022\022\n\norder_time\030\t"
    " \001(\005\022.\n\006status\030\n \001(\0162\036.FrontEngine.enums"
    ".OrderStatus\"i\n\010CoinInfo\022)\n\004type\030\001 \001(\0162\033"
    ".FrontEngine.enums.CoinType\022\017\n\007ch_name\030\002"
    " \001(\t\022\017\n\007en_name\030\003 \001(\t\022\020\n\010base_fee\030\004 \001(\001\""
    "p\n\013CoinCapital\022\017\n\007address\030\001 \001(\t\022)\n\004type\030"
    "\002 \001(\0162\033.FrontEngine.enums.CoinType\022\016\n\006am"
    "ount\030\003 \001(\t\022\025\n\rfrozen_amount\030\004 \001(\t\"j\n\010Use"
    "rInfo\022)\n\004type\030\001 \001(\0162\033.FrontEngine.enums."
    "CoinType\022\020\n\010username\030\002 \001(\t\022\020\n\010password\030\003"
    " \001(\t\022\017\n\007address\030\004 \001(\t\"4\n\020HeartBeatReques"
    "t\022\022\n\nrequest_id\030\001 \001(\t\022\014\n\004data\030\002 \001(\t\"5\n\021H"
    "eartBeatCallBack\022\022\n\nrequest_id\030\001 \001(\t\022\014\n\004"
    "data\030\002 \001(\t\"0\n\nCheckAppId\022\022\n\nrequest_id\030\001"
    " \001(\t\022\016\n\006app_id\030\002 \001(\t\"H\n\022CheckAppIdCallBa"
    "ck\022\022\n\nrequest_id\030\001 \001(\t\022\016\n\006app_id\030\002 \001(\t\022\016"
    "\n\006sdk_id\030\003 \001(\t\"~\n\024CreateAccountRequest\022\022"
    "\n\nrequest_id\030\001 \001(\t\022.\n\tcoin_type\030\002 \001(\0162\033."
    "FrontEngine.enums.CoinType\022\020\n\010username\030\003"
    " \001(\t\022\020\n\010password\030\004 \001(\t\"u\n\025CreateAccountC"
    "allBack\022\022\n\nrequest_id\030\001 \001(\t\022&\n\007account\030\002"
    " \001(\0132\025.FrontEngine.UserInfo\022\021\n\terrorCode"
    "\030\003 \001(\005\022\r\n\005error\030\004 \001(\t\"j\n\023QueryBalanceReq"
    "uest\022\022\n\nrequest_id\030\001 \001(\t\022.\n\tcoin_type\030\002 "
    "\001(\0162\033.FrontEngine.enums.CoinType\022\017\n\007addr"
    "ess\030\003 \001(\t\"w\n\024QueryBalanceCallBack\022\022\n\nreq"
    "uest_id\030\001 \001(\t\022)\n\007capital\030\002 \001(\0132\030.FrontEn"
    "gine.CoinCapital\022\021\n\terrorCode\030\003 \001(\005\022\r\n\005e"
    "rror\030\004 \001(\t\"U\n\017QueryFeeRequest\022\022\n\nrequest"
    "_id\030\001 \001(\t\022.\n\tcoin_type\030\002 \001(\0162\033.FrontEngi"
    "ne.enums.CoinType\"\205\001\n\020QueryFeeCallBack\022\022"
    "\n\nrequest_id\030\001 \001(\t\022.\n\tcoin_type\030\002 \001(\0162\033."
    "FrontEngine.enums.CoinType\022\013\n\003fee\030\003 \001(\t\022"
    "\021\n\terrorCode\030\004 \001(\005\022\r\n\005error\030\005 \001(\t\"i\n\021Que"
    "ryOrderRequest\022\022\n\nrequest_id\030\001 \001(\t\022.\n\tco"
    "in_type\030\002 \001(\0162\033.FrontEngine.enums.CoinTy"
    "pe\022\020\n\010order_id\030\003 \001(\t\"m\n\022QueryOrderCallBa"
    "ck\022\022\n\nrequest_id\030\001 \001(\t\022!\n\005order\030\002 \001(\0132\022."
    "FrontEngine.Order\022\021\n\terrorCode\030\003 \001(\005\022\r\n\005"
    "error\030\004 \001(\t\"\214\001\n\022QueryOrdersRequest\022\022\n\nre"
    "quest_id\030\001 \001(\t\022.\n\tcoin_type\030\002 \001(\0162\033.Fron"
    "tEngine.enums.CoinType\022\017\n\007address\030\003 \001(\t\022"
    "!\n\005order\030\004 \001(\0132\022.FrontEngine.Order\"~\n\023Qu"
    "eryOrdersCallBack\022\022\n\nrequest_id\030\001 \001(\t\022!\n"
    "\005order\030\002 \003(\0132\022.FrontEngine.Order\022\016\n\006leng"
    "th\030\003 \001(\005\022\021\n\terrorCode\030\004 \001(\005\022\r\n\005error\030\005 \001"
    "(\t\"\331\001\n\017SendCoinRequest\022\022\n\nrequest_id\030\001 \001"
    "(\t\022.\n\tcoin_type\030\002 \001(\0162\033.FrontEngine.enum"
    "s.CoinType\022\024\n\014from_address\030\003 \001(\t\022\020\n\010from"
    "_pwd\030\004 \001(\t\022\022\n\nto_address\030\005 \001(\t\022\023\n\013descri"
    "ption\030\006 \001(\t\022\016\n\006amount\030\007 \001(\t\022!\n\005order\030\010 \001"
    "(\0132\022.FrontEngine.Order\"\334\001\n\022RecieveCoinRe"
    "quest\022\022\n\nrequest_id\030\001 \001(\t\022.\n\tcoin_type\030\002"
    " \001(\0162\033.FrontEngine.enums.CoinType\022\024\n\014fro"
    "m_address\030\003 \001(\t\022\020\n\010from_pwd\030\004 \001(\t\022\022\n\nto_"
    "address\030\005 \001(\t\022\023\n\013description\030\006 \001(\t\022\016\n\006am"
    "ount\030\007 \001(\t\022!\n\005order\030\010 \001(\0132\022.FrontEngine."
    "Order\"i\n\016TradedCallBack\022\022\n\nrequest_id\030\001 "
    "\001(\t\022!\n\005order\030\002 \001(\0132\022.FrontEngine.Order\022\021"
    "\n\terrorCode\030\003 \001(\005\022\r\n\005error\030\004 \001(\t\"k\n\020Canc"
    "eledCallBack\022\022\n\nrequest_id\030\001 \001(\t\022!\n\005orde"
    "r\030\002 \001(\0132\022.FrontEngine.Order\022\021\n\terrorCode"
    "\030\003 \001(\005\022\r\n\005error\030\004 \001(\t\"H\n\017CanceledRequest"
    "\022\022\n\nrequest_id\030\001 \001(\t\022!\n\005order\030\002 \001(\0132\022.Fr"
    "ontEngine.Order\"k\n\020RejectedCallBack\022\022\n\nr"
    "equest_id\030\001 \001(\t\022!\n\005order\030\002 \001(\0132\022.FrontEn"
    "gine.Order\022\021\n\terrorCode\030\003 \001(\005\022\r\n\005error\030\004"
    " \001(\t\"\352\004\n\016RequestMessage\022\022\n\nrequest_id\030\001 "
    "\001(\t\022\021\n\tclient_id\030\002 \001(\t\022\020\n\010front_id\030\003 \001(\t"
    "\022\013\n\003md5\030\004 \001(\t\022,\n\004type\030\005 \001(\0162\036.FrontEngin"
    "e.enums.RequestType\0222\n\007account\030\006 \001(\0132!.F"
    "rontEngine.CreateAccountRequest\0221\n\007balan"
    "ce\030\007 \001(\0132 .FrontEngine.QueryBalanceReque"
    "st\022)\n\003fee\030\010 \001(\0132\034.FrontEngine.QueryFeeRe"
    "quest\022-\n\005order\030\t \001(\0132\036.FrontEngine.Query"
    "OrderRequest\022/\n\006orders\030\n \001(\0132\037.FrontEngi"
    "ne.QueryOrdersRequest\022/\n\tsend_info\030\013 \001(\013"
    "2\034.FrontEngine.SendCoinRequest\0225\n\014reciev"
    "e_info\030\014 \001(\0132\037.FrontEngine.RecieveCoinRe"
    "quest\022.\n\010canceled\030\r \001(\0132\034.FrontEngine.Ca"
    "nceledRequest\0221\n\nheart_beat\030\016 \001(\0132\035.Fron"
    "tEngine.HeartBeatRequest\022\'\n\006app_id\030\017 \001(\013"
    "2\027.FrontEngine.CheckAppId\"\200\005\n\017CallBackMe"
    "ssage\022\022\n\nrequest_id\030\001 \001(\t\022\021\n\tclient_id\030\002"
    " \001(\t\022\020\n\010front_id\030\003 \001(\t\022\013\n\003md5\030\004 \001(\t\022-\n\004t"
    "ype\030\005 \001(\0162\037.FrontEngine.enums.CallBackTy"
    "pe\0223\n\007account\030\006 \001(\0132\".FrontEngine.Create"
    "AccountCallBack\0222\n\007balance\030\007 \001(\0132!.Front"
    "Engine.QueryBalanceCallBack\022*\n\003fee\030\010 \001(\013"
    "2\035.FrontEngine.QueryFeeCallBack\022.\n\005order"
    "\030\t \001(\0132\037.FrontEngine.QueryOrderCallBack\022"
    "0\n\006orders\030\n \001(\0132 .FrontEngine.QueryOrder"
    "sCallBack\0220\n\013traded_info\030\013 \001(\0132\033.FrontEn"
    "gine.TradedCallBack\0224\n\rcanceled_info\030\014 \001"
    "(\0132\035.FrontEngine.CanceledCallBack\0224\n\rrej"
    "ected_info\030\r \001(\0132\035.FrontEngine.RejectedC"
    "allBack\0222\n\nheart_beat\030\016 \001(\0132\036.FrontEngin"
    "e.HeartBeatCallBack\022/\n\006app_id\030\017 \001(\0132\037.Fr"
    "ontEngine.CheckAppIdCallBackb\006proto3", 4876);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "front_engine.proto", &protobuf_RegisterTypes);
  enums::default_instance_ = new enums();
  Order::default_instance_ = new Order();
  CoinInfo::default_instance_ = new CoinInfo();
  CoinCapital::default_instance_ = new CoinCapital();
  UserInfo::default_instance_ = new UserInfo();
  HeartBeatRequest::default_instance_ = new HeartBeatRequest();
  HeartBeatCallBack::default_instance_ = new HeartBeatCallBack();
  CheckAppId::default_instance_ = new CheckAppId();
  CheckAppIdCallBack::default_instance_ = new CheckAppIdCallBack();
  CreateAccountRequest::default_instance_ = new CreateAccountRequest();
  CreateAccountCallBack::default_instance_ = new CreateAccountCallBack();
  QueryBalanceRequest::default_instance_ = new QueryBalanceRequest();
  QueryBalanceCallBack::default_instance_ = new QueryBalanceCallBack();
  QueryFeeRequest::default_instance_ = new QueryFeeRequest();
  QueryFeeCallBack::default_instance_ = new QueryFeeCallBack();
  QueryOrderRequest::default_instance_ = new QueryOrderRequest();
  QueryOrderCallBack::default_instance_ = new QueryOrderCallBack();
  QueryOrdersRequest::default_instance_ = new QueryOrdersRequest();
  QueryOrdersCallBack::default_instance_ = new QueryOrdersCallBack();
  SendCoinRequest::default_instance_ = new SendCoinRequest();
  RecieveCoinRequest::default_instance_ = new RecieveCoinRequest();
  TradedCallBack::default_instance_ = new TradedCallBack();
  CanceledCallBack::default_instance_ = new CanceledCallBack();
  CanceledRequest::default_instance_ = new CanceledRequest();
  RejectedCallBack::default_instance_ = new RejectedCallBack();
  RequestMessage::default_instance_ = new RequestMessage();
  CallBackMessage::default_instance_ = new CallBackMessage();
  enums::default_instance_->InitAsDefaultInstance();
  Order::default_instance_->InitAsDefaultInstance();
  CoinInfo::default_instance_->InitAsDefaultInstance();
  CoinCapital::default_instance_->InitAsDefaultInstance();
  UserInfo::default_instance_->InitAsDefaultInstance();
  HeartBeatRequest::default_instance_->InitAsDefaultInstance();
  HeartBeatCallBack::default_instance_->InitAsDefaultInstance();
  CheckAppId::default_instance_->InitAsDefaultInstance();
  CheckAppIdCallBack::default_instance_->InitAsDefaultInstance();
  CreateAccountRequest::default_instance_->InitAsDefaultInstance();
  CreateAccountCallBack::default_instance_->InitAsDefaultInstance();
  QueryBalanceRequest::default_instance_->InitAsDefaultInstance();
  QueryBalanceCallBack::default_instance_->InitAsDefaultInstance();
  QueryFeeRequest::default_instance_->InitAsDefaultInstance();
  QueryFeeCallBack::default_instance_->InitAsDefaultInstance();
  QueryOrderRequest::default_instance_->InitAsDefaultInstance();
  QueryOrderCallBack::default_instance_->InitAsDefaultInstance();
  QueryOrdersRequest::default_instance_->InitAsDefaultInstance();
  QueryOrdersCallBack::default_instance_->InitAsDefaultInstance();
  SendCoinRequest::default_instance_->InitAsDefaultInstance();
  RecieveCoinRequest::default_instance_->InitAsDefaultInstance();
  TradedCallBack::default_instance_->InitAsDefaultInstance();
  CanceledCallBack::default_instance_->InitAsDefaultInstance();
  CanceledRequest::default_instance_->InitAsDefaultInstance();
  RejectedCallBack::default_instance_->InitAsDefaultInstance();
  RequestMessage::default_instance_->InitAsDefaultInstance();
  CallBackMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_front_5fengine_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_front_5fengine_2eproto {
  StaticDescriptorInitializer_front_5fengine_2eproto() {
    protobuf_AddDesc_front_5fengine_2eproto();
  }
} static_descriptor_initializer_front_5fengine_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

const ::google::protobuf::EnumDescriptor* enums_OrderStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return enums_OrderStatus_descriptor_;
}
bool enums_OrderStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const enums_OrderStatus enums::NONE_ORDER_STATUS;
const enums_OrderStatus enums::TO_BE_REPORTED;
const enums_OrderStatus enums::REPORTED;
const enums_OrderStatus enums::PARTIAL_TRADED;
const enums_OrderStatus enums::PARTIAL_CANCELED;
const enums_OrderStatus enums::TRADED;
const enums_OrderStatus enums::REJECTED;
const enums_OrderStatus enums::OrderStatus_MIN;
const enums_OrderStatus enums::OrderStatus_MAX;
const int enums::OrderStatus_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* enums_CoinType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return enums_CoinType_descriptor_;
}
bool enums_CoinType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const enums_CoinType enums::NONE_COIN_TYPE;
const enums_CoinType enums::BTC;
const enums_CoinType enums::ETH;
const enums_CoinType enums::BUSD;
const enums_CoinType enums::CoinType_MIN;
const enums_CoinType enums::CoinType_MAX;
const int enums::CoinType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* enums_RequestType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return enums_RequestType_descriptor_;
}
bool enums_RequestType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const enums_RequestType enums::NONE_REQUEST_TYPE;
const enums_RequestType enums::CreateAccountRequest;
const enums_RequestType enums::QueryBalanceRequest;
const enums_RequestType enums::QueryFeeRequest;
const enums_RequestType enums::QueryOrderRequest;
const enums_RequestType enums::QueryOrdersRequest;
const enums_RequestType enums::SendCoinRequest;
const enums_RequestType enums::RecieveCoinRequest;
const enums_RequestType enums::HeartBeatRequest;
const enums_RequestType enums::CheckAppId;
const enums_RequestType enums::RequestType_MIN;
const enums_RequestType enums::RequestType_MAX;
const int enums::RequestType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* enums_CallBackType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return enums_CallBackType_descriptor_;
}
bool enums_CallBackType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const enums_CallBackType enums::NONE_CALLBACK_TYPE;
const enums_CallBackType enums::CreateAccountCallBack;
const enums_CallBackType enums::QueryBalanceCallBack;
const enums_CallBackType enums::QueryFeeCallBack;
const enums_CallBackType enums::QueryOrderCallBack;
const enums_CallBackType enums::QueryOrdersCallBack;
const enums_CallBackType enums::TradedCallBack;
const enums_CallBackType enums::CanceledCallBack;
const enums_CallBackType enums::RejectedCallBack;
const enums_CallBackType enums::HeartBeatCallBack;
const enums_CallBackType enums::CheckAppIdCallBack;
const enums_CallBackType enums::CallBackType_MIN;
const enums_CallBackType enums::CallBackType_MAX;
const int enums::CallBackType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
#endif  // !_MSC_VER

enums::enums()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:FrontEngine.enums)
}

void enums::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

enums::enums(const enums& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:FrontEngine.enums)
}

void enums::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

enums::~enums() {
  // @@protoc_insertion_point(destructor:FrontEngine.enums)
  SharedDtor();
}

void enums::SharedDtor() {
  if (this != default_instance_) {
  }
}

void enums::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* enums::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return enums_descriptor_;
}

const enums& enums::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_front_5fengine_2eproto();
  return *default_instance_;
}

enums* enums::default_instance_ = NULL;

enums* enums::New(::google::protobuf::Arena* arena) const {
  enums* n = new enums;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void enums::Clear() {
}

bool enums::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FrontEngine.enums)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:FrontEngine.enums)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FrontEngine.enums)
  return false;
#undef DO_
}

void enums::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FrontEngine.enums)
  // @@protoc_insertion_point(serialize_end:FrontEngine.enums)
}

::google::protobuf::uint8* enums::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:FrontEngine.enums)
  // @@protoc_insertion_point(serialize_to_array_end:FrontEngine.enums)
  return target;
}

int enums::ByteSize() const {
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void enums::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const enums* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const enums>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void enums::MergeFrom(const enums& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
}

void enums::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void enums::CopyFrom(const enums& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool enums::IsInitialized() const {

  return true;
}

void enums::Swap(enums* other) {
  if (other == this) return;
  InternalSwap(other);
}
void enums::InternalSwap(enums* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata enums::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = enums_descriptor_;
  metadata.reflection = enums_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// enums

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Order::kOrderIdFieldNumber;
const int Order::kTypeFieldNumber;
const int Order::kFromAddressFieldNumber;
const int Order::kToAddressFieldNumber;
const int Order::kDescriptionFieldNumber;
const int Order::kAmountFieldNumber;
const int Order::kFeeFieldNumber;
const int Order::kOrderDateFieldNumber;
const int Order::kOrderTimeFieldNumber;
const int Order::kStatusFieldNumber;
#endif  // !_MSC_VER

Order::Order()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:FrontEngine.Order)
}

void Order::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Order::Order(const Order& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:FrontEngine.Order)
}

void Order::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  order_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  from_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  to_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  amount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fee_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_date_ = 0;
  order_time_ = 0;
  status_ = 0;
}

Order::~Order() {
  // @@protoc_insertion_point(destructor:FrontEngine.Order)
  SharedDtor();
}

void Order::SharedDtor() {
  order_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  from_address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  to_address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  amount_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fee_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Order::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Order::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Order_descriptor_;
}

const Order& Order::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_front_5fengine_2eproto();
  return *default_instance_;
}

Order* Order::default_instance_ = NULL;

Order* Order::New(::google::protobuf::Arena* arena) const {
  Order* n = new Order;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Order::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Order*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(type_, order_date_);
  order_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  from_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  to_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  amount_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fee_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ZR_(order_time_, status_);

#undef ZR_HELPER_
#undef ZR_

}

bool Order::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FrontEngine.Order)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string order_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_order_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->order_id().data(), this->order_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "FrontEngine.Order.order_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .FrontEngine.enums.CoinType type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::FrontEngine::enums_CoinType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_from_address;
        break;
      }

      // optional string from_address = 3;
      case 3: {
        if (tag == 26) {
         parse_from_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->from_address().data(), this->from_address().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "FrontEngine.Order.from_address"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_to_address;
        break;
      }

      // optional string to_address = 4;
      case 4: {
        if (tag == 34) {
         parse_to_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_to_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->to_address().data(), this->to_address().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "FrontEngine.Order.to_address"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_description;
        break;
      }

      // optional string description = 5;
      case 5: {
        if (tag == 42) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "FrontEngine.Order.description"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_amount;
        break;
      }

      // optional string amount = 6;
      case 6: {
        if (tag == 50) {
         parse_amount:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_amount()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->amount().data(), this->amount().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "FrontEngine.Order.amount"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_fee;
        break;
      }

      // optional string fee = 7;
      case 7: {
        if (tag == 58) {
         parse_fee:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fee()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->fee().data(), this->fee().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "FrontEngine.Order.fee"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_order_date;
        break;
      }

      // optional int32 order_date = 8;
      case 8: {
        if (tag == 64) {
         parse_order_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &order_date_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_order_time;
        break;
      }

      // optional int32 order_time = 9;
      case 9: {
        if (tag == 72) {
         parse_order_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &order_time_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_status;
        break;
      }

      // optional .FrontEngine.enums.OrderStatus status = 10;
      case 10: {
        if (tag == 80) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::FrontEngine::enums_OrderStatus >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FrontEngine.Order)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FrontEngine.Order)
  return false;
#undef DO_
}

void Order::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FrontEngine.Order)
  // optional string order_id = 1;
  if (this->order_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->order_id().data(), this->order_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FrontEngine.Order.order_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->order_id(), output);
  }

  // optional .FrontEngine.enums.CoinType type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional string from_address = 3;
  if (this->from_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->from_address().data(), this->from_address().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FrontEngine.Order.from_address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->from_address(), output);
  }

  // optional string to_address = 4;
  if (this->to_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->to_address().data(), this->to_address().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FrontEngine.Order.to_address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->to_address(), output);
  }

  // optional string description = 5;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FrontEngine.Order.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->description(), output);
  }

  // optional string amount = 6;
  if (this->amount().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->amount().data(), this->amount().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FrontEngine.Order.amount");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->amount(), output);
  }

  // optional string fee = 7;
  if (this->fee().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fee().data(), this->fee().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FrontEngine.Order.fee");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->fee(), output);
  }

  // optional int32 order_date = 8;
  if (this->order_date() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->order_date(), output);
  }

  // optional int32 order_time = 9;
  if (this->order_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->order_time(), output);
  }

  // optional .FrontEngine.enums.OrderStatus status = 10;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->status(), output);
  }

  // @@protoc_insertion_point(serialize_end:FrontEngine.Order)
}

::google::protobuf::uint8* Order::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:FrontEngine.Order)
  // optional string order_id = 1;
  if (this->order_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->order_id().data(), this->order_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FrontEngine.Order.order_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->order_id(), target);
  }

  // optional .FrontEngine.enums.CoinType type = 2;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional string from_address = 3;
  if (this->from_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->from_address().data(), this->from_address().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FrontEngine.Order.from_address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->from_address(), target);
  }

  // optional string to_address = 4;
  if (this->to_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->to_address().data(), this->to_address().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FrontEngine.Order.to_address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->to_address(), target);
  }

  // optional string description = 5;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FrontEngine.Order.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->description(), target);
  }

  // optional string amount = 6;
  if (this->amount().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->amount().data(), this->amount().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FrontEngine.Order.amount");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->amount(), target);
  }

  // optional string fee = 7;
  if (this->fee().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fee().data(), this->fee().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FrontEngine.Order.fee");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->fee(), target);
  }

  // optional int32 order_date = 8;
  if (this->order_date() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->order_date(), target);
  }

  // optional int32 order_time = 9;
  if (this->order_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->order_time(), target);
  }

  // optional .FrontEngine.enums.OrderStatus status = 10;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->status(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:FrontEngine.Order)
  return target;
}

int Order::ByteSize() const {
  int total_size = 0;

  // optional string order_id = 1;
  if (this->order_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->order_id());
  }

  // optional .FrontEngine.enums.CoinType type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional string from_address = 3;
  if (this->from_address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->from_address());
  }

  // optional string to_address = 4;
  if (this->to_address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->to_address());
  }

  // optional string description = 5;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());
  }

  // optional string amount = 6;
  if (this->amount().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->amount());
  }

  // optional string fee = 7;
  if (this->fee().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->fee());
  }

  // optional int32 order_date = 8;
  if (this->order_date() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->order_date());
  }

  // optional int32 order_time = 9;
  if (this->order_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->order_time());
  }

  // optional .FrontEngine.enums.OrderStatus status = 10;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Order::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Order* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Order>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Order::MergeFrom(const Order& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.order_id().size() > 0) {

    order_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_id_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.from_address().size() > 0) {

    from_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_address_);
  }
  if (from.to_address().size() > 0) {

    to_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.to_address_);
  }
  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.amount().size() > 0) {

    amount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.amount_);
  }
  if (from.fee().size() > 0) {

    fee_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fee_);
  }
  if (from.order_date() != 0) {
    set_order_date(from.order_date());
  }
  if (from.order_time() != 0) {
    set_order_time(from.order_time());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void Order::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Order::CopyFrom(const Order& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Order::IsInitialized() const {

  return true;
}

void Order::Swap(Order* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Order::InternalSwap(Order* other) {
  order_id_.Swap(&other->order_id_);
  std::swap(type_, other->type_);
  from_address_.Swap(&other->from_address_);
  to_address_.Swap(&other->to_address_);
  description_.Swap(&other->description_);
  amount_.Swap(&other->amount_);
  fee_.Swap(&other->fee_);
  std::swap(order_date_, other->order_date_);
  std::swap(order_time_, other->order_time_);
  std::swap(status_, other->status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Order::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Order_descriptor_;
  metadata.reflection = Order_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Order

// optional string order_id = 1;
void Order::clear_order_id() {
  order_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Order::order_id() const {
  // @@protoc_insertion_point(field_get:FrontEngine.Order.order_id)
  return order_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Order::set_order_id(const ::std::string& value) {
  
  order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FrontEngine.Order.order_id)
}
 void Order::set_order_id(const char* value) {
  
  order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FrontEngine.Order.order_id)
}
 void Order::set_order_id(const char* value, size_t size) {
  
  order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FrontEngine.Order.order_id)
}
 ::std::string* Order::mutable_order_id() {
  
  // @@protoc_insertion_point(field_mutable:FrontEngine.Order.order_id)
  return order_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Order::release_order_id() {
  
  return order_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Order::set_allocated_order_id(::std::string* order_id) {
  if (order_id != NULL) {
    
  } else {
    
  }
  order_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), order_id);
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.Order.order_id)
}

// optional .FrontEngine.enums.CoinType type = 2;
void Order::clear_type() {
  type_ = 0;
}
 ::FrontEngine::enums_CoinType Order::type() const {
  // @@protoc_insertion_point(field_get:FrontEngine.Order.type)
  return static_cast< ::FrontEngine::enums_CoinType >(type_);
}
 void Order::set_type(::FrontEngine::enums_CoinType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:FrontEngine.Order.type)
}

// optional string from_address = 3;
void Order::clear_from_address() {
  from_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Order::from_address() const {
  // @@protoc_insertion_point(field_get:FrontEngine.Order.from_address)
  return from_address_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Order::set_from_address(const ::std::string& value) {
  
  from_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FrontEngine.Order.from_address)
}
 void Order::set_from_address(const char* value) {
  
  from_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FrontEngine.Order.from_address)
}
 void Order::set_from_address(const char* value, size_t size) {
  
  from_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FrontEngine.Order.from_address)
}
 ::std::string* Order::mutable_from_address() {
  
  // @@protoc_insertion_point(field_mutable:FrontEngine.Order.from_address)
  return from_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Order::release_from_address() {
  
  return from_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Order::set_allocated_from_address(::std::string* from_address) {
  if (from_address != NULL) {
    
  } else {
    
  }
  from_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from_address);
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.Order.from_address)
}

// optional string to_address = 4;
void Order::clear_to_address() {
  to_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Order::to_address() const {
  // @@protoc_insertion_point(field_get:FrontEngine.Order.to_address)
  return to_address_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Order::set_to_address(const ::std::string& value) {
  
  to_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FrontEngine.Order.to_address)
}
 void Order::set_to_address(const char* value) {
  
  to_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FrontEngine.Order.to_address)
}
 void Order::set_to_address(const char* value, size_t size) {
  
  to_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FrontEngine.Order.to_address)
}
 ::std::string* Order::mutable_to_address() {
  
  // @@protoc_insertion_point(field_mutable:FrontEngine.Order.to_address)
  return to_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Order::release_to_address() {
  
  return to_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Order::set_allocated_to_address(::std::string* to_address) {
  if (to_address != NULL) {
    
  } else {
    
  }
  to_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), to_address);
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.Order.to_address)
}

// optional string description = 5;
void Order::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Order::description() const {
  // @@protoc_insertion_point(field_get:FrontEngine.Order.description)
  return description_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Order::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FrontEngine.Order.description)
}
 void Order::set_description(const char* value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FrontEngine.Order.description)
}
 void Order::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FrontEngine.Order.description)
}
 ::std::string* Order::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:FrontEngine.Order.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Order::release_description() {
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Order::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.Order.description)
}

// optional string amount = 6;
void Order::clear_amount() {
  amount_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Order::amount() const {
  // @@protoc_insertion_point(field_get:FrontEngine.Order.amount)
  return amount_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Order::set_amount(const ::std::string& value) {
  
  amount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FrontEngine.Order.amount)
}
 void Order::set_amount(const char* value) {
  
  amount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FrontEngine.Order.amount)
}
 void Order::set_amount(const char* value, size_t size) {
  
  amount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FrontEngine.Order.amount)
}
 ::std::string* Order::mutable_amount() {
  
  // @@protoc_insertion_point(field_mutable:FrontEngine.Order.amount)
  return amount_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Order::release_amount() {
  
  return amount_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Order::set_allocated_amount(::std::string* amount) {
  if (amount != NULL) {
    
  } else {
    
  }
  amount_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), amount);
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.Order.amount)
}

// optional string fee = 7;
void Order::clear_fee() {
  fee_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Order::fee() const {
  // @@protoc_insertion_point(field_get:FrontEngine.Order.fee)
  return fee_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Order::set_fee(const ::std::string& value) {
  
  fee_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FrontEngine.Order.fee)
}
 void Order::set_fee(const char* value) {
  
  fee_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FrontEngine.Order.fee)
}
 void Order::set_fee(const char* value, size_t size) {
  
  fee_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FrontEngine.Order.fee)
}
 ::std::string* Order::mutable_fee() {
  
  // @@protoc_insertion_point(field_mutable:FrontEngine.Order.fee)
  return fee_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Order::release_fee() {
  
  return fee_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Order::set_allocated_fee(::std::string* fee) {
  if (fee != NULL) {
    
  } else {
    
  }
  fee_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fee);
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.Order.fee)
}

// optional int32 order_date = 8;
void Order::clear_order_date() {
  order_date_ = 0;
}
 ::google::protobuf::int32 Order::order_date() const {
  // @@protoc_insertion_point(field_get:FrontEngine.Order.order_date)
  return order_date_;
}
 void Order::set_order_date(::google::protobuf::int32 value) {
  
  order_date_ = value;
  // @@protoc_insertion_point(field_set:FrontEngine.Order.order_date)
}

// optional int32 order_time = 9;
void Order::clear_order_time() {
  order_time_ = 0;
}
 ::google::protobuf::int32 Order::order_time() const {
  // @@protoc_insertion_point(field_get:FrontEngine.Order.order_time)
  return order_time_;
}
 void Order::set_order_time(::google::protobuf::int32 value) {
  
  order_time_ = value;
  // @@protoc_insertion_point(field_set:FrontEngine.Order.order_time)
}

// optional .FrontEngine.enums.OrderStatus status = 10;
void Order::clear_status() {
  status_ = 0;
}
 ::FrontEngine::enums_OrderStatus Order::status() const {
  // @@protoc_insertion_point(field_get:FrontEngine.Order.status)
  return static_cast< ::FrontEngine::enums_OrderStatus >(status_);
}
 void Order::set_status(::FrontEngine::enums_OrderStatus value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:FrontEngine.Order.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CoinInfo::kTypeFieldNumber;
const int CoinInfo::kChNameFieldNumber;
const int CoinInfo::kEnNameFieldNumber;
const int CoinInfo::kBaseFeeFieldNumber;
#endif  // !_MSC_VER

CoinInfo::CoinInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:FrontEngine.CoinInfo)
}

void CoinInfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CoinInfo::CoinInfo(const CoinInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:FrontEngine.CoinInfo)
}

void CoinInfo::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0;
  ch_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  en_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  base_fee_ = 0;
}

CoinInfo::~CoinInfo() {
  // @@protoc_insertion_point(destructor:FrontEngine.CoinInfo)
  SharedDtor();
}

void CoinInfo::SharedDtor() {
  ch_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  en_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CoinInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CoinInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CoinInfo_descriptor_;
}

const CoinInfo& CoinInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_front_5fengine_2eproto();
  return *default_instance_;
}

CoinInfo* CoinInfo::default_instance_ = NULL;

CoinInfo* CoinInfo::New(::google::protobuf::Arena* arena) const {
  CoinInfo* n = new CoinInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CoinInfo::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CoinInfo*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(base_fee_, type_);
  ch_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  en_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool CoinInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FrontEngine.CoinInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .FrontEngine.enums.CoinType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::FrontEngine::enums_CoinType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ch_name;
        break;
      }

      // optional string ch_name = 2;
      case 2: {
        if (tag == 18) {
         parse_ch_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ch_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ch_name().data(), this->ch_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "FrontEngine.CoinInfo.ch_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_en_name;
        break;
      }

      // optional string en_name = 3;
      case 3: {
        if (tag == 26) {
         parse_en_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_en_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->en_name().data(), this->en_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "FrontEngine.CoinInfo.en_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_base_fee;
        break;
      }

      // optional double base_fee = 4;
      case 4: {
        if (tag == 33) {
         parse_base_fee:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &base_fee_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FrontEngine.CoinInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FrontEngine.CoinInfo)
  return false;
#undef DO_
}

void CoinInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FrontEngine.CoinInfo)
  // optional .FrontEngine.enums.CoinType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional string ch_name = 2;
  if (this->ch_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ch_name().data(), this->ch_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FrontEngine.CoinInfo.ch_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->ch_name(), output);
  }

  // optional string en_name = 3;
  if (this->en_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->en_name().data(), this->en_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FrontEngine.CoinInfo.en_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->en_name(), output);
  }

  // optional double base_fee = 4;
  if (this->base_fee() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->base_fee(), output);
  }

  // @@protoc_insertion_point(serialize_end:FrontEngine.CoinInfo)
}

::google::protobuf::uint8* CoinInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:FrontEngine.CoinInfo)
  // optional .FrontEngine.enums.CoinType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional string ch_name = 2;
  if (this->ch_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ch_name().data(), this->ch_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FrontEngine.CoinInfo.ch_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ch_name(), target);
  }

  // optional string en_name = 3;
  if (this->en_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->en_name().data(), this->en_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FrontEngine.CoinInfo.en_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->en_name(), target);
  }

  // optional double base_fee = 4;
  if (this->base_fee() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->base_fee(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:FrontEngine.CoinInfo)
  return target;
}

int CoinInfo::ByteSize() const {
  int total_size = 0;

  // optional .FrontEngine.enums.CoinType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional string ch_name = 2;
  if (this->ch_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ch_name());
  }

  // optional string en_name = 3;
  if (this->en_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->en_name());
  }

  // optional double base_fee = 4;
  if (this->base_fee() != 0) {
    total_size += 1 + 8;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CoinInfo::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CoinInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CoinInfo>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CoinInfo::MergeFrom(const CoinInfo& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.ch_name().size() > 0) {

    ch_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ch_name_);
  }
  if (from.en_name().size() > 0) {

    en_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.en_name_);
  }
  if (from.base_fee() != 0) {
    set_base_fee(from.base_fee());
  }
}

void CoinInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CoinInfo::CopyFrom(const CoinInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CoinInfo::IsInitialized() const {

  return true;
}

void CoinInfo::Swap(CoinInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CoinInfo::InternalSwap(CoinInfo* other) {
  std::swap(type_, other->type_);
  ch_name_.Swap(&other->ch_name_);
  en_name_.Swap(&other->en_name_);
  std::swap(base_fee_, other->base_fee_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CoinInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CoinInfo_descriptor_;
  metadata.reflection = CoinInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CoinInfo

// optional .FrontEngine.enums.CoinType type = 1;
void CoinInfo::clear_type() {
  type_ = 0;
}
 ::FrontEngine::enums_CoinType CoinInfo::type() const {
  // @@protoc_insertion_point(field_get:FrontEngine.CoinInfo.type)
  return static_cast< ::FrontEngine::enums_CoinType >(type_);
}
 void CoinInfo::set_type(::FrontEngine::enums_CoinType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:FrontEngine.CoinInfo.type)
}

// optional string ch_name = 2;
void CoinInfo::clear_ch_name() {
  ch_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& CoinInfo::ch_name() const {
  // @@protoc_insertion_point(field_get:FrontEngine.CoinInfo.ch_name)
  return ch_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CoinInfo::set_ch_name(const ::std::string& value) {
  
  ch_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FrontEngine.CoinInfo.ch_name)
}
 void CoinInfo::set_ch_name(const char* value) {
  
  ch_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FrontEngine.CoinInfo.ch_name)
}
 void CoinInfo::set_ch_name(const char* value, size_t size) {
  
  ch_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FrontEngine.CoinInfo.ch_name)
}
 ::std::string* CoinInfo::mutable_ch_name() {
  
  // @@protoc_insertion_point(field_mutable:FrontEngine.CoinInfo.ch_name)
  return ch_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CoinInfo::release_ch_name() {
  
  return ch_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CoinInfo::set_allocated_ch_name(::std::string* ch_name) {
  if (ch_name != NULL) {
    
  } else {
    
  }
  ch_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ch_name);
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.CoinInfo.ch_name)
}

// optional string en_name = 3;
void CoinInfo::clear_en_name() {
  en_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& CoinInfo::en_name() const {
  // @@protoc_insertion_point(field_get:FrontEngine.CoinInfo.en_name)
  return en_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CoinInfo::set_en_name(const ::std::string& value) {
  
  en_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FrontEngine.CoinInfo.en_name)
}
 void CoinInfo::set_en_name(const char* value) {
  
  en_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FrontEngine.CoinInfo.en_name)
}
 void CoinInfo::set_en_name(const char* value, size_t size) {
  
  en_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FrontEngine.CoinInfo.en_name)
}
 ::std::string* CoinInfo::mutable_en_name() {
  
  // @@protoc_insertion_point(field_mutable:FrontEngine.CoinInfo.en_name)
  return en_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CoinInfo::release_en_name() {
  
  return en_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CoinInfo::set_allocated_en_name(::std::string* en_name) {
  if (en_name != NULL) {
    
  } else {
    
  }
  en_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), en_name);
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.CoinInfo.en_name)
}

// optional double base_fee = 4;
void CoinInfo::clear_base_fee() {
  base_fee_ = 0;
}
 double CoinInfo::base_fee() const {
  // @@protoc_insertion_point(field_get:FrontEngine.CoinInfo.base_fee)
  return base_fee_;
}
 void CoinInfo::set_base_fee(double value) {
  
  base_fee_ = value;
  // @@protoc_insertion_point(field_set:FrontEngine.CoinInfo.base_fee)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CoinCapital::kAddressFieldNumber;
const int CoinCapital::kTypeFieldNumber;
const int CoinCapital::kAmountFieldNumber;
const int CoinCapital::kFrozenAmountFieldNumber;
#endif  // !_MSC_VER

CoinCapital::CoinCapital()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:FrontEngine.CoinCapital)
}

void CoinCapital::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CoinCapital::CoinCapital(const CoinCapital& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:FrontEngine.CoinCapital)
}

void CoinCapital::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  amount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  frozen_amount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CoinCapital::~CoinCapital() {
  // @@protoc_insertion_point(destructor:FrontEngine.CoinCapital)
  SharedDtor();
}

void CoinCapital::SharedDtor() {
  address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  amount_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  frozen_amount_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CoinCapital::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CoinCapital::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CoinCapital_descriptor_;
}

const CoinCapital& CoinCapital::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_front_5fengine_2eproto();
  return *default_instance_;
}

CoinCapital* CoinCapital::default_instance_ = NULL;

CoinCapital* CoinCapital::New(::google::protobuf::Arena* arena) const {
  CoinCapital* n = new CoinCapital;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CoinCapital::Clear() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  amount_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  frozen_amount_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool CoinCapital::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FrontEngine.CoinCapital)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string address = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->address().data(), this->address().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "FrontEngine.CoinCapital.address"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .FrontEngine.enums.CoinType type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::FrontEngine::enums_CoinType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_amount;
        break;
      }

      // optional string amount = 3;
      case 3: {
        if (tag == 26) {
         parse_amount:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_amount()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->amount().data(), this->amount().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "FrontEngine.CoinCapital.amount"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_frozen_amount;
        break;
      }

      // optional string frozen_amount = 4;
      case 4: {
        if (tag == 34) {
         parse_frozen_amount:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_frozen_amount()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->frozen_amount().data(), this->frozen_amount().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "FrontEngine.CoinCapital.frozen_amount"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FrontEngine.CoinCapital)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FrontEngine.CoinCapital)
  return false;
#undef DO_
}

void CoinCapital::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FrontEngine.CoinCapital)
  // optional string address = 1;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FrontEngine.CoinCapital.address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->address(), output);
  }

  // optional .FrontEngine.enums.CoinType type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional string amount = 3;
  if (this->amount().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->amount().data(), this->amount().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FrontEngine.CoinCapital.amount");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->amount(), output);
  }

  // optional string frozen_amount = 4;
  if (this->frozen_amount().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->frozen_amount().data(), this->frozen_amount().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FrontEngine.CoinCapital.frozen_amount");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->frozen_amount(), output);
  }

  // @@protoc_insertion_point(serialize_end:FrontEngine.CoinCapital)
}

::google::protobuf::uint8* CoinCapital::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:FrontEngine.CoinCapital)
  // optional string address = 1;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FrontEngine.CoinCapital.address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->address(), target);
  }

  // optional .FrontEngine.enums.CoinType type = 2;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional string amount = 3;
  if (this->amount().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->amount().data(), this->amount().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FrontEngine.CoinCapital.amount");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->amount(), target);
  }

  // optional string frozen_amount = 4;
  if (this->frozen_amount().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->frozen_amount().data(), this->frozen_amount().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FrontEngine.CoinCapital.frozen_amount");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->frozen_amount(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:FrontEngine.CoinCapital)
  return target;
}

int CoinCapital::ByteSize() const {
  int total_size = 0;

  // optional string address = 1;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->address());
  }

  // optional .FrontEngine.enums.CoinType type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional string amount = 3;
  if (this->amount().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->amount());
  }

  // optional string frozen_amount = 4;
  if (this->frozen_amount().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->frozen_amount());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CoinCapital::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CoinCapital* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CoinCapital>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CoinCapital::MergeFrom(const CoinCapital& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.address().size() > 0) {

    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.amount().size() > 0) {

    amount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.amount_);
  }
  if (from.frozen_amount().size() > 0) {

    frozen_amount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.frozen_amount_);
  }
}

void CoinCapital::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CoinCapital::CopyFrom(const CoinCapital& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CoinCapital::IsInitialized() const {

  return true;
}

void CoinCapital::Swap(CoinCapital* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CoinCapital::InternalSwap(CoinCapital* other) {
  address_.Swap(&other->address_);
  std::swap(type_, other->type_);
  amount_.Swap(&other->amount_);
  frozen_amount_.Swap(&other->frozen_amount_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CoinCapital::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CoinCapital_descriptor_;
  metadata.reflection = CoinCapital_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CoinCapital

// optional string address = 1;
void CoinCapital::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& CoinCapital::address() const {
  // @@protoc_insertion_point(field_get:FrontEngine.CoinCapital.address)
  return address_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CoinCapital::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FrontEngine.CoinCapital.address)
}
 void CoinCapital::set_address(const char* value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FrontEngine.CoinCapital.address)
}
 void CoinCapital::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FrontEngine.CoinCapital.address)
}
 ::std::string* CoinCapital::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:FrontEngine.CoinCapital.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CoinCapital::release_address() {
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CoinCapital::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.CoinCapital.address)
}

// optional .FrontEngine.enums.CoinType type = 2;
void CoinCapital::clear_type() {
  type_ = 0;
}
 ::FrontEngine::enums_CoinType CoinCapital::type() const {
  // @@protoc_insertion_point(field_get:FrontEngine.CoinCapital.type)
  return static_cast< ::FrontEngine::enums_CoinType >(type_);
}
 void CoinCapital::set_type(::FrontEngine::enums_CoinType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:FrontEngine.CoinCapital.type)
}

// optional string amount = 3;
void CoinCapital::clear_amount() {
  amount_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& CoinCapital::amount() const {
  // @@protoc_insertion_point(field_get:FrontEngine.CoinCapital.amount)
  return amount_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CoinCapital::set_amount(const ::std::string& value) {
  
  amount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FrontEngine.CoinCapital.amount)
}
 void CoinCapital::set_amount(const char* value) {
  
  amount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FrontEngine.CoinCapital.amount)
}
 void CoinCapital::set_amount(const char* value, size_t size) {
  
  amount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FrontEngine.CoinCapital.amount)
}
 ::std::string* CoinCapital::mutable_amount() {
  
  // @@protoc_insertion_point(field_mutable:FrontEngine.CoinCapital.amount)
  return amount_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CoinCapital::release_amount() {
  
  return amount_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CoinCapital::set_allocated_amount(::std::string* amount) {
  if (amount != NULL) {
    
  } else {
    
  }
  amount_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), amount);
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.CoinCapital.amount)
}

// optional string frozen_amount = 4;
void CoinCapital::clear_frozen_amount() {
  frozen_amount_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& CoinCapital::frozen_amount() const {
  // @@protoc_insertion_point(field_get:FrontEngine.CoinCapital.frozen_amount)
  return frozen_amount_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CoinCapital::set_frozen_amount(const ::std::string& value) {
  
  frozen_amount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FrontEngine.CoinCapital.frozen_amount)
}
 void CoinCapital::set_frozen_amount(const char* value) {
  
  frozen_amount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FrontEngine.CoinCapital.frozen_amount)
}
 void CoinCapital::set_frozen_amount(const char* value, size_t size) {
  
  frozen_amount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FrontEngine.CoinCapital.frozen_amount)
}
 ::std::string* CoinCapital::mutable_frozen_amount() {
  
  // @@protoc_insertion_point(field_mutable:FrontEngine.CoinCapital.frozen_amount)
  return frozen_amount_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CoinCapital::release_frozen_amount() {
  
  return frozen_amount_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CoinCapital::set_allocated_frozen_amount(::std::string* frozen_amount) {
  if (frozen_amount != NULL) {
    
  } else {
    
  }
  frozen_amount_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), frozen_amount);
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.CoinCapital.frozen_amount)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int UserInfo::kTypeFieldNumber;
const int UserInfo::kUsernameFieldNumber;
const int UserInfo::kPasswordFieldNumber;
const int UserInfo::kAddressFieldNumber;
#endif  // !_MSC_VER

UserInfo::UserInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:FrontEngine.UserInfo)
}

void UserInfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

UserInfo::UserInfo(const UserInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:FrontEngine.UserInfo)
}

void UserInfo::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0;
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

UserInfo::~UserInfo() {
  // @@protoc_insertion_point(destructor:FrontEngine.UserInfo)
  SharedDtor();
}

void UserInfo::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void UserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserInfo_descriptor_;
}

const UserInfo& UserInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_front_5fengine_2eproto();
  return *default_instance_;
}

UserInfo* UserInfo::default_instance_ = NULL;

UserInfo* UserInfo::New(::google::protobuf::Arena* arena) const {
  UserInfo* n = new UserInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserInfo::Clear() {
  type_ = 0;
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool UserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FrontEngine.UserInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .FrontEngine.enums.CoinType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::FrontEngine::enums_CoinType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_username;
        break;
      }

      // optional string username = 2;
      case 2: {
        if (tag == 18) {
         parse_username:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "FrontEngine.UserInfo.username"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_password;
        break;
      }

      // optional string password = 3;
      case 3: {
        if (tag == 26) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "FrontEngine.UserInfo.password"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_address;
        break;
      }

      // optional string address = 4;
      case 4: {
        if (tag == 34) {
         parse_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->address().data(), this->address().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "FrontEngine.UserInfo.address"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FrontEngine.UserInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FrontEngine.UserInfo)
  return false;
#undef DO_
}

void UserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FrontEngine.UserInfo)
  // optional .FrontEngine.enums.CoinType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional string username = 2;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FrontEngine.UserInfo.username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->username(), output);
  }

  // optional string password = 3;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FrontEngine.UserInfo.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->password(), output);
  }

  // optional string address = 4;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FrontEngine.UserInfo.address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->address(), output);
  }

  // @@protoc_insertion_point(serialize_end:FrontEngine.UserInfo)
}

::google::protobuf::uint8* UserInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:FrontEngine.UserInfo)
  // optional .FrontEngine.enums.CoinType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional string username = 2;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FrontEngine.UserInfo.username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->username(), target);
  }

  // optional string password = 3;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FrontEngine.UserInfo.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->password(), target);
  }

  // optional string address = 4;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FrontEngine.UserInfo.address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->address(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:FrontEngine.UserInfo)
  return target;
}

int UserInfo::ByteSize() const {
  int total_size = 0;

  // optional .FrontEngine.enums.CoinType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional string username = 2;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());
  }

  // optional string password = 3;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());
  }

  // optional string address = 4;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->address());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserInfo::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const UserInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const UserInfo>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserInfo::MergeFrom(const UserInfo& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.username().size() > 0) {

    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  if (from.password().size() > 0) {

    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  if (from.address().size() > 0) {

    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
}

void UserInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserInfo::CopyFrom(const UserInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserInfo::IsInitialized() const {

  return true;
}

void UserInfo::Swap(UserInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserInfo::InternalSwap(UserInfo* other) {
  std::swap(type_, other->type_);
  username_.Swap(&other->username_);
  password_.Swap(&other->password_);
  address_.Swap(&other->address_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserInfo_descriptor_;
  metadata.reflection = UserInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserInfo

// optional .FrontEngine.enums.CoinType type = 1;
void UserInfo::clear_type() {
  type_ = 0;
}
 ::FrontEngine::enums_CoinType UserInfo::type() const {
  // @@protoc_insertion_point(field_get:FrontEngine.UserInfo.type)
  return static_cast< ::FrontEngine::enums_CoinType >(type_);
}
 void UserInfo::set_type(::FrontEngine::enums_CoinType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:FrontEngine.UserInfo.type)
}

// optional string username = 2;
void UserInfo::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& UserInfo::username() const {
  // @@protoc_insertion_point(field_get:FrontEngine.UserInfo.username)
  return username_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserInfo::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FrontEngine.UserInfo.username)
}
 void UserInfo::set_username(const char* value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FrontEngine.UserInfo.username)
}
 void UserInfo::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FrontEngine.UserInfo.username)
}
 ::std::string* UserInfo::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:FrontEngine.UserInfo.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UserInfo::release_username() {
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserInfo::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.UserInfo.username)
}

// optional string password = 3;
void UserInfo::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& UserInfo::password() const {
  // @@protoc_insertion_point(field_get:FrontEngine.UserInfo.password)
  return password_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserInfo::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FrontEngine.UserInfo.password)
}
 void UserInfo::set_password(const char* value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FrontEngine.UserInfo.password)
}
 void UserInfo::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FrontEngine.UserInfo.password)
}
 ::std::string* UserInfo::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:FrontEngine.UserInfo.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UserInfo::release_password() {
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserInfo::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.UserInfo.password)
}

// optional string address = 4;
void UserInfo::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& UserInfo::address() const {
  // @@protoc_insertion_point(field_get:FrontEngine.UserInfo.address)
  return address_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserInfo::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FrontEngine.UserInfo.address)
}
 void UserInfo::set_address(const char* value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FrontEngine.UserInfo.address)
}
 void UserInfo::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FrontEngine.UserInfo.address)
}
 ::std::string* UserInfo::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:FrontEngine.UserInfo.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UserInfo::release_address() {
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserInfo::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.UserInfo.address)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int HeartBeatRequest::kRequestIdFieldNumber;
const int HeartBeatRequest::kDataFieldNumber;
#endif  // !_MSC_VER

HeartBeatRequest::HeartBeatRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:FrontEngine.HeartBeatRequest)
}

void HeartBeatRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

HeartBeatRequest::HeartBeatRequest(const HeartBeatRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:FrontEngine.HeartBeatRequest)
}

void HeartBeatRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

HeartBeatRequest::~HeartBeatRequest() {
  // @@protoc_insertion_point(destructor:FrontEngine.HeartBeatRequest)
  SharedDtor();
}

void HeartBeatRequest::SharedDtor() {
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void HeartBeatRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeartBeatRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeartBeatRequest_descriptor_;
}

const HeartBeatRequest& HeartBeatRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_front_5fengine_2eproto();
  return *default_instance_;
}

HeartBeatRequest* HeartBeatRequest::default_instance_ = NULL;

HeartBeatRequest* HeartBeatRequest::New(::google::protobuf::Arena* arena) const {
  HeartBeatRequest* n = new HeartBeatRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HeartBeatRequest::Clear() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool HeartBeatRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FrontEngine.HeartBeatRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string request_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->request_id().data(), this->request_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "FrontEngine.HeartBeatRequest.request_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional string data = 2;
      case 2: {
        if (tag == 18) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->data().data(), this->data().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "FrontEngine.HeartBeatRequest.data"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FrontEngine.HeartBeatRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FrontEngine.HeartBeatRequest)
  return false;
#undef DO_
}

void HeartBeatRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FrontEngine.HeartBeatRequest)
  // optional string request_id = 1;
  if (this->request_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_id().data(), this->request_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FrontEngine.HeartBeatRequest.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->request_id(), output);
  }

  // optional string data = 2;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FrontEngine.HeartBeatRequest.data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->data(), output);
  }

  // @@protoc_insertion_point(serialize_end:FrontEngine.HeartBeatRequest)
}

::google::protobuf::uint8* HeartBeatRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:FrontEngine.HeartBeatRequest)
  // optional string request_id = 1;
  if (this->request_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_id().data(), this->request_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FrontEngine.HeartBeatRequest.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->request_id(), target);
  }

  // optional string data = 2;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FrontEngine.HeartBeatRequest.data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->data(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:FrontEngine.HeartBeatRequest)
  return target;
}

int HeartBeatRequest::ByteSize() const {
  int total_size = 0;

  // optional string request_id = 1;
  if (this->request_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->request_id());
  }

  // optional string data = 2;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->data());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeartBeatRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const HeartBeatRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const HeartBeatRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeartBeatRequest::MergeFrom(const HeartBeatRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.request_id().size() > 0) {

    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
}

void HeartBeatRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeartBeatRequest::CopyFrom(const HeartBeatRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartBeatRequest::IsInitialized() const {

  return true;
}

void HeartBeatRequest::Swap(HeartBeatRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HeartBeatRequest::InternalSwap(HeartBeatRequest* other) {
  request_id_.Swap(&other->request_id_);
  data_.Swap(&other->data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HeartBeatRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeartBeatRequest_descriptor_;
  metadata.reflection = HeartBeatRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HeartBeatRequest

// optional string request_id = 1;
void HeartBeatRequest::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& HeartBeatRequest::request_id() const {
  // @@protoc_insertion_point(field_get:FrontEngine.HeartBeatRequest.request_id)
  return request_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void HeartBeatRequest::set_request_id(const ::std::string& value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FrontEngine.HeartBeatRequest.request_id)
}
 void HeartBeatRequest::set_request_id(const char* value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FrontEngine.HeartBeatRequest.request_id)
}
 void HeartBeatRequest::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FrontEngine.HeartBeatRequest.request_id)
}
 ::std::string* HeartBeatRequest::mutable_request_id() {
  
  // @@protoc_insertion_point(field_mutable:FrontEngine.HeartBeatRequest.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* HeartBeatRequest::release_request_id() {
  
  return request_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void HeartBeatRequest::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.HeartBeatRequest.request_id)
}

// optional string data = 2;
void HeartBeatRequest::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& HeartBeatRequest::data() const {
  // @@protoc_insertion_point(field_get:FrontEngine.HeartBeatRequest.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void HeartBeatRequest::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FrontEngine.HeartBeatRequest.data)
}
 void HeartBeatRequest::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FrontEngine.HeartBeatRequest.data)
}
 void HeartBeatRequest::set_data(const char* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FrontEngine.HeartBeatRequest.data)
}
 ::std::string* HeartBeatRequest::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:FrontEngine.HeartBeatRequest.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* HeartBeatRequest::release_data() {
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void HeartBeatRequest::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.HeartBeatRequest.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int HeartBeatCallBack::kRequestIdFieldNumber;
const int HeartBeatCallBack::kDataFieldNumber;
#endif  // !_MSC_VER

HeartBeatCallBack::HeartBeatCallBack()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:FrontEngine.HeartBeatCallBack)
}

void HeartBeatCallBack::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

HeartBeatCallBack::HeartBeatCallBack(const HeartBeatCallBack& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:FrontEngine.HeartBeatCallBack)
}

void HeartBeatCallBack::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

HeartBeatCallBack::~HeartBeatCallBack() {
  // @@protoc_insertion_point(destructor:FrontEngine.HeartBeatCallBack)
  SharedDtor();
}

void HeartBeatCallBack::SharedDtor() {
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void HeartBeatCallBack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeartBeatCallBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeartBeatCallBack_descriptor_;
}

const HeartBeatCallBack& HeartBeatCallBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_front_5fengine_2eproto();
  return *default_instance_;
}

HeartBeatCallBack* HeartBeatCallBack::default_instance_ = NULL;

HeartBeatCallBack* HeartBeatCallBack::New(::google::protobuf::Arena* arena) const {
  HeartBeatCallBack* n = new HeartBeatCallBack;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HeartBeatCallBack::Clear() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool HeartBeatCallBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FrontEngine.HeartBeatCallBack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string request_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->request_id().data(), this->request_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "FrontEngine.HeartBeatCallBack.request_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional string data = 2;
      case 2: {
        if (tag == 18) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->data().data(), this->data().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "FrontEngine.HeartBeatCallBack.data"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FrontEngine.HeartBeatCallBack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FrontEngine.HeartBeatCallBack)
  return false;
#undef DO_
}

void HeartBeatCallBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FrontEngine.HeartBeatCallBack)
  // optional string request_id = 1;
  if (this->request_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_id().data(), this->request_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FrontEngine.HeartBeatCallBack.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->request_id(), output);
  }

  // optional string data = 2;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FrontEngine.HeartBeatCallBack.data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->data(), output);
  }

  // @@protoc_insertion_point(serialize_end:FrontEngine.HeartBeatCallBack)
}

::google::protobuf::uint8* HeartBeatCallBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:FrontEngine.HeartBeatCallBack)
  // optional string request_id = 1;
  if (this->request_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_id().data(), this->request_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FrontEngine.HeartBeatCallBack.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->request_id(), target);
  }

  // optional string data = 2;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FrontEngine.HeartBeatCallBack.data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->data(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:FrontEngine.HeartBeatCallBack)
  return target;
}

int HeartBeatCallBack::ByteSize() const {
  int total_size = 0;

  // optional string request_id = 1;
  if (this->request_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->request_id());
  }

  // optional string data = 2;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->data());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeartBeatCallBack::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const HeartBeatCallBack* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const HeartBeatCallBack>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeartBeatCallBack::MergeFrom(const HeartBeatCallBack& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.request_id().size() > 0) {

    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
}

void HeartBeatCallBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeartBeatCallBack::CopyFrom(const HeartBeatCallBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartBeatCallBack::IsInitialized() const {

  return true;
}

void HeartBeatCallBack::Swap(HeartBeatCallBack* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HeartBeatCallBack::InternalSwap(HeartBeatCallBack* other) {
  request_id_.Swap(&other->request_id_);
  data_.Swap(&other->data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HeartBeatCallBack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeartBeatCallBack_descriptor_;
  metadata.reflection = HeartBeatCallBack_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HeartBeatCallBack

// optional string request_id = 1;
void HeartBeatCallBack::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& HeartBeatCallBack::request_id() const {
  // @@protoc_insertion_point(field_get:FrontEngine.HeartBeatCallBack.request_id)
  return request_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void HeartBeatCallBack::set_request_id(const ::std::string& value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FrontEngine.HeartBeatCallBack.request_id)
}
 void HeartBeatCallBack::set_request_id(const char* value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FrontEngine.HeartBeatCallBack.request_id)
}
 void HeartBeatCallBack::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FrontEngine.HeartBeatCallBack.request_id)
}
 ::std::string* HeartBeatCallBack::mutable_request_id() {
  
  // @@protoc_insertion_point(field_mutable:FrontEngine.HeartBeatCallBack.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* HeartBeatCallBack::release_request_id() {
  
  return request_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void HeartBeatCallBack::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.HeartBeatCallBack.request_id)
}

// optional string data = 2;
void HeartBeatCallBack::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& HeartBeatCallBack::data() const {
  // @@protoc_insertion_point(field_get:FrontEngine.HeartBeatCallBack.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void HeartBeatCallBack::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FrontEngine.HeartBeatCallBack.data)
}
 void HeartBeatCallBack::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FrontEngine.HeartBeatCallBack.data)
}
 void HeartBeatCallBack::set_data(const char* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FrontEngine.HeartBeatCallBack.data)
}
 ::std::string* HeartBeatCallBack::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:FrontEngine.HeartBeatCallBack.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* HeartBeatCallBack::release_data() {
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void HeartBeatCallBack::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.HeartBeatCallBack.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CheckAppId::kRequestIdFieldNumber;
const int CheckAppId::kAppIdFieldNumber;
#endif  // !_MSC_VER

CheckAppId::CheckAppId()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:FrontEngine.CheckAppId)
}

void CheckAppId::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CheckAppId::CheckAppId(const CheckAppId& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:FrontEngine.CheckAppId)
}

void CheckAppId::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  app_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CheckAppId::~CheckAppId() {
  // @@protoc_insertion_point(destructor:FrontEngine.CheckAppId)
  SharedDtor();
}

void CheckAppId::SharedDtor() {
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  app_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CheckAppId::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CheckAppId::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CheckAppId_descriptor_;
}

const CheckAppId& CheckAppId::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_front_5fengine_2eproto();
  return *default_instance_;
}

CheckAppId* CheckAppId::default_instance_ = NULL;

CheckAppId* CheckAppId::New(::google::protobuf::Arena* arena) const {
  CheckAppId* n = new CheckAppId;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CheckAppId::Clear() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  app_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool CheckAppId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FrontEngine.CheckAppId)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string request_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->request_id().data(), this->request_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "FrontEngine.CheckAppId.request_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_app_id;
        break;
      }

      // optional string app_id = 2;
      case 2: {
        if (tag == 18) {
         parse_app_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_app_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->app_id().data(), this->app_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "FrontEngine.CheckAppId.app_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FrontEngine.CheckAppId)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FrontEngine.CheckAppId)
  return false;
#undef DO_
}

void CheckAppId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FrontEngine.CheckAppId)
  // optional string request_id = 1;
  if (this->request_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_id().data(), this->request_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FrontEngine.CheckAppId.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->request_id(), output);
  }

  // optional string app_id = 2;
  if (this->app_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->app_id().data(), this->app_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FrontEngine.CheckAppId.app_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->app_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:FrontEngine.CheckAppId)
}

::google::protobuf::uint8* CheckAppId::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:FrontEngine.CheckAppId)
  // optional string request_id = 1;
  if (this->request_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_id().data(), this->request_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FrontEngine.CheckAppId.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->request_id(), target);
  }

  // optional string app_id = 2;
  if (this->app_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->app_id().data(), this->app_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FrontEngine.CheckAppId.app_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->app_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:FrontEngine.CheckAppId)
  return target;
}

int CheckAppId::ByteSize() const {
  int total_size = 0;

  // optional string request_id = 1;
  if (this->request_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->request_id());
  }

  // optional string app_id = 2;
  if (this->app_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->app_id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CheckAppId::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CheckAppId* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CheckAppId>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CheckAppId::MergeFrom(const CheckAppId& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.request_id().size() > 0) {

    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  if (from.app_id().size() > 0) {

    app_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.app_id_);
  }
}

void CheckAppId::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckAppId::CopyFrom(const CheckAppId& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckAppId::IsInitialized() const {

  return true;
}

void CheckAppId::Swap(CheckAppId* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CheckAppId::InternalSwap(CheckAppId* other) {
  request_id_.Swap(&other->request_id_);
  app_id_.Swap(&other->app_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CheckAppId::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CheckAppId_descriptor_;
  metadata.reflection = CheckAppId_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CheckAppId

// optional string request_id = 1;
void CheckAppId::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& CheckAppId::request_id() const {
  // @@protoc_insertion_point(field_get:FrontEngine.CheckAppId.request_id)
  return request_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CheckAppId::set_request_id(const ::std::string& value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FrontEngine.CheckAppId.request_id)
}
 void CheckAppId::set_request_id(const char* value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FrontEngine.CheckAppId.request_id)
}
 void CheckAppId::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FrontEngine.CheckAppId.request_id)
}
 ::std::string* CheckAppId::mutable_request_id() {
  
  // @@protoc_insertion_point(field_mutable:FrontEngine.CheckAppId.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CheckAppId::release_request_id() {
  
  return request_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CheckAppId::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.CheckAppId.request_id)
}

// optional string app_id = 2;
void CheckAppId::clear_app_id() {
  app_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& CheckAppId::app_id() const {
  // @@protoc_insertion_point(field_get:FrontEngine.CheckAppId.app_id)
  return app_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CheckAppId::set_app_id(const ::std::string& value) {
  
  app_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FrontEngine.CheckAppId.app_id)
}
 void CheckAppId::set_app_id(const char* value) {
  
  app_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FrontEngine.CheckAppId.app_id)
}
 void CheckAppId::set_app_id(const char* value, size_t size) {
  
  app_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FrontEngine.CheckAppId.app_id)
}
 ::std::string* CheckAppId::mutable_app_id() {
  
  // @@protoc_insertion_point(field_mutable:FrontEngine.CheckAppId.app_id)
  return app_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CheckAppId::release_app_id() {
  
  return app_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CheckAppId::set_allocated_app_id(::std::string* app_id) {
  if (app_id != NULL) {
    
  } else {
    
  }
  app_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), app_id);
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.CheckAppId.app_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CheckAppIdCallBack::kRequestIdFieldNumber;
const int CheckAppIdCallBack::kAppIdFieldNumber;
const int CheckAppIdCallBack::kSdkIdFieldNumber;
#endif  // !_MSC_VER

CheckAppIdCallBack::CheckAppIdCallBack()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:FrontEngine.CheckAppIdCallBack)
}

void CheckAppIdCallBack::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CheckAppIdCallBack::CheckAppIdCallBack(const CheckAppIdCallBack& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:FrontEngine.CheckAppIdCallBack)
}

void CheckAppIdCallBack::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  app_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sdk_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CheckAppIdCallBack::~CheckAppIdCallBack() {
  // @@protoc_insertion_point(destructor:FrontEngine.CheckAppIdCallBack)
  SharedDtor();
}

void CheckAppIdCallBack::SharedDtor() {
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  app_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sdk_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CheckAppIdCallBack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CheckAppIdCallBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CheckAppIdCallBack_descriptor_;
}

const CheckAppIdCallBack& CheckAppIdCallBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_front_5fengine_2eproto();
  return *default_instance_;
}

CheckAppIdCallBack* CheckAppIdCallBack::default_instance_ = NULL;

CheckAppIdCallBack* CheckAppIdCallBack::New(::google::protobuf::Arena* arena) const {
  CheckAppIdCallBack* n = new CheckAppIdCallBack;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CheckAppIdCallBack::Clear() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  app_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sdk_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool CheckAppIdCallBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FrontEngine.CheckAppIdCallBack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string request_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->request_id().data(), this->request_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "FrontEngine.CheckAppIdCallBack.request_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_app_id;
        break;
      }

      // optional string app_id = 2;
      case 2: {
        if (tag == 18) {
         parse_app_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_app_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->app_id().data(), this->app_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "FrontEngine.CheckAppIdCallBack.app_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_sdk_id;
        break;
      }

      // optional string sdk_id = 3;
      case 3: {
        if (tag == 26) {
         parse_sdk_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sdk_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sdk_id().data(), this->sdk_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "FrontEngine.CheckAppIdCallBack.sdk_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FrontEngine.CheckAppIdCallBack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FrontEngine.CheckAppIdCallBack)
  return false;
#undef DO_
}

void CheckAppIdCallBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FrontEngine.CheckAppIdCallBack)
  // optional string request_id = 1;
  if (this->request_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_id().data(), this->request_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FrontEngine.CheckAppIdCallBack.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->request_id(), output);
  }

  // optional string app_id = 2;
  if (this->app_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->app_id().data(), this->app_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FrontEngine.CheckAppIdCallBack.app_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->app_id(), output);
  }

  // optional string sdk_id = 3;
  if (this->sdk_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sdk_id().data(), this->sdk_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FrontEngine.CheckAppIdCallBack.sdk_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->sdk_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:FrontEngine.CheckAppIdCallBack)
}

::google::protobuf::uint8* CheckAppIdCallBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:FrontEngine.CheckAppIdCallBack)
  // optional string request_id = 1;
  if (this->request_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_id().data(), this->request_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FrontEngine.CheckAppIdCallBack.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->request_id(), target);
  }

  // optional string app_id = 2;
  if (this->app_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->app_id().data(), this->app_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FrontEngine.CheckAppIdCallBack.app_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->app_id(), target);
  }

  // optional string sdk_id = 3;
  if (this->sdk_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sdk_id().data(), this->sdk_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FrontEngine.CheckAppIdCallBack.sdk_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->sdk_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:FrontEngine.CheckAppIdCallBack)
  return target;
}

int CheckAppIdCallBack::ByteSize() const {
  int total_size = 0;

  // optional string request_id = 1;
  if (this->request_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->request_id());
  }

  // optional string app_id = 2;
  if (this->app_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->app_id());
  }

  // optional string sdk_id = 3;
  if (this->sdk_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sdk_id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CheckAppIdCallBack::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CheckAppIdCallBack* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CheckAppIdCallBack>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CheckAppIdCallBack::MergeFrom(const CheckAppIdCallBack& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.request_id().size() > 0) {

    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  if (from.app_id().size() > 0) {

    app_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.app_id_);
  }
  if (from.sdk_id().size() > 0) {

    sdk_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sdk_id_);
  }
}

void CheckAppIdCallBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckAppIdCallBack::CopyFrom(const CheckAppIdCallBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckAppIdCallBack::IsInitialized() const {

  return true;
}

void CheckAppIdCallBack::Swap(CheckAppIdCallBack* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CheckAppIdCallBack::InternalSwap(CheckAppIdCallBack* other) {
  request_id_.Swap(&other->request_id_);
  app_id_.Swap(&other->app_id_);
  sdk_id_.Swap(&other->sdk_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CheckAppIdCallBack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CheckAppIdCallBack_descriptor_;
  metadata.reflection = CheckAppIdCallBack_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CheckAppIdCallBack

// optional string request_id = 1;
void CheckAppIdCallBack::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& CheckAppIdCallBack::request_id() const {
  // @@protoc_insertion_point(field_get:FrontEngine.CheckAppIdCallBack.request_id)
  return request_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CheckAppIdCallBack::set_request_id(const ::std::string& value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FrontEngine.CheckAppIdCallBack.request_id)
}
 void CheckAppIdCallBack::set_request_id(const char* value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FrontEngine.CheckAppIdCallBack.request_id)
}
 void CheckAppIdCallBack::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FrontEngine.CheckAppIdCallBack.request_id)
}
 ::std::string* CheckAppIdCallBack::mutable_request_id() {
  
  // @@protoc_insertion_point(field_mutable:FrontEngine.CheckAppIdCallBack.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CheckAppIdCallBack::release_request_id() {
  
  return request_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CheckAppIdCallBack::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.CheckAppIdCallBack.request_id)
}

// optional string app_id = 2;
void CheckAppIdCallBack::clear_app_id() {
  app_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& CheckAppIdCallBack::app_id() const {
  // @@protoc_insertion_point(field_get:FrontEngine.CheckAppIdCallBack.app_id)
  return app_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CheckAppIdCallBack::set_app_id(const ::std::string& value) {
  
  app_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FrontEngine.CheckAppIdCallBack.app_id)
}
 void CheckAppIdCallBack::set_app_id(const char* value) {
  
  app_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FrontEngine.CheckAppIdCallBack.app_id)
}
 void CheckAppIdCallBack::set_app_id(const char* value, size_t size) {
  
  app_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FrontEngine.CheckAppIdCallBack.app_id)
}
 ::std::string* CheckAppIdCallBack::mutable_app_id() {
  
  // @@protoc_insertion_point(field_mutable:FrontEngine.CheckAppIdCallBack.app_id)
  return app_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CheckAppIdCallBack::release_app_id() {
  
  return app_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CheckAppIdCallBack::set_allocated_app_id(::std::string* app_id) {
  if (app_id != NULL) {
    
  } else {
    
  }
  app_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), app_id);
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.CheckAppIdCallBack.app_id)
}

// optional string sdk_id = 3;
void CheckAppIdCallBack::clear_sdk_id() {
  sdk_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& CheckAppIdCallBack::sdk_id() const {
  // @@protoc_insertion_point(field_get:FrontEngine.CheckAppIdCallBack.sdk_id)
  return sdk_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CheckAppIdCallBack::set_sdk_id(const ::std::string& value) {
  
  sdk_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FrontEngine.CheckAppIdCallBack.sdk_id)
}
 void CheckAppIdCallBack::set_sdk_id(const char* value) {
  
  sdk_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FrontEngine.CheckAppIdCallBack.sdk_id)
}
 void CheckAppIdCallBack::set_sdk_id(const char* value, size_t size) {
  
  sdk_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FrontEngine.CheckAppIdCallBack.sdk_id)
}
 ::std::string* CheckAppIdCallBack::mutable_sdk_id() {
  
  // @@protoc_insertion_point(field_mutable:FrontEngine.CheckAppIdCallBack.sdk_id)
  return sdk_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CheckAppIdCallBack::release_sdk_id() {
  
  return sdk_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CheckAppIdCallBack::set_allocated_sdk_id(::std::string* sdk_id) {
  if (sdk_id != NULL) {
    
  } else {
    
  }
  sdk_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sdk_id);
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.CheckAppIdCallBack.sdk_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CreateAccountRequest::kRequestIdFieldNumber;
const int CreateAccountRequest::kCoinTypeFieldNumber;
const int CreateAccountRequest::kUsernameFieldNumber;
const int CreateAccountRequest::kPasswordFieldNumber;
#endif  // !_MSC_VER

CreateAccountRequest::CreateAccountRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:FrontEngine.CreateAccountRequest)
}

void CreateAccountRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CreateAccountRequest::CreateAccountRequest(const CreateAccountRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:FrontEngine.CreateAccountRequest)
}

void CreateAccountRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  coin_type_ = 0;
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CreateAccountRequest::~CreateAccountRequest() {
  // @@protoc_insertion_point(destructor:FrontEngine.CreateAccountRequest)
  SharedDtor();
}

void CreateAccountRequest::SharedDtor() {
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CreateAccountRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateAccountRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateAccountRequest_descriptor_;
}

const CreateAccountRequest& CreateAccountRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_front_5fengine_2eproto();
  return *default_instance_;
}

CreateAccountRequest* CreateAccountRequest::default_instance_ = NULL;

CreateAccountRequest* CreateAccountRequest::New(::google::protobuf::Arena* arena) const {
  CreateAccountRequest* n = new CreateAccountRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CreateAccountRequest::Clear() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  coin_type_ = 0;
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool CreateAccountRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FrontEngine.CreateAccountRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string request_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->request_id().data(), this->request_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "FrontEngine.CreateAccountRequest.request_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_coin_type;
        break;
      }

      // optional .FrontEngine.enums.CoinType coin_type = 2;
      case 2: {
        if (tag == 16) {
         parse_coin_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_coin_type(static_cast< ::FrontEngine::enums_CoinType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_username;
        break;
      }

      // optional string username = 3;
      case 3: {
        if (tag == 26) {
         parse_username:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "FrontEngine.CreateAccountRequest.username"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_password;
        break;
      }

      // optional string password = 4;
      case 4: {
        if (tag == 34) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "FrontEngine.CreateAccountRequest.password"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FrontEngine.CreateAccountRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FrontEngine.CreateAccountRequest)
  return false;
#undef DO_
}

void CreateAccountRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FrontEngine.CreateAccountRequest)
  // optional string request_id = 1;
  if (this->request_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_id().data(), this->request_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FrontEngine.CreateAccountRequest.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->request_id(), output);
  }

  // optional .FrontEngine.enums.CoinType coin_type = 2;
  if (this->coin_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->coin_type(), output);
  }

  // optional string username = 3;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FrontEngine.CreateAccountRequest.username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->username(), output);
  }

  // optional string password = 4;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FrontEngine.CreateAccountRequest.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->password(), output);
  }

  // @@protoc_insertion_point(serialize_end:FrontEngine.CreateAccountRequest)
}

::google::protobuf::uint8* CreateAccountRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:FrontEngine.CreateAccountRequest)
  // optional string request_id = 1;
  if (this->request_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_id().data(), this->request_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FrontEngine.CreateAccountRequest.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->request_id(), target);
  }

  // optional .FrontEngine.enums.CoinType coin_type = 2;
  if (this->coin_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->coin_type(), target);
  }

  // optional string username = 3;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FrontEngine.CreateAccountRequest.username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->username(), target);
  }

  // optional string password = 4;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FrontEngine.CreateAccountRequest.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->password(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:FrontEngine.CreateAccountRequest)
  return target;
}

int CreateAccountRequest::ByteSize() const {
  int total_size = 0;

  // optional string request_id = 1;
  if (this->request_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->request_id());
  }

  // optional .FrontEngine.enums.CoinType coin_type = 2;
  if (this->coin_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->coin_type());
  }

  // optional string username = 3;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());
  }

  // optional string password = 4;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateAccountRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CreateAccountRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CreateAccountRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateAccountRequest::MergeFrom(const CreateAccountRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.request_id().size() > 0) {

    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  if (from.coin_type() != 0) {
    set_coin_type(from.coin_type());
  }
  if (from.username().size() > 0) {

    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  if (from.password().size() > 0) {

    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
}

void CreateAccountRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateAccountRequest::CopyFrom(const CreateAccountRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateAccountRequest::IsInitialized() const {

  return true;
}

void CreateAccountRequest::Swap(CreateAccountRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateAccountRequest::InternalSwap(CreateAccountRequest* other) {
  request_id_.Swap(&other->request_id_);
  std::swap(coin_type_, other->coin_type_);
  username_.Swap(&other->username_);
  password_.Swap(&other->password_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CreateAccountRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateAccountRequest_descriptor_;
  metadata.reflection = CreateAccountRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CreateAccountRequest

// optional string request_id = 1;
void CreateAccountRequest::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& CreateAccountRequest::request_id() const {
  // @@protoc_insertion_point(field_get:FrontEngine.CreateAccountRequest.request_id)
  return request_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CreateAccountRequest::set_request_id(const ::std::string& value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FrontEngine.CreateAccountRequest.request_id)
}
 void CreateAccountRequest::set_request_id(const char* value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FrontEngine.CreateAccountRequest.request_id)
}
 void CreateAccountRequest::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FrontEngine.CreateAccountRequest.request_id)
}
 ::std::string* CreateAccountRequest::mutable_request_id() {
  
  // @@protoc_insertion_point(field_mutable:FrontEngine.CreateAccountRequest.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CreateAccountRequest::release_request_id() {
  
  return request_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CreateAccountRequest::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.CreateAccountRequest.request_id)
}

// optional .FrontEngine.enums.CoinType coin_type = 2;
void CreateAccountRequest::clear_coin_type() {
  coin_type_ = 0;
}
 ::FrontEngine::enums_CoinType CreateAccountRequest::coin_type() const {
  // @@protoc_insertion_point(field_get:FrontEngine.CreateAccountRequest.coin_type)
  return static_cast< ::FrontEngine::enums_CoinType >(coin_type_);
}
 void CreateAccountRequest::set_coin_type(::FrontEngine::enums_CoinType value) {
  
  coin_type_ = value;
  // @@protoc_insertion_point(field_set:FrontEngine.CreateAccountRequest.coin_type)
}

// optional string username = 3;
void CreateAccountRequest::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& CreateAccountRequest::username() const {
  // @@protoc_insertion_point(field_get:FrontEngine.CreateAccountRequest.username)
  return username_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CreateAccountRequest::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FrontEngine.CreateAccountRequest.username)
}
 void CreateAccountRequest::set_username(const char* value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FrontEngine.CreateAccountRequest.username)
}
 void CreateAccountRequest::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FrontEngine.CreateAccountRequest.username)
}
 ::std::string* CreateAccountRequest::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:FrontEngine.CreateAccountRequest.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CreateAccountRequest::release_username() {
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CreateAccountRequest::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.CreateAccountRequest.username)
}

// optional string password = 4;
void CreateAccountRequest::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& CreateAccountRequest::password() const {
  // @@protoc_insertion_point(field_get:FrontEngine.CreateAccountRequest.password)
  return password_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CreateAccountRequest::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FrontEngine.CreateAccountRequest.password)
}
 void CreateAccountRequest::set_password(const char* value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FrontEngine.CreateAccountRequest.password)
}
 void CreateAccountRequest::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FrontEngine.CreateAccountRequest.password)
}
 ::std::string* CreateAccountRequest::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:FrontEngine.CreateAccountRequest.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CreateAccountRequest::release_password() {
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CreateAccountRequest::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.CreateAccountRequest.password)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CreateAccountCallBack::kRequestIdFieldNumber;
const int CreateAccountCallBack::kAccountFieldNumber;
const int CreateAccountCallBack::kErrorCodeFieldNumber;
const int CreateAccountCallBack::kErrorFieldNumber;
#endif  // !_MSC_VER

CreateAccountCallBack::CreateAccountCallBack()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:FrontEngine.CreateAccountCallBack)
}

void CreateAccountCallBack::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  account_ = const_cast< ::FrontEngine::UserInfo*>(&::FrontEngine::UserInfo::default_instance());
}

CreateAccountCallBack::CreateAccountCallBack(const CreateAccountCallBack& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:FrontEngine.CreateAccountCallBack)
}

void CreateAccountCallBack::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_ = NULL;
  errorcode_ = 0;
  error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CreateAccountCallBack::~CreateAccountCallBack() {
  // @@protoc_insertion_point(destructor:FrontEngine.CreateAccountCallBack)
  SharedDtor();
}

void CreateAccountCallBack::SharedDtor() {
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete account_;
  }
}

void CreateAccountCallBack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateAccountCallBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateAccountCallBack_descriptor_;
}

const CreateAccountCallBack& CreateAccountCallBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_front_5fengine_2eproto();
  return *default_instance_;
}

CreateAccountCallBack* CreateAccountCallBack::default_instance_ = NULL;

CreateAccountCallBack* CreateAccountCallBack::New(::google::protobuf::Arena* arena) const {
  CreateAccountCallBack* n = new CreateAccountCallBack;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CreateAccountCallBack::Clear() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && account_ != NULL) delete account_;
  account_ = NULL;
  errorcode_ = 0;
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool CreateAccountCallBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FrontEngine.CreateAccountCallBack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string request_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->request_id().data(), this->request_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "FrontEngine.CreateAccountCallBack.request_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_account;
        break;
      }

      // optional .FrontEngine.UserInfo account = 2;
      case 2: {
        if (tag == 18) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_account()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_errorCode;
        break;
      }

      // optional int32 errorCode = 3;
      case 3: {
        if (tag == 24) {
         parse_errorCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errorcode_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_error;
        break;
      }

      // optional string error = 4;
      case 4: {
        if (tag == 34) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->error().data(), this->error().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "FrontEngine.CreateAccountCallBack.error"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FrontEngine.CreateAccountCallBack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FrontEngine.CreateAccountCallBack)
  return false;
#undef DO_
}

void CreateAccountCallBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FrontEngine.CreateAccountCallBack)
  // optional string request_id = 1;
  if (this->request_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_id().data(), this->request_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FrontEngine.CreateAccountCallBack.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->request_id(), output);
  }

  // optional .FrontEngine.UserInfo account = 2;
  if (this->has_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->account_, output);
  }

  // optional int32 errorCode = 3;
  if (this->errorcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->errorcode(), output);
  }

  // optional string error = 4;
  if (this->error().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FrontEngine.CreateAccountCallBack.error");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->error(), output);
  }

  // @@protoc_insertion_point(serialize_end:FrontEngine.CreateAccountCallBack)
}

::google::protobuf::uint8* CreateAccountCallBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:FrontEngine.CreateAccountCallBack)
  // optional string request_id = 1;
  if (this->request_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_id().data(), this->request_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FrontEngine.CreateAccountCallBack.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->request_id(), target);
  }

  // optional .FrontEngine.UserInfo account = 2;
  if (this->has_account()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->account_, target);
  }

  // optional int32 errorCode = 3;
  if (this->errorcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->errorcode(), target);
  }

  // optional string error = 4;
  if (this->error().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FrontEngine.CreateAccountCallBack.error");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->error(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:FrontEngine.CreateAccountCallBack)
  return target;
}

int CreateAccountCallBack::ByteSize() const {
  int total_size = 0;

  // optional string request_id = 1;
  if (this->request_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->request_id());
  }

  // optional .FrontEngine.UserInfo account = 2;
  if (this->has_account()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->account_);
  }

  // optional int32 errorCode = 3;
  if (this->errorcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->errorcode());
  }

  // optional string error = 4;
  if (this->error().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateAccountCallBack::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CreateAccountCallBack* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CreateAccountCallBack>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateAccountCallBack::MergeFrom(const CreateAccountCallBack& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.request_id().size() > 0) {

    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  if (from.has_account()) {
    mutable_account()->::FrontEngine::UserInfo::MergeFrom(from.account());
  }
  if (from.errorcode() != 0) {
    set_errorcode(from.errorcode());
  }
  if (from.error().size() > 0) {

    error_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_);
  }
}

void CreateAccountCallBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateAccountCallBack::CopyFrom(const CreateAccountCallBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateAccountCallBack::IsInitialized() const {

  return true;
}

void CreateAccountCallBack::Swap(CreateAccountCallBack* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateAccountCallBack::InternalSwap(CreateAccountCallBack* other) {
  request_id_.Swap(&other->request_id_);
  std::swap(account_, other->account_);
  std::swap(errorcode_, other->errorcode_);
  error_.Swap(&other->error_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CreateAccountCallBack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateAccountCallBack_descriptor_;
  metadata.reflection = CreateAccountCallBack_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CreateAccountCallBack

// optional string request_id = 1;
void CreateAccountCallBack::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& CreateAccountCallBack::request_id() const {
  // @@protoc_insertion_point(field_get:FrontEngine.CreateAccountCallBack.request_id)
  return request_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CreateAccountCallBack::set_request_id(const ::std::string& value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FrontEngine.CreateAccountCallBack.request_id)
}
 void CreateAccountCallBack::set_request_id(const char* value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FrontEngine.CreateAccountCallBack.request_id)
}
 void CreateAccountCallBack::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FrontEngine.CreateAccountCallBack.request_id)
}
 ::std::string* CreateAccountCallBack::mutable_request_id() {
  
  // @@protoc_insertion_point(field_mutable:FrontEngine.CreateAccountCallBack.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CreateAccountCallBack::release_request_id() {
  
  return request_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CreateAccountCallBack::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.CreateAccountCallBack.request_id)
}

// optional .FrontEngine.UserInfo account = 2;
bool CreateAccountCallBack::has_account() const {
  return !_is_default_instance_ && account_ != NULL;
}
void CreateAccountCallBack::clear_account() {
  if (GetArenaNoVirtual() == NULL && account_ != NULL) delete account_;
  account_ = NULL;
}
const ::FrontEngine::UserInfo& CreateAccountCallBack::account() const {
  // @@protoc_insertion_point(field_get:FrontEngine.CreateAccountCallBack.account)
  return account_ != NULL ? *account_ : *default_instance_->account_;
}
::FrontEngine::UserInfo* CreateAccountCallBack::mutable_account() {
  
  if (account_ == NULL) {
    account_ = new ::FrontEngine::UserInfo;
  }
  // @@protoc_insertion_point(field_mutable:FrontEngine.CreateAccountCallBack.account)
  return account_;
}
::FrontEngine::UserInfo* CreateAccountCallBack::release_account() {
  
  ::FrontEngine::UserInfo* temp = account_;
  account_ = NULL;
  return temp;
}
void CreateAccountCallBack::set_allocated_account(::FrontEngine::UserInfo* account) {
  delete account_;
  account_ = account;
  if (account) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.CreateAccountCallBack.account)
}

// optional int32 errorCode = 3;
void CreateAccountCallBack::clear_errorcode() {
  errorcode_ = 0;
}
 ::google::protobuf::int32 CreateAccountCallBack::errorcode() const {
  // @@protoc_insertion_point(field_get:FrontEngine.CreateAccountCallBack.errorCode)
  return errorcode_;
}
 void CreateAccountCallBack::set_errorcode(::google::protobuf::int32 value) {
  
  errorcode_ = value;
  // @@protoc_insertion_point(field_set:FrontEngine.CreateAccountCallBack.errorCode)
}

// optional string error = 4;
void CreateAccountCallBack::clear_error() {
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& CreateAccountCallBack::error() const {
  // @@protoc_insertion_point(field_get:FrontEngine.CreateAccountCallBack.error)
  return error_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CreateAccountCallBack::set_error(const ::std::string& value) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FrontEngine.CreateAccountCallBack.error)
}
 void CreateAccountCallBack::set_error(const char* value) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FrontEngine.CreateAccountCallBack.error)
}
 void CreateAccountCallBack::set_error(const char* value, size_t size) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FrontEngine.CreateAccountCallBack.error)
}
 ::std::string* CreateAccountCallBack::mutable_error() {
  
  // @@protoc_insertion_point(field_mutable:FrontEngine.CreateAccountCallBack.error)
  return error_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CreateAccountCallBack::release_error() {
  
  return error_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CreateAccountCallBack::set_allocated_error(::std::string* error) {
  if (error != NULL) {
    
  } else {
    
  }
  error_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error);
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.CreateAccountCallBack.error)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int QueryBalanceRequest::kRequestIdFieldNumber;
const int QueryBalanceRequest::kCoinTypeFieldNumber;
const int QueryBalanceRequest::kAddressFieldNumber;
#endif  // !_MSC_VER

QueryBalanceRequest::QueryBalanceRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:FrontEngine.QueryBalanceRequest)
}

void QueryBalanceRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

QueryBalanceRequest::QueryBalanceRequest(const QueryBalanceRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:FrontEngine.QueryBalanceRequest)
}

void QueryBalanceRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  coin_type_ = 0;
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

QueryBalanceRequest::~QueryBalanceRequest() {
  // @@protoc_insertion_point(destructor:FrontEngine.QueryBalanceRequest)
  SharedDtor();
}

void QueryBalanceRequest::SharedDtor() {
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void QueryBalanceRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryBalanceRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryBalanceRequest_descriptor_;
}

const QueryBalanceRequest& QueryBalanceRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_front_5fengine_2eproto();
  return *default_instance_;
}

QueryBalanceRequest* QueryBalanceRequest::default_instance_ = NULL;

QueryBalanceRequest* QueryBalanceRequest::New(::google::protobuf::Arena* arena) const {
  QueryBalanceRequest* n = new QueryBalanceRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QueryBalanceRequest::Clear() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  coin_type_ = 0;
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool QueryBalanceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FrontEngine.QueryBalanceRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string request_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->request_id().data(), this->request_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "FrontEngine.QueryBalanceRequest.request_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_coin_type;
        break;
      }

      // optional .FrontEngine.enums.CoinType coin_type = 2;
      case 2: {
        if (tag == 16) {
         parse_coin_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_coin_type(static_cast< ::FrontEngine::enums_CoinType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_address;
        break;
      }

      // optional string address = 3;
      case 3: {
        if (tag == 26) {
         parse_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->address().data(), this->address().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "FrontEngine.QueryBalanceRequest.address"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FrontEngine.QueryBalanceRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FrontEngine.QueryBalanceRequest)
  return false;
#undef DO_
}

void QueryBalanceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FrontEngine.QueryBalanceRequest)
  // optional string request_id = 1;
  if (this->request_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_id().data(), this->request_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FrontEngine.QueryBalanceRequest.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->request_id(), output);
  }

  // optional .FrontEngine.enums.CoinType coin_type = 2;
  if (this->coin_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->coin_type(), output);
  }

  // optional string address = 3;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FrontEngine.QueryBalanceRequest.address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->address(), output);
  }

  // @@protoc_insertion_point(serialize_end:FrontEngine.QueryBalanceRequest)
}

::google::protobuf::uint8* QueryBalanceRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:FrontEngine.QueryBalanceRequest)
  // optional string request_id = 1;
  if (this->request_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_id().data(), this->request_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FrontEngine.QueryBalanceRequest.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->request_id(), target);
  }

  // optional .FrontEngine.enums.CoinType coin_type = 2;
  if (this->coin_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->coin_type(), target);
  }

  // optional string address = 3;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FrontEngine.QueryBalanceRequest.address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->address(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:FrontEngine.QueryBalanceRequest)
  return target;
}

int QueryBalanceRequest::ByteSize() const {
  int total_size = 0;

  // optional string request_id = 1;
  if (this->request_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->request_id());
  }

  // optional .FrontEngine.enums.CoinType coin_type = 2;
  if (this->coin_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->coin_type());
  }

  // optional string address = 3;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->address());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryBalanceRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const QueryBalanceRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const QueryBalanceRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryBalanceRequest::MergeFrom(const QueryBalanceRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.request_id().size() > 0) {

    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  if (from.coin_type() != 0) {
    set_coin_type(from.coin_type());
  }
  if (from.address().size() > 0) {

    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
}

void QueryBalanceRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryBalanceRequest::CopyFrom(const QueryBalanceRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryBalanceRequest::IsInitialized() const {

  return true;
}

void QueryBalanceRequest::Swap(QueryBalanceRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QueryBalanceRequest::InternalSwap(QueryBalanceRequest* other) {
  request_id_.Swap(&other->request_id_);
  std::swap(coin_type_, other->coin_type_);
  address_.Swap(&other->address_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QueryBalanceRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryBalanceRequest_descriptor_;
  metadata.reflection = QueryBalanceRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QueryBalanceRequest

// optional string request_id = 1;
void QueryBalanceRequest::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& QueryBalanceRequest::request_id() const {
  // @@protoc_insertion_point(field_get:FrontEngine.QueryBalanceRequest.request_id)
  return request_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void QueryBalanceRequest::set_request_id(const ::std::string& value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FrontEngine.QueryBalanceRequest.request_id)
}
 void QueryBalanceRequest::set_request_id(const char* value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FrontEngine.QueryBalanceRequest.request_id)
}
 void QueryBalanceRequest::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FrontEngine.QueryBalanceRequest.request_id)
}
 ::std::string* QueryBalanceRequest::mutable_request_id() {
  
  // @@protoc_insertion_point(field_mutable:FrontEngine.QueryBalanceRequest.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* QueryBalanceRequest::release_request_id() {
  
  return request_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void QueryBalanceRequest::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.QueryBalanceRequest.request_id)
}

// optional .FrontEngine.enums.CoinType coin_type = 2;
void QueryBalanceRequest::clear_coin_type() {
  coin_type_ = 0;
}
 ::FrontEngine::enums_CoinType QueryBalanceRequest::coin_type() const {
  // @@protoc_insertion_point(field_get:FrontEngine.QueryBalanceRequest.coin_type)
  return static_cast< ::FrontEngine::enums_CoinType >(coin_type_);
}
 void QueryBalanceRequest::set_coin_type(::FrontEngine::enums_CoinType value) {
  
  coin_type_ = value;
  // @@protoc_insertion_point(field_set:FrontEngine.QueryBalanceRequest.coin_type)
}

// optional string address = 3;
void QueryBalanceRequest::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& QueryBalanceRequest::address() const {
  // @@protoc_insertion_point(field_get:FrontEngine.QueryBalanceRequest.address)
  return address_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void QueryBalanceRequest::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FrontEngine.QueryBalanceRequest.address)
}
 void QueryBalanceRequest::set_address(const char* value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FrontEngine.QueryBalanceRequest.address)
}
 void QueryBalanceRequest::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FrontEngine.QueryBalanceRequest.address)
}
 ::std::string* QueryBalanceRequest::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:FrontEngine.QueryBalanceRequest.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* QueryBalanceRequest::release_address() {
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void QueryBalanceRequest::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.QueryBalanceRequest.address)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int QueryBalanceCallBack::kRequestIdFieldNumber;
const int QueryBalanceCallBack::kCapitalFieldNumber;
const int QueryBalanceCallBack::kErrorCodeFieldNumber;
const int QueryBalanceCallBack::kErrorFieldNumber;
#endif  // !_MSC_VER

QueryBalanceCallBack::QueryBalanceCallBack()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:FrontEngine.QueryBalanceCallBack)
}

void QueryBalanceCallBack::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  capital_ = const_cast< ::FrontEngine::CoinCapital*>(&::FrontEngine::CoinCapital::default_instance());
}

QueryBalanceCallBack::QueryBalanceCallBack(const QueryBalanceCallBack& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:FrontEngine.QueryBalanceCallBack)
}

void QueryBalanceCallBack::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  capital_ = NULL;
  errorcode_ = 0;
  error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

QueryBalanceCallBack::~QueryBalanceCallBack() {
  // @@protoc_insertion_point(destructor:FrontEngine.QueryBalanceCallBack)
  SharedDtor();
}

void QueryBalanceCallBack::SharedDtor() {
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete capital_;
  }
}

void QueryBalanceCallBack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryBalanceCallBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryBalanceCallBack_descriptor_;
}

const QueryBalanceCallBack& QueryBalanceCallBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_front_5fengine_2eproto();
  return *default_instance_;
}

QueryBalanceCallBack* QueryBalanceCallBack::default_instance_ = NULL;

QueryBalanceCallBack* QueryBalanceCallBack::New(::google::protobuf::Arena* arena) const {
  QueryBalanceCallBack* n = new QueryBalanceCallBack;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QueryBalanceCallBack::Clear() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && capital_ != NULL) delete capital_;
  capital_ = NULL;
  errorcode_ = 0;
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool QueryBalanceCallBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FrontEngine.QueryBalanceCallBack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string request_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->request_id().data(), this->request_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "FrontEngine.QueryBalanceCallBack.request_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_capital;
        break;
      }

      // optional .FrontEngine.CoinCapital capital = 2;
      case 2: {
        if (tag == 18) {
         parse_capital:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_capital()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_errorCode;
        break;
      }

      // optional int32 errorCode = 3;
      case 3: {
        if (tag == 24) {
         parse_errorCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errorcode_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_error;
        break;
      }

      // optional string error = 4;
      case 4: {
        if (tag == 34) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->error().data(), this->error().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "FrontEngine.QueryBalanceCallBack.error"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FrontEngine.QueryBalanceCallBack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FrontEngine.QueryBalanceCallBack)
  return false;
#undef DO_
}

void QueryBalanceCallBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FrontEngine.QueryBalanceCallBack)
  // optional string request_id = 1;
  if (this->request_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_id().data(), this->request_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FrontEngine.QueryBalanceCallBack.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->request_id(), output);
  }

  // optional .FrontEngine.CoinCapital capital = 2;
  if (this->has_capital()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->capital_, output);
  }

  // optional int32 errorCode = 3;
  if (this->errorcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->errorcode(), output);
  }

  // optional string error = 4;
  if (this->error().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FrontEngine.QueryBalanceCallBack.error");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->error(), output);
  }

  // @@protoc_insertion_point(serialize_end:FrontEngine.QueryBalanceCallBack)
}

::google::protobuf::uint8* QueryBalanceCallBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:FrontEngine.QueryBalanceCallBack)
  // optional string request_id = 1;
  if (this->request_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_id().data(), this->request_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FrontEngine.QueryBalanceCallBack.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->request_id(), target);
  }

  // optional .FrontEngine.CoinCapital capital = 2;
  if (this->has_capital()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->capital_, target);
  }

  // optional int32 errorCode = 3;
  if (this->errorcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->errorcode(), target);
  }

  // optional string error = 4;
  if (this->error().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FrontEngine.QueryBalanceCallBack.error");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->error(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:FrontEngine.QueryBalanceCallBack)
  return target;
}

int QueryBalanceCallBack::ByteSize() const {
  int total_size = 0;

  // optional string request_id = 1;
  if (this->request_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->request_id());
  }

  // optional .FrontEngine.CoinCapital capital = 2;
  if (this->has_capital()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->capital_);
  }

  // optional int32 errorCode = 3;
  if (this->errorcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->errorcode());
  }

  // optional string error = 4;
  if (this->error().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryBalanceCallBack::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const QueryBalanceCallBack* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const QueryBalanceCallBack>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryBalanceCallBack::MergeFrom(const QueryBalanceCallBack& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.request_id().size() > 0) {

    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  if (from.has_capital()) {
    mutable_capital()->::FrontEngine::CoinCapital::MergeFrom(from.capital());
  }
  if (from.errorcode() != 0) {
    set_errorcode(from.errorcode());
  }
  if (from.error().size() > 0) {

    error_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_);
  }
}

void QueryBalanceCallBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryBalanceCallBack::CopyFrom(const QueryBalanceCallBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryBalanceCallBack::IsInitialized() const {

  return true;
}

void QueryBalanceCallBack::Swap(QueryBalanceCallBack* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QueryBalanceCallBack::InternalSwap(QueryBalanceCallBack* other) {
  request_id_.Swap(&other->request_id_);
  std::swap(capital_, other->capital_);
  std::swap(errorcode_, other->errorcode_);
  error_.Swap(&other->error_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QueryBalanceCallBack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryBalanceCallBack_descriptor_;
  metadata.reflection = QueryBalanceCallBack_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QueryBalanceCallBack

// optional string request_id = 1;
void QueryBalanceCallBack::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& QueryBalanceCallBack::request_id() const {
  // @@protoc_insertion_point(field_get:FrontEngine.QueryBalanceCallBack.request_id)
  return request_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void QueryBalanceCallBack::set_request_id(const ::std::string& value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FrontEngine.QueryBalanceCallBack.request_id)
}
 void QueryBalanceCallBack::set_request_id(const char* value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FrontEngine.QueryBalanceCallBack.request_id)
}
 void QueryBalanceCallBack::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FrontEngine.QueryBalanceCallBack.request_id)
}
 ::std::string* QueryBalanceCallBack::mutable_request_id() {
  
  // @@protoc_insertion_point(field_mutable:FrontEngine.QueryBalanceCallBack.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* QueryBalanceCallBack::release_request_id() {
  
  return request_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void QueryBalanceCallBack::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.QueryBalanceCallBack.request_id)
}

// optional .FrontEngine.CoinCapital capital = 2;
bool QueryBalanceCallBack::has_capital() const {
  return !_is_default_instance_ && capital_ != NULL;
}
void QueryBalanceCallBack::clear_capital() {
  if (GetArenaNoVirtual() == NULL && capital_ != NULL) delete capital_;
  capital_ = NULL;
}
const ::FrontEngine::CoinCapital& QueryBalanceCallBack::capital() const {
  // @@protoc_insertion_point(field_get:FrontEngine.QueryBalanceCallBack.capital)
  return capital_ != NULL ? *capital_ : *default_instance_->capital_;
}
::FrontEngine::CoinCapital* QueryBalanceCallBack::mutable_capital() {
  
  if (capital_ == NULL) {
    capital_ = new ::FrontEngine::CoinCapital;
  }
  // @@protoc_insertion_point(field_mutable:FrontEngine.QueryBalanceCallBack.capital)
  return capital_;
}
::FrontEngine::CoinCapital* QueryBalanceCallBack::release_capital() {
  
  ::FrontEngine::CoinCapital* temp = capital_;
  capital_ = NULL;
  return temp;
}
void QueryBalanceCallBack::set_allocated_capital(::FrontEngine::CoinCapital* capital) {
  delete capital_;
  capital_ = capital;
  if (capital) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.QueryBalanceCallBack.capital)
}

// optional int32 errorCode = 3;
void QueryBalanceCallBack::clear_errorcode() {
  errorcode_ = 0;
}
 ::google::protobuf::int32 QueryBalanceCallBack::errorcode() const {
  // @@protoc_insertion_point(field_get:FrontEngine.QueryBalanceCallBack.errorCode)
  return errorcode_;
}
 void QueryBalanceCallBack::set_errorcode(::google::protobuf::int32 value) {
  
  errorcode_ = value;
  // @@protoc_insertion_point(field_set:FrontEngine.QueryBalanceCallBack.errorCode)
}

// optional string error = 4;
void QueryBalanceCallBack::clear_error() {
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& QueryBalanceCallBack::error() const {
  // @@protoc_insertion_point(field_get:FrontEngine.QueryBalanceCallBack.error)
  return error_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void QueryBalanceCallBack::set_error(const ::std::string& value) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FrontEngine.QueryBalanceCallBack.error)
}
 void QueryBalanceCallBack::set_error(const char* value) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FrontEngine.QueryBalanceCallBack.error)
}
 void QueryBalanceCallBack::set_error(const char* value, size_t size) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FrontEngine.QueryBalanceCallBack.error)
}
 ::std::string* QueryBalanceCallBack::mutable_error() {
  
  // @@protoc_insertion_point(field_mutable:FrontEngine.QueryBalanceCallBack.error)
  return error_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* QueryBalanceCallBack::release_error() {
  
  return error_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void QueryBalanceCallBack::set_allocated_error(::std::string* error) {
  if (error != NULL) {
    
  } else {
    
  }
  error_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error);
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.QueryBalanceCallBack.error)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int QueryFeeRequest::kRequestIdFieldNumber;
const int QueryFeeRequest::kCoinTypeFieldNumber;
#endif  // !_MSC_VER

QueryFeeRequest::QueryFeeRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:FrontEngine.QueryFeeRequest)
}

void QueryFeeRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

QueryFeeRequest::QueryFeeRequest(const QueryFeeRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:FrontEngine.QueryFeeRequest)
}

void QueryFeeRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  coin_type_ = 0;
}

QueryFeeRequest::~QueryFeeRequest() {
  // @@protoc_insertion_point(destructor:FrontEngine.QueryFeeRequest)
  SharedDtor();
}

void QueryFeeRequest::SharedDtor() {
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void QueryFeeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryFeeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryFeeRequest_descriptor_;
}

const QueryFeeRequest& QueryFeeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_front_5fengine_2eproto();
  return *default_instance_;
}

QueryFeeRequest* QueryFeeRequest::default_instance_ = NULL;

QueryFeeRequest* QueryFeeRequest::New(::google::protobuf::Arena* arena) const {
  QueryFeeRequest* n = new QueryFeeRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QueryFeeRequest::Clear() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  coin_type_ = 0;
}

bool QueryFeeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FrontEngine.QueryFeeRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string request_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->request_id().data(), this->request_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "FrontEngine.QueryFeeRequest.request_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_coin_type;
        break;
      }

      // optional .FrontEngine.enums.CoinType coin_type = 2;
      case 2: {
        if (tag == 16) {
         parse_coin_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_coin_type(static_cast< ::FrontEngine::enums_CoinType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FrontEngine.QueryFeeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FrontEngine.QueryFeeRequest)
  return false;
#undef DO_
}

void QueryFeeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FrontEngine.QueryFeeRequest)
  // optional string request_id = 1;
  if (this->request_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_id().data(), this->request_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FrontEngine.QueryFeeRequest.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->request_id(), output);
  }

  // optional .FrontEngine.enums.CoinType coin_type = 2;
  if (this->coin_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->coin_type(), output);
  }

  // @@protoc_insertion_point(serialize_end:FrontEngine.QueryFeeRequest)
}

::google::protobuf::uint8* QueryFeeRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:FrontEngine.QueryFeeRequest)
  // optional string request_id = 1;
  if (this->request_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_id().data(), this->request_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FrontEngine.QueryFeeRequest.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->request_id(), target);
  }

  // optional .FrontEngine.enums.CoinType coin_type = 2;
  if (this->coin_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->coin_type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:FrontEngine.QueryFeeRequest)
  return target;
}

int QueryFeeRequest::ByteSize() const {
  int total_size = 0;

  // optional string request_id = 1;
  if (this->request_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->request_id());
  }

  // optional .FrontEngine.enums.CoinType coin_type = 2;
  if (this->coin_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->coin_type());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryFeeRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const QueryFeeRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const QueryFeeRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryFeeRequest::MergeFrom(const QueryFeeRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.request_id().size() > 0) {

    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  if (from.coin_type() != 0) {
    set_coin_type(from.coin_type());
  }
}

void QueryFeeRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryFeeRequest::CopyFrom(const QueryFeeRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryFeeRequest::IsInitialized() const {

  return true;
}

void QueryFeeRequest::Swap(QueryFeeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QueryFeeRequest::InternalSwap(QueryFeeRequest* other) {
  request_id_.Swap(&other->request_id_);
  std::swap(coin_type_, other->coin_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QueryFeeRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryFeeRequest_descriptor_;
  metadata.reflection = QueryFeeRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QueryFeeRequest

// optional string request_id = 1;
void QueryFeeRequest::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& QueryFeeRequest::request_id() const {
  // @@protoc_insertion_point(field_get:FrontEngine.QueryFeeRequest.request_id)
  return request_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void QueryFeeRequest::set_request_id(const ::std::string& value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FrontEngine.QueryFeeRequest.request_id)
}
 void QueryFeeRequest::set_request_id(const char* value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FrontEngine.QueryFeeRequest.request_id)
}
 void QueryFeeRequest::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FrontEngine.QueryFeeRequest.request_id)
}
 ::std::string* QueryFeeRequest::mutable_request_id() {
  
  // @@protoc_insertion_point(field_mutable:FrontEngine.QueryFeeRequest.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* QueryFeeRequest::release_request_id() {
  
  return request_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void QueryFeeRequest::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.QueryFeeRequest.request_id)
}

// optional .FrontEngine.enums.CoinType coin_type = 2;
void QueryFeeRequest::clear_coin_type() {
  coin_type_ = 0;
}
 ::FrontEngine::enums_CoinType QueryFeeRequest::coin_type() const {
  // @@protoc_insertion_point(field_get:FrontEngine.QueryFeeRequest.coin_type)
  return static_cast< ::FrontEngine::enums_CoinType >(coin_type_);
}
 void QueryFeeRequest::set_coin_type(::FrontEngine::enums_CoinType value) {
  
  coin_type_ = value;
  // @@protoc_insertion_point(field_set:FrontEngine.QueryFeeRequest.coin_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int QueryFeeCallBack::kRequestIdFieldNumber;
const int QueryFeeCallBack::kCoinTypeFieldNumber;
const int QueryFeeCallBack::kFeeFieldNumber;
const int QueryFeeCallBack::kErrorCodeFieldNumber;
const int QueryFeeCallBack::kErrorFieldNumber;
#endif  // !_MSC_VER

QueryFeeCallBack::QueryFeeCallBack()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:FrontEngine.QueryFeeCallBack)
}

void QueryFeeCallBack::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

QueryFeeCallBack::QueryFeeCallBack(const QueryFeeCallBack& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:FrontEngine.QueryFeeCallBack)
}

void QueryFeeCallBack::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  coin_type_ = 0;
  fee_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  errorcode_ = 0;
  error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

QueryFeeCallBack::~QueryFeeCallBack() {
  // @@protoc_insertion_point(destructor:FrontEngine.QueryFeeCallBack)
  SharedDtor();
}

void QueryFeeCallBack::SharedDtor() {
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fee_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void QueryFeeCallBack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryFeeCallBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryFeeCallBack_descriptor_;
}

const QueryFeeCallBack& QueryFeeCallBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_front_5fengine_2eproto();
  return *default_instance_;
}

QueryFeeCallBack* QueryFeeCallBack::default_instance_ = NULL;

QueryFeeCallBack* QueryFeeCallBack::New(::google::protobuf::Arena* arena) const {
  QueryFeeCallBack* n = new QueryFeeCallBack;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QueryFeeCallBack::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<QueryFeeCallBack*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(coin_type_, errorcode_);
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fee_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool QueryFeeCallBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FrontEngine.QueryFeeCallBack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string request_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->request_id().data(), this->request_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "FrontEngine.QueryFeeCallBack.request_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_coin_type;
        break;
      }

      // optional .FrontEngine.enums.CoinType coin_type = 2;
      case 2: {
        if (tag == 16) {
         parse_coin_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_coin_type(static_cast< ::FrontEngine::enums_CoinType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_fee;
        break;
      }

      // optional string fee = 3;
      case 3: {
        if (tag == 26) {
         parse_fee:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fee()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->fee().data(), this->fee().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "FrontEngine.QueryFeeCallBack.fee"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_errorCode;
        break;
      }

      // optional int32 errorCode = 4;
      case 4: {
        if (tag == 32) {
         parse_errorCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errorcode_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_error;
        break;
      }

      // optional string error = 5;
      case 5: {
        if (tag == 42) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->error().data(), this->error().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "FrontEngine.QueryFeeCallBack.error"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FrontEngine.QueryFeeCallBack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FrontEngine.QueryFeeCallBack)
  return false;
#undef DO_
}

void QueryFeeCallBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FrontEngine.QueryFeeCallBack)
  // optional string request_id = 1;
  if (this->request_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_id().data(), this->request_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FrontEngine.QueryFeeCallBack.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->request_id(), output);
  }

  // optional .FrontEngine.enums.CoinType coin_type = 2;
  if (this->coin_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->coin_type(), output);
  }

  // optional string fee = 3;
  if (this->fee().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fee().data(), this->fee().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FrontEngine.QueryFeeCallBack.fee");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->fee(), output);
  }

  // optional int32 errorCode = 4;
  if (this->errorcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->errorcode(), output);
  }

  // optional string error = 5;
  if (this->error().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FrontEngine.QueryFeeCallBack.error");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->error(), output);
  }

  // @@protoc_insertion_point(serialize_end:FrontEngine.QueryFeeCallBack)
}

::google::protobuf::uint8* QueryFeeCallBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:FrontEngine.QueryFeeCallBack)
  // optional string request_id = 1;
  if (this->request_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_id().data(), this->request_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FrontEngine.QueryFeeCallBack.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->request_id(), target);
  }

  // optional .FrontEngine.enums.CoinType coin_type = 2;
  if (this->coin_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->coin_type(), target);
  }

  // optional string fee = 3;
  if (this->fee().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fee().data(), this->fee().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FrontEngine.QueryFeeCallBack.fee");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->fee(), target);
  }

  // optional int32 errorCode = 4;
  if (this->errorcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->errorcode(), target);
  }

  // optional string error = 5;
  if (this->error().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FrontEngine.QueryFeeCallBack.error");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->error(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:FrontEngine.QueryFeeCallBack)
  return target;
}

int QueryFeeCallBack::ByteSize() const {
  int total_size = 0;

  // optional string request_id = 1;
  if (this->request_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->request_id());
  }

  // optional .FrontEngine.enums.CoinType coin_type = 2;
  if (this->coin_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->coin_type());
  }

  // optional string fee = 3;
  if (this->fee().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->fee());
  }

  // optional int32 errorCode = 4;
  if (this->errorcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->errorcode());
  }

  // optional string error = 5;
  if (this->error().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryFeeCallBack::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const QueryFeeCallBack* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const QueryFeeCallBack>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryFeeCallBack::MergeFrom(const QueryFeeCallBack& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.request_id().size() > 0) {

    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  if (from.coin_type() != 0) {
    set_coin_type(from.coin_type());
  }
  if (from.fee().size() > 0) {

    fee_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fee_);
  }
  if (from.errorcode() != 0) {
    set_errorcode(from.errorcode());
  }
  if (from.error().size() > 0) {

    error_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_);
  }
}

void QueryFeeCallBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryFeeCallBack::CopyFrom(const QueryFeeCallBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryFeeCallBack::IsInitialized() const {

  return true;
}

void QueryFeeCallBack::Swap(QueryFeeCallBack* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QueryFeeCallBack::InternalSwap(QueryFeeCallBack* other) {
  request_id_.Swap(&other->request_id_);
  std::swap(coin_type_, other->coin_type_);
  fee_.Swap(&other->fee_);
  std::swap(errorcode_, other->errorcode_);
  error_.Swap(&other->error_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QueryFeeCallBack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryFeeCallBack_descriptor_;
  metadata.reflection = QueryFeeCallBack_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QueryFeeCallBack

// optional string request_id = 1;
void QueryFeeCallBack::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& QueryFeeCallBack::request_id() const {
  // @@protoc_insertion_point(field_get:FrontEngine.QueryFeeCallBack.request_id)
  return request_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void QueryFeeCallBack::set_request_id(const ::std::string& value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FrontEngine.QueryFeeCallBack.request_id)
}
 void QueryFeeCallBack::set_request_id(const char* value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FrontEngine.QueryFeeCallBack.request_id)
}
 void QueryFeeCallBack::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FrontEngine.QueryFeeCallBack.request_id)
}
 ::std::string* QueryFeeCallBack::mutable_request_id() {
  
  // @@protoc_insertion_point(field_mutable:FrontEngine.QueryFeeCallBack.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* QueryFeeCallBack::release_request_id() {
  
  return request_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void QueryFeeCallBack::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.QueryFeeCallBack.request_id)
}

// optional .FrontEngine.enums.CoinType coin_type = 2;
void QueryFeeCallBack::clear_coin_type() {
  coin_type_ = 0;
}
 ::FrontEngine::enums_CoinType QueryFeeCallBack::coin_type() const {
  // @@protoc_insertion_point(field_get:FrontEngine.QueryFeeCallBack.coin_type)
  return static_cast< ::FrontEngine::enums_CoinType >(coin_type_);
}
 void QueryFeeCallBack::set_coin_type(::FrontEngine::enums_CoinType value) {
  
  coin_type_ = value;
  // @@protoc_insertion_point(field_set:FrontEngine.QueryFeeCallBack.coin_type)
}

// optional string fee = 3;
void QueryFeeCallBack::clear_fee() {
  fee_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& QueryFeeCallBack::fee() const {
  // @@protoc_insertion_point(field_get:FrontEngine.QueryFeeCallBack.fee)
  return fee_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void QueryFeeCallBack::set_fee(const ::std::string& value) {
  
  fee_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FrontEngine.QueryFeeCallBack.fee)
}
 void QueryFeeCallBack::set_fee(const char* value) {
  
  fee_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FrontEngine.QueryFeeCallBack.fee)
}
 void QueryFeeCallBack::set_fee(const char* value, size_t size) {
  
  fee_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FrontEngine.QueryFeeCallBack.fee)
}
 ::std::string* QueryFeeCallBack::mutable_fee() {
  
  // @@protoc_insertion_point(field_mutable:FrontEngine.QueryFeeCallBack.fee)
  return fee_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* QueryFeeCallBack::release_fee() {
  
  return fee_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void QueryFeeCallBack::set_allocated_fee(::std::string* fee) {
  if (fee != NULL) {
    
  } else {
    
  }
  fee_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fee);
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.QueryFeeCallBack.fee)
}

// optional int32 errorCode = 4;
void QueryFeeCallBack::clear_errorcode() {
  errorcode_ = 0;
}
 ::google::protobuf::int32 QueryFeeCallBack::errorcode() const {
  // @@protoc_insertion_point(field_get:FrontEngine.QueryFeeCallBack.errorCode)
  return errorcode_;
}
 void QueryFeeCallBack::set_errorcode(::google::protobuf::int32 value) {
  
  errorcode_ = value;
  // @@protoc_insertion_point(field_set:FrontEngine.QueryFeeCallBack.errorCode)
}

// optional string error = 5;
void QueryFeeCallBack::clear_error() {
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& QueryFeeCallBack::error() const {
  // @@protoc_insertion_point(field_get:FrontEngine.QueryFeeCallBack.error)
  return error_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void QueryFeeCallBack::set_error(const ::std::string& value) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FrontEngine.QueryFeeCallBack.error)
}
 void QueryFeeCallBack::set_error(const char* value) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FrontEngine.QueryFeeCallBack.error)
}
 void QueryFeeCallBack::set_error(const char* value, size_t size) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FrontEngine.QueryFeeCallBack.error)
}
 ::std::string* QueryFeeCallBack::mutable_error() {
  
  // @@protoc_insertion_point(field_mutable:FrontEngine.QueryFeeCallBack.error)
  return error_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* QueryFeeCallBack::release_error() {
  
  return error_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void QueryFeeCallBack::set_allocated_error(::std::string* error) {
  if (error != NULL) {
    
  } else {
    
  }
  error_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error);
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.QueryFeeCallBack.error)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int QueryOrderRequest::kRequestIdFieldNumber;
const int QueryOrderRequest::kCoinTypeFieldNumber;
const int QueryOrderRequest::kOrderIdFieldNumber;
#endif  // !_MSC_VER

QueryOrderRequest::QueryOrderRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:FrontEngine.QueryOrderRequest)
}

void QueryOrderRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

QueryOrderRequest::QueryOrderRequest(const QueryOrderRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:FrontEngine.QueryOrderRequest)
}

void QueryOrderRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  coin_type_ = 0;
  order_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

QueryOrderRequest::~QueryOrderRequest() {
  // @@protoc_insertion_point(destructor:FrontEngine.QueryOrderRequest)
  SharedDtor();
}

void QueryOrderRequest::SharedDtor() {
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void QueryOrderRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryOrderRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryOrderRequest_descriptor_;
}

const QueryOrderRequest& QueryOrderRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_front_5fengine_2eproto();
  return *default_instance_;
}

QueryOrderRequest* QueryOrderRequest::default_instance_ = NULL;

QueryOrderRequest* QueryOrderRequest::New(::google::protobuf::Arena* arena) const {
  QueryOrderRequest* n = new QueryOrderRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QueryOrderRequest::Clear() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  coin_type_ = 0;
  order_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool QueryOrderRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FrontEngine.QueryOrderRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string request_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->request_id().data(), this->request_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "FrontEngine.QueryOrderRequest.request_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_coin_type;
        break;
      }

      // optional .FrontEngine.enums.CoinType coin_type = 2;
      case 2: {
        if (tag == 16) {
         parse_coin_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_coin_type(static_cast< ::FrontEngine::enums_CoinType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_order_id;
        break;
      }

      // optional string order_id = 3;
      case 3: {
        if (tag == 26) {
         parse_order_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_order_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->order_id().data(), this->order_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "FrontEngine.QueryOrderRequest.order_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FrontEngine.QueryOrderRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FrontEngine.QueryOrderRequest)
  return false;
#undef DO_
}

void QueryOrderRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FrontEngine.QueryOrderRequest)
  // optional string request_id = 1;
  if (this->request_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_id().data(), this->request_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FrontEngine.QueryOrderRequest.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->request_id(), output);
  }

  // optional .FrontEngine.enums.CoinType coin_type = 2;
  if (this->coin_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->coin_type(), output);
  }

  // optional string order_id = 3;
  if (this->order_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->order_id().data(), this->order_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FrontEngine.QueryOrderRequest.order_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->order_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:FrontEngine.QueryOrderRequest)
}

::google::protobuf::uint8* QueryOrderRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:FrontEngine.QueryOrderRequest)
  // optional string request_id = 1;
  if (this->request_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_id().data(), this->request_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FrontEngine.QueryOrderRequest.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->request_id(), target);
  }

  // optional .FrontEngine.enums.CoinType coin_type = 2;
  if (this->coin_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->coin_type(), target);
  }

  // optional string order_id = 3;
  if (this->order_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->order_id().data(), this->order_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FrontEngine.QueryOrderRequest.order_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->order_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:FrontEngine.QueryOrderRequest)
  return target;
}

int QueryOrderRequest::ByteSize() const {
  int total_size = 0;

  // optional string request_id = 1;
  if (this->request_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->request_id());
  }

  // optional .FrontEngine.enums.CoinType coin_type = 2;
  if (this->coin_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->coin_type());
  }

  // optional string order_id = 3;
  if (this->order_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->order_id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryOrderRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const QueryOrderRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const QueryOrderRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryOrderRequest::MergeFrom(const QueryOrderRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.request_id().size() > 0) {

    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  if (from.coin_type() != 0) {
    set_coin_type(from.coin_type());
  }
  if (from.order_id().size() > 0) {

    order_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_id_);
  }
}

void QueryOrderRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryOrderRequest::CopyFrom(const QueryOrderRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryOrderRequest::IsInitialized() const {

  return true;
}

void QueryOrderRequest::Swap(QueryOrderRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QueryOrderRequest::InternalSwap(QueryOrderRequest* other) {
  request_id_.Swap(&other->request_id_);
  std::swap(coin_type_, other->coin_type_);
  order_id_.Swap(&other->order_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QueryOrderRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryOrderRequest_descriptor_;
  metadata.reflection = QueryOrderRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QueryOrderRequest

// optional string request_id = 1;
void QueryOrderRequest::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& QueryOrderRequest::request_id() const {
  // @@protoc_insertion_point(field_get:FrontEngine.QueryOrderRequest.request_id)
  return request_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void QueryOrderRequest::set_request_id(const ::std::string& value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FrontEngine.QueryOrderRequest.request_id)
}
 void QueryOrderRequest::set_request_id(const char* value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FrontEngine.QueryOrderRequest.request_id)
}
 void QueryOrderRequest::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FrontEngine.QueryOrderRequest.request_id)
}
 ::std::string* QueryOrderRequest::mutable_request_id() {
  
  // @@protoc_insertion_point(field_mutable:FrontEngine.QueryOrderRequest.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* QueryOrderRequest::release_request_id() {
  
  return request_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void QueryOrderRequest::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.QueryOrderRequest.request_id)
}

// optional .FrontEngine.enums.CoinType coin_type = 2;
void QueryOrderRequest::clear_coin_type() {
  coin_type_ = 0;
}
 ::FrontEngine::enums_CoinType QueryOrderRequest::coin_type() const {
  // @@protoc_insertion_point(field_get:FrontEngine.QueryOrderRequest.coin_type)
  return static_cast< ::FrontEngine::enums_CoinType >(coin_type_);
}
 void QueryOrderRequest::set_coin_type(::FrontEngine::enums_CoinType value) {
  
  coin_type_ = value;
  // @@protoc_insertion_point(field_set:FrontEngine.QueryOrderRequest.coin_type)
}

// optional string order_id = 3;
void QueryOrderRequest::clear_order_id() {
  order_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& QueryOrderRequest::order_id() const {
  // @@protoc_insertion_point(field_get:FrontEngine.QueryOrderRequest.order_id)
  return order_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void QueryOrderRequest::set_order_id(const ::std::string& value) {
  
  order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FrontEngine.QueryOrderRequest.order_id)
}
 void QueryOrderRequest::set_order_id(const char* value) {
  
  order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FrontEngine.QueryOrderRequest.order_id)
}
 void QueryOrderRequest::set_order_id(const char* value, size_t size) {
  
  order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FrontEngine.QueryOrderRequest.order_id)
}
 ::std::string* QueryOrderRequest::mutable_order_id() {
  
  // @@protoc_insertion_point(field_mutable:FrontEngine.QueryOrderRequest.order_id)
  return order_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* QueryOrderRequest::release_order_id() {
  
  return order_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void QueryOrderRequest::set_allocated_order_id(::std::string* order_id) {
  if (order_id != NULL) {
    
  } else {
    
  }
  order_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), order_id);
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.QueryOrderRequest.order_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int QueryOrderCallBack::kRequestIdFieldNumber;
const int QueryOrderCallBack::kOrderFieldNumber;
const int QueryOrderCallBack::kErrorCodeFieldNumber;
const int QueryOrderCallBack::kErrorFieldNumber;
#endif  // !_MSC_VER

QueryOrderCallBack::QueryOrderCallBack()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:FrontEngine.QueryOrderCallBack)
}

void QueryOrderCallBack::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  order_ = const_cast< ::FrontEngine::Order*>(&::FrontEngine::Order::default_instance());
}

QueryOrderCallBack::QueryOrderCallBack(const QueryOrderCallBack& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:FrontEngine.QueryOrderCallBack)
}

void QueryOrderCallBack::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_ = NULL;
  errorcode_ = 0;
  error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

QueryOrderCallBack::~QueryOrderCallBack() {
  // @@protoc_insertion_point(destructor:FrontEngine.QueryOrderCallBack)
  SharedDtor();
}

void QueryOrderCallBack::SharedDtor() {
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete order_;
  }
}

void QueryOrderCallBack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryOrderCallBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryOrderCallBack_descriptor_;
}

const QueryOrderCallBack& QueryOrderCallBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_front_5fengine_2eproto();
  return *default_instance_;
}

QueryOrderCallBack* QueryOrderCallBack::default_instance_ = NULL;

QueryOrderCallBack* QueryOrderCallBack::New(::google::protobuf::Arena* arena) const {
  QueryOrderCallBack* n = new QueryOrderCallBack;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QueryOrderCallBack::Clear() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && order_ != NULL) delete order_;
  order_ = NULL;
  errorcode_ = 0;
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool QueryOrderCallBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FrontEngine.QueryOrderCallBack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string request_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->request_id().data(), this->request_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "FrontEngine.QueryOrderCallBack.request_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_order;
        break;
      }

      // optional .FrontEngine.Order order = 2;
      case 2: {
        if (tag == 18) {
         parse_order:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_order()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_errorCode;
        break;
      }

      // optional int32 errorCode = 3;
      case 3: {
        if (tag == 24) {
         parse_errorCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errorcode_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_error;
        break;
      }

      // optional string error = 4;
      case 4: {
        if (tag == 34) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->error().data(), this->error().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "FrontEngine.QueryOrderCallBack.error"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FrontEngine.QueryOrderCallBack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FrontEngine.QueryOrderCallBack)
  return false;
#undef DO_
}

void QueryOrderCallBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FrontEngine.QueryOrderCallBack)
  // optional string request_id = 1;
  if (this->request_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_id().data(), this->request_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FrontEngine.QueryOrderCallBack.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->request_id(), output);
  }

  // optional .FrontEngine.Order order = 2;
  if (this->has_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->order_, output);
  }

  // optional int32 errorCode = 3;
  if (this->errorcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->errorcode(), output);
  }

  // optional string error = 4;
  if (this->error().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FrontEngine.QueryOrderCallBack.error");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->error(), output);
  }

  // @@protoc_insertion_point(serialize_end:FrontEngine.QueryOrderCallBack)
}

::google::protobuf::uint8* QueryOrderCallBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:FrontEngine.QueryOrderCallBack)
  // optional string request_id = 1;
  if (this->request_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_id().data(), this->request_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FrontEngine.QueryOrderCallBack.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->request_id(), target);
  }

  // optional .FrontEngine.Order order = 2;
  if (this->has_order()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->order_, target);
  }

  // optional int32 errorCode = 3;
  if (this->errorcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->errorcode(), target);
  }

  // optional string error = 4;
  if (this->error().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FrontEngine.QueryOrderCallBack.error");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->error(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:FrontEngine.QueryOrderCallBack)
  return target;
}

int QueryOrderCallBack::ByteSize() const {
  int total_size = 0;

  // optional string request_id = 1;
  if (this->request_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->request_id());
  }

  // optional .FrontEngine.Order order = 2;
  if (this->has_order()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->order_);
  }

  // optional int32 errorCode = 3;
  if (this->errorcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->errorcode());
  }

  // optional string error = 4;
  if (this->error().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryOrderCallBack::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const QueryOrderCallBack* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const QueryOrderCallBack>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryOrderCallBack::MergeFrom(const QueryOrderCallBack& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.request_id().size() > 0) {

    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  if (from.has_order()) {
    mutable_order()->::FrontEngine::Order::MergeFrom(from.order());
  }
  if (from.errorcode() != 0) {
    set_errorcode(from.errorcode());
  }
  if (from.error().size() > 0) {

    error_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_);
  }
}

void QueryOrderCallBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryOrderCallBack::CopyFrom(const QueryOrderCallBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryOrderCallBack::IsInitialized() const {

  return true;
}

void QueryOrderCallBack::Swap(QueryOrderCallBack* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QueryOrderCallBack::InternalSwap(QueryOrderCallBack* other) {
  request_id_.Swap(&other->request_id_);
  std::swap(order_, other->order_);
  std::swap(errorcode_, other->errorcode_);
  error_.Swap(&other->error_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QueryOrderCallBack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryOrderCallBack_descriptor_;
  metadata.reflection = QueryOrderCallBack_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QueryOrderCallBack

// optional string request_id = 1;
void QueryOrderCallBack::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& QueryOrderCallBack::request_id() const {
  // @@protoc_insertion_point(field_get:FrontEngine.QueryOrderCallBack.request_id)
  return request_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void QueryOrderCallBack::set_request_id(const ::std::string& value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FrontEngine.QueryOrderCallBack.request_id)
}
 void QueryOrderCallBack::set_request_id(const char* value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FrontEngine.QueryOrderCallBack.request_id)
}
 void QueryOrderCallBack::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FrontEngine.QueryOrderCallBack.request_id)
}
 ::std::string* QueryOrderCallBack::mutable_request_id() {
  
  // @@protoc_insertion_point(field_mutable:FrontEngine.QueryOrderCallBack.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* QueryOrderCallBack::release_request_id() {
  
  return request_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void QueryOrderCallBack::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.QueryOrderCallBack.request_id)
}

// optional .FrontEngine.Order order = 2;
bool QueryOrderCallBack::has_order() const {
  return !_is_default_instance_ && order_ != NULL;
}
void QueryOrderCallBack::clear_order() {
  if (GetArenaNoVirtual() == NULL && order_ != NULL) delete order_;
  order_ = NULL;
}
const ::FrontEngine::Order& QueryOrderCallBack::order() const {
  // @@protoc_insertion_point(field_get:FrontEngine.QueryOrderCallBack.order)
  return order_ != NULL ? *order_ : *default_instance_->order_;
}
::FrontEngine::Order* QueryOrderCallBack::mutable_order() {
  
  if (order_ == NULL) {
    order_ = new ::FrontEngine::Order;
  }
  // @@protoc_insertion_point(field_mutable:FrontEngine.QueryOrderCallBack.order)
  return order_;
}
::FrontEngine::Order* QueryOrderCallBack::release_order() {
  
  ::FrontEngine::Order* temp = order_;
  order_ = NULL;
  return temp;
}
void QueryOrderCallBack::set_allocated_order(::FrontEngine::Order* order) {
  delete order_;
  order_ = order;
  if (order) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.QueryOrderCallBack.order)
}

// optional int32 errorCode = 3;
void QueryOrderCallBack::clear_errorcode() {
  errorcode_ = 0;
}
 ::google::protobuf::int32 QueryOrderCallBack::errorcode() const {
  // @@protoc_insertion_point(field_get:FrontEngine.QueryOrderCallBack.errorCode)
  return errorcode_;
}
 void QueryOrderCallBack::set_errorcode(::google::protobuf::int32 value) {
  
  errorcode_ = value;
  // @@protoc_insertion_point(field_set:FrontEngine.QueryOrderCallBack.errorCode)
}

// optional string error = 4;
void QueryOrderCallBack::clear_error() {
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& QueryOrderCallBack::error() const {
  // @@protoc_insertion_point(field_get:FrontEngine.QueryOrderCallBack.error)
  return error_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void QueryOrderCallBack::set_error(const ::std::string& value) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FrontEngine.QueryOrderCallBack.error)
}
 void QueryOrderCallBack::set_error(const char* value) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FrontEngine.QueryOrderCallBack.error)
}
 void QueryOrderCallBack::set_error(const char* value, size_t size) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FrontEngine.QueryOrderCallBack.error)
}
 ::std::string* QueryOrderCallBack::mutable_error() {
  
  // @@protoc_insertion_point(field_mutable:FrontEngine.QueryOrderCallBack.error)
  return error_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* QueryOrderCallBack::release_error() {
  
  return error_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void QueryOrderCallBack::set_allocated_error(::std::string* error) {
  if (error != NULL) {
    
  } else {
    
  }
  error_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error);
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.QueryOrderCallBack.error)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int QueryOrdersRequest::kRequestIdFieldNumber;
const int QueryOrdersRequest::kCoinTypeFieldNumber;
const int QueryOrdersRequest::kAddressFieldNumber;
const int QueryOrdersRequest::kOrderFieldNumber;
#endif  // !_MSC_VER

QueryOrdersRequest::QueryOrdersRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:FrontEngine.QueryOrdersRequest)
}

void QueryOrdersRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  order_ = const_cast< ::FrontEngine::Order*>(&::FrontEngine::Order::default_instance());
}

QueryOrdersRequest::QueryOrdersRequest(const QueryOrdersRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:FrontEngine.QueryOrdersRequest)
}

void QueryOrdersRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  coin_type_ = 0;
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_ = NULL;
}

QueryOrdersRequest::~QueryOrdersRequest() {
  // @@protoc_insertion_point(destructor:FrontEngine.QueryOrdersRequest)
  SharedDtor();
}

void QueryOrdersRequest::SharedDtor() {
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete order_;
  }
}

void QueryOrdersRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryOrdersRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryOrdersRequest_descriptor_;
}

const QueryOrdersRequest& QueryOrdersRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_front_5fengine_2eproto();
  return *default_instance_;
}

QueryOrdersRequest* QueryOrdersRequest::default_instance_ = NULL;

QueryOrdersRequest* QueryOrdersRequest::New(::google::protobuf::Arena* arena) const {
  QueryOrdersRequest* n = new QueryOrdersRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QueryOrdersRequest::Clear() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  coin_type_ = 0;
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && order_ != NULL) delete order_;
  order_ = NULL;
}

bool QueryOrdersRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FrontEngine.QueryOrdersRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string request_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->request_id().data(), this->request_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "FrontEngine.QueryOrdersRequest.request_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_coin_type;
        break;
      }

      // optional .FrontEngine.enums.CoinType coin_type = 2;
      case 2: {
        if (tag == 16) {
         parse_coin_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_coin_type(static_cast< ::FrontEngine::enums_CoinType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_address;
        break;
      }

      // optional string address = 3;
      case 3: {
        if (tag == 26) {
         parse_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->address().data(), this->address().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "FrontEngine.QueryOrdersRequest.address"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_order;
        break;
      }

      // optional .FrontEngine.Order order = 4;
      case 4: {
        if (tag == 34) {
         parse_order:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_order()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FrontEngine.QueryOrdersRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FrontEngine.QueryOrdersRequest)
  return false;
#undef DO_
}

void QueryOrdersRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FrontEngine.QueryOrdersRequest)
  // optional string request_id = 1;
  if (this->request_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_id().data(), this->request_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FrontEngine.QueryOrdersRequest.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->request_id(), output);
  }

  // optional .FrontEngine.enums.CoinType coin_type = 2;
  if (this->coin_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->coin_type(), output);
  }

  // optional string address = 3;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FrontEngine.QueryOrdersRequest.address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->address(), output);
  }

  // optional .FrontEngine.Order order = 4;
  if (this->has_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->order_, output);
  }

  // @@protoc_insertion_point(serialize_end:FrontEngine.QueryOrdersRequest)
}

::google::protobuf::uint8* QueryOrdersRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:FrontEngine.QueryOrdersRequest)
  // optional string request_id = 1;
  if (this->request_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_id().data(), this->request_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FrontEngine.QueryOrdersRequest.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->request_id(), target);
  }

  // optional .FrontEngine.enums.CoinType coin_type = 2;
  if (this->coin_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->coin_type(), target);
  }

  // optional string address = 3;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FrontEngine.QueryOrdersRequest.address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->address(), target);
  }

  // optional .FrontEngine.Order order = 4;
  if (this->has_order()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, *this->order_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:FrontEngine.QueryOrdersRequest)
  return target;
}

int QueryOrdersRequest::ByteSize() const {
  int total_size = 0;

  // optional string request_id = 1;
  if (this->request_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->request_id());
  }

  // optional .FrontEngine.enums.CoinType coin_type = 2;
  if (this->coin_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->coin_type());
  }

  // optional string address = 3;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->address());
  }

  // optional .FrontEngine.Order order = 4;
  if (this->has_order()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->order_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryOrdersRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const QueryOrdersRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const QueryOrdersRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryOrdersRequest::MergeFrom(const QueryOrdersRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.request_id().size() > 0) {

    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  if (from.coin_type() != 0) {
    set_coin_type(from.coin_type());
  }
  if (from.address().size() > 0) {

    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  if (from.has_order()) {
    mutable_order()->::FrontEngine::Order::MergeFrom(from.order());
  }
}

void QueryOrdersRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryOrdersRequest::CopyFrom(const QueryOrdersRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryOrdersRequest::IsInitialized() const {

  return true;
}

void QueryOrdersRequest::Swap(QueryOrdersRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QueryOrdersRequest::InternalSwap(QueryOrdersRequest* other) {
  request_id_.Swap(&other->request_id_);
  std::swap(coin_type_, other->coin_type_);
  address_.Swap(&other->address_);
  std::swap(order_, other->order_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QueryOrdersRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryOrdersRequest_descriptor_;
  metadata.reflection = QueryOrdersRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QueryOrdersRequest

// optional string request_id = 1;
void QueryOrdersRequest::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& QueryOrdersRequest::request_id() const {
  // @@protoc_insertion_point(field_get:FrontEngine.QueryOrdersRequest.request_id)
  return request_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void QueryOrdersRequest::set_request_id(const ::std::string& value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FrontEngine.QueryOrdersRequest.request_id)
}
 void QueryOrdersRequest::set_request_id(const char* value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FrontEngine.QueryOrdersRequest.request_id)
}
 void QueryOrdersRequest::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FrontEngine.QueryOrdersRequest.request_id)
}
 ::std::string* QueryOrdersRequest::mutable_request_id() {
  
  // @@protoc_insertion_point(field_mutable:FrontEngine.QueryOrdersRequest.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* QueryOrdersRequest::release_request_id() {
  
  return request_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void QueryOrdersRequest::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.QueryOrdersRequest.request_id)
}

// optional .FrontEngine.enums.CoinType coin_type = 2;
void QueryOrdersRequest::clear_coin_type() {
  coin_type_ = 0;
}
 ::FrontEngine::enums_CoinType QueryOrdersRequest::coin_type() const {
  // @@protoc_insertion_point(field_get:FrontEngine.QueryOrdersRequest.coin_type)
  return static_cast< ::FrontEngine::enums_CoinType >(coin_type_);
}
 void QueryOrdersRequest::set_coin_type(::FrontEngine::enums_CoinType value) {
  
  coin_type_ = value;
  // @@protoc_insertion_point(field_set:FrontEngine.QueryOrdersRequest.coin_type)
}

// optional string address = 3;
void QueryOrdersRequest::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& QueryOrdersRequest::address() const {
  // @@protoc_insertion_point(field_get:FrontEngine.QueryOrdersRequest.address)
  return address_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void QueryOrdersRequest::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FrontEngine.QueryOrdersRequest.address)
}
 void QueryOrdersRequest::set_address(const char* value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FrontEngine.QueryOrdersRequest.address)
}
 void QueryOrdersRequest::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FrontEngine.QueryOrdersRequest.address)
}
 ::std::string* QueryOrdersRequest::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:FrontEngine.QueryOrdersRequest.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* QueryOrdersRequest::release_address() {
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void QueryOrdersRequest::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.QueryOrdersRequest.address)
}

// optional .FrontEngine.Order order = 4;
bool QueryOrdersRequest::has_order() const {
  return !_is_default_instance_ && order_ != NULL;
}
void QueryOrdersRequest::clear_order() {
  if (GetArenaNoVirtual() == NULL && order_ != NULL) delete order_;
  order_ = NULL;
}
const ::FrontEngine::Order& QueryOrdersRequest::order() const {
  // @@protoc_insertion_point(field_get:FrontEngine.QueryOrdersRequest.order)
  return order_ != NULL ? *order_ : *default_instance_->order_;
}
::FrontEngine::Order* QueryOrdersRequest::mutable_order() {
  
  if (order_ == NULL) {
    order_ = new ::FrontEngine::Order;
  }
  // @@protoc_insertion_point(field_mutable:FrontEngine.QueryOrdersRequest.order)
  return order_;
}
::FrontEngine::Order* QueryOrdersRequest::release_order() {
  
  ::FrontEngine::Order* temp = order_;
  order_ = NULL;
  return temp;
}
void QueryOrdersRequest::set_allocated_order(::FrontEngine::Order* order) {
  delete order_;
  order_ = order;
  if (order) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.QueryOrdersRequest.order)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int QueryOrdersCallBack::kRequestIdFieldNumber;
const int QueryOrdersCallBack::kOrderFieldNumber;
const int QueryOrdersCallBack::kLengthFieldNumber;
const int QueryOrdersCallBack::kErrorCodeFieldNumber;
const int QueryOrdersCallBack::kErrorFieldNumber;
#endif  // !_MSC_VER

QueryOrdersCallBack::QueryOrdersCallBack()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:FrontEngine.QueryOrdersCallBack)
}

void QueryOrdersCallBack::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

QueryOrdersCallBack::QueryOrdersCallBack(const QueryOrdersCallBack& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:FrontEngine.QueryOrdersCallBack)
}

void QueryOrdersCallBack::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  length_ = 0;
  errorcode_ = 0;
  error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

QueryOrdersCallBack::~QueryOrdersCallBack() {
  // @@protoc_insertion_point(destructor:FrontEngine.QueryOrdersCallBack)
  SharedDtor();
}

void QueryOrdersCallBack::SharedDtor() {
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void QueryOrdersCallBack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryOrdersCallBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryOrdersCallBack_descriptor_;
}

const QueryOrdersCallBack& QueryOrdersCallBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_front_5fengine_2eproto();
  return *default_instance_;
}

QueryOrdersCallBack* QueryOrdersCallBack::default_instance_ = NULL;

QueryOrdersCallBack* QueryOrdersCallBack::New(::google::protobuf::Arena* arena) const {
  QueryOrdersCallBack* n = new QueryOrdersCallBack;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QueryOrdersCallBack::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<QueryOrdersCallBack*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(length_, errorcode_);
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

  order_.Clear();
}

bool QueryOrdersCallBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FrontEngine.QueryOrdersCallBack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string request_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->request_id().data(), this->request_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "FrontEngine.QueryOrdersCallBack.request_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_order;
        break;
      }

      // repeated .FrontEngine.Order order = 2;
      case 2: {
        if (tag == 18) {
         parse_order:
          DO_(input->IncrementRecursionDepth());
         parse_loop_order:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_order()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_order;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(24)) goto parse_length;
        break;
      }

      // optional int32 length = 3;
      case 3: {
        if (tag == 24) {
         parse_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &length_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_errorCode;
        break;
      }

      // optional int32 errorCode = 4;
      case 4: {
        if (tag == 32) {
         parse_errorCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errorcode_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_error;
        break;
      }

      // optional string error = 5;
      case 5: {
        if (tag == 42) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->error().data(), this->error().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "FrontEngine.QueryOrdersCallBack.error"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FrontEngine.QueryOrdersCallBack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FrontEngine.QueryOrdersCallBack)
  return false;
#undef DO_
}

void QueryOrdersCallBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FrontEngine.QueryOrdersCallBack)
  // optional string request_id = 1;
  if (this->request_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_id().data(), this->request_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FrontEngine.QueryOrdersCallBack.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->request_id(), output);
  }

  // repeated .FrontEngine.Order order = 2;
  for (unsigned int i = 0, n = this->order_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->order(i), output);
  }

  // optional int32 length = 3;
  if (this->length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->length(), output);
  }

  // optional int32 errorCode = 4;
  if (this->errorcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->errorcode(), output);
  }

  // optional string error = 5;
  if (this->error().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FrontEngine.QueryOrdersCallBack.error");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->error(), output);
  }

  // @@protoc_insertion_point(serialize_end:FrontEngine.QueryOrdersCallBack)
}

::google::protobuf::uint8* QueryOrdersCallBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:FrontEngine.QueryOrdersCallBack)
  // optional string request_id = 1;
  if (this->request_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_id().data(), this->request_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FrontEngine.QueryOrdersCallBack.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->request_id(), target);
  }

  // repeated .FrontEngine.Order order = 2;
  for (unsigned int i = 0, n = this->order_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->order(i), target);
  }

  // optional int32 length = 3;
  if (this->length() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->length(), target);
  }

  // optional int32 errorCode = 4;
  if (this->errorcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->errorcode(), target);
  }

  // optional string error = 5;
  if (this->error().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FrontEngine.QueryOrdersCallBack.error");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->error(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:FrontEngine.QueryOrdersCallBack)
  return target;
}

int QueryOrdersCallBack::ByteSize() const {
  int total_size = 0;

  // optional string request_id = 1;
  if (this->request_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->request_id());
  }

  // optional int32 length = 3;
  if (this->length() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->length());
  }

  // optional int32 errorCode = 4;
  if (this->errorcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->errorcode());
  }

  // optional string error = 5;
  if (this->error().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error());
  }

  // repeated .FrontEngine.Order order = 2;
  total_size += 1 * this->order_size();
  for (int i = 0; i < this->order_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->order(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryOrdersCallBack::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const QueryOrdersCallBack* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const QueryOrdersCallBack>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryOrdersCallBack::MergeFrom(const QueryOrdersCallBack& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  order_.MergeFrom(from.order_);
  if (from.request_id().size() > 0) {

    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  if (from.length() != 0) {
    set_length(from.length());
  }
  if (from.errorcode() != 0) {
    set_errorcode(from.errorcode());
  }
  if (from.error().size() > 0) {

    error_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_);
  }
}

void QueryOrdersCallBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryOrdersCallBack::CopyFrom(const QueryOrdersCallBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryOrdersCallBack::IsInitialized() const {

  return true;
}

void QueryOrdersCallBack::Swap(QueryOrdersCallBack* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QueryOrdersCallBack::InternalSwap(QueryOrdersCallBack* other) {
  request_id_.Swap(&other->request_id_);
  order_.UnsafeArenaSwap(&other->order_);
  std::swap(length_, other->length_);
  std::swap(errorcode_, other->errorcode_);
  error_.Swap(&other->error_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QueryOrdersCallBack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryOrdersCallBack_descriptor_;
  metadata.reflection = QueryOrdersCallBack_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QueryOrdersCallBack

// optional string request_id = 1;
void QueryOrdersCallBack::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& QueryOrdersCallBack::request_id() const {
  // @@protoc_insertion_point(field_get:FrontEngine.QueryOrdersCallBack.request_id)
  return request_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void QueryOrdersCallBack::set_request_id(const ::std::string& value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FrontEngine.QueryOrdersCallBack.request_id)
}
 void QueryOrdersCallBack::set_request_id(const char* value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FrontEngine.QueryOrdersCallBack.request_id)
}
 void QueryOrdersCallBack::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FrontEngine.QueryOrdersCallBack.request_id)
}
 ::std::string* QueryOrdersCallBack::mutable_request_id() {
  
  // @@protoc_insertion_point(field_mutable:FrontEngine.QueryOrdersCallBack.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* QueryOrdersCallBack::release_request_id() {
  
  return request_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void QueryOrdersCallBack::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.QueryOrdersCallBack.request_id)
}

// repeated .FrontEngine.Order order = 2;
int QueryOrdersCallBack::order_size() const {
  return order_.size();
}
void QueryOrdersCallBack::clear_order() {
  order_.Clear();
}
const ::FrontEngine::Order& QueryOrdersCallBack::order(int index) const {
  // @@protoc_insertion_point(field_get:FrontEngine.QueryOrdersCallBack.order)
  return order_.Get(index);
}
::FrontEngine::Order* QueryOrdersCallBack::mutable_order(int index) {
  // @@protoc_insertion_point(field_mutable:FrontEngine.QueryOrdersCallBack.order)
  return order_.Mutable(index);
}
::FrontEngine::Order* QueryOrdersCallBack::add_order() {
  // @@protoc_insertion_point(field_add:FrontEngine.QueryOrdersCallBack.order)
  return order_.Add();
}
::google::protobuf::RepeatedPtrField< ::FrontEngine::Order >*
QueryOrdersCallBack::mutable_order() {
  // @@protoc_insertion_point(field_mutable_list:FrontEngine.QueryOrdersCallBack.order)
  return &order_;
}
const ::google::protobuf::RepeatedPtrField< ::FrontEngine::Order >&
QueryOrdersCallBack::order() const {
  // @@protoc_insertion_point(field_list:FrontEngine.QueryOrdersCallBack.order)
  return order_;
}

// optional int32 length = 3;
void QueryOrdersCallBack::clear_length() {
  length_ = 0;
}
 ::google::protobuf::int32 QueryOrdersCallBack::length() const {
  // @@protoc_insertion_point(field_get:FrontEngine.QueryOrdersCallBack.length)
  return length_;
}
 void QueryOrdersCallBack::set_length(::google::protobuf::int32 value) {
  
  length_ = value;
  // @@protoc_insertion_point(field_set:FrontEngine.QueryOrdersCallBack.length)
}

// optional int32 errorCode = 4;
void QueryOrdersCallBack::clear_errorcode() {
  errorcode_ = 0;
}
 ::google::protobuf::int32 QueryOrdersCallBack::errorcode() const {
  // @@protoc_insertion_point(field_get:FrontEngine.QueryOrdersCallBack.errorCode)
  return errorcode_;
}
 void QueryOrdersCallBack::set_errorcode(::google::protobuf::int32 value) {
  
  errorcode_ = value;
  // @@protoc_insertion_point(field_set:FrontEngine.QueryOrdersCallBack.errorCode)
}

// optional string error = 5;
void QueryOrdersCallBack::clear_error() {
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& QueryOrdersCallBack::error() const {
  // @@protoc_insertion_point(field_get:FrontEngine.QueryOrdersCallBack.error)
  return error_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void QueryOrdersCallBack::set_error(const ::std::string& value) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FrontEngine.QueryOrdersCallBack.error)
}
 void QueryOrdersCallBack::set_error(const char* value) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FrontEngine.QueryOrdersCallBack.error)
}
 void QueryOrdersCallBack::set_error(const char* value, size_t size) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FrontEngine.QueryOrdersCallBack.error)
}
 ::std::string* QueryOrdersCallBack::mutable_error() {
  
  // @@protoc_insertion_point(field_mutable:FrontEngine.QueryOrdersCallBack.error)
  return error_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* QueryOrdersCallBack::release_error() {
  
  return error_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void QueryOrdersCallBack::set_allocated_error(::std::string* error) {
  if (error != NULL) {
    
  } else {
    
  }
  error_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error);
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.QueryOrdersCallBack.error)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int SendCoinRequest::kRequestIdFieldNumber;
const int SendCoinRequest::kCoinTypeFieldNumber;
const int SendCoinRequest::kFromAddressFieldNumber;
const int SendCoinRequest::kFromPwdFieldNumber;
const int SendCoinRequest::kToAddressFieldNumber;
const int SendCoinRequest::kDescriptionFieldNumber;
const int SendCoinRequest::kAmountFieldNumber;
const int SendCoinRequest::kOrderFieldNumber;
#endif  // !_MSC_VER

SendCoinRequest::SendCoinRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:FrontEngine.SendCoinRequest)
}

void SendCoinRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  order_ = const_cast< ::FrontEngine::Order*>(&::FrontEngine::Order::default_instance());
}

SendCoinRequest::SendCoinRequest(const SendCoinRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:FrontEngine.SendCoinRequest)
}

void SendCoinRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  coin_type_ = 0;
  from_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  from_pwd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  to_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  amount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_ = NULL;
}

SendCoinRequest::~SendCoinRequest() {
  // @@protoc_insertion_point(destructor:FrontEngine.SendCoinRequest)
  SharedDtor();
}

void SendCoinRequest::SharedDtor() {
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  from_address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  from_pwd_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  to_address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  amount_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete order_;
  }
}

void SendCoinRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SendCoinRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SendCoinRequest_descriptor_;
}

const SendCoinRequest& SendCoinRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_front_5fengine_2eproto();
  return *default_instance_;
}

SendCoinRequest* SendCoinRequest::default_instance_ = NULL;

SendCoinRequest* SendCoinRequest::New(::google::protobuf::Arena* arena) const {
  SendCoinRequest* n = new SendCoinRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SendCoinRequest::Clear() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  coin_type_ = 0;
  from_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  from_pwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  to_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  amount_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && order_ != NULL) delete order_;
  order_ = NULL;
}

bool SendCoinRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FrontEngine.SendCoinRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string request_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->request_id().data(), this->request_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "FrontEngine.SendCoinRequest.request_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_coin_type;
        break;
      }

      // optional .FrontEngine.enums.CoinType coin_type = 2;
      case 2: {
        if (tag == 16) {
         parse_coin_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_coin_type(static_cast< ::FrontEngine::enums_CoinType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_from_address;
        break;
      }

      // optional string from_address = 3;
      case 3: {
        if (tag == 26) {
         parse_from_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->from_address().data(), this->from_address().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "FrontEngine.SendCoinRequest.from_address"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_from_pwd;
        break;
      }

      // optional string from_pwd = 4;
      case 4: {
        if (tag == 34) {
         parse_from_pwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from_pwd()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->from_pwd().data(), this->from_pwd().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "FrontEngine.SendCoinRequest.from_pwd"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_to_address;
        break;
      }

      // optional string to_address = 5;
      case 5: {
        if (tag == 42) {
         parse_to_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_to_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->to_address().data(), this->to_address().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "FrontEngine.SendCoinRequest.to_address"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_description;
        break;
      }

      // optional string description = 6;
      case 6: {
        if (tag == 50) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "FrontEngine.SendCoinRequest.description"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_amount;
        break;
      }

      // optional string amount = 7;
      case 7: {
        if (tag == 58) {
         parse_amount:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_amount()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->amount().data(), this->amount().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "FrontEngine.SendCoinRequest.amount"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_order;
        break;
      }

      // optional .FrontEngine.Order order = 8;
      case 8: {
        if (tag == 66) {
         parse_order:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_order()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FrontEngine.SendCoinRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FrontEngine.SendCoinRequest)
  return false;
#undef DO_
}

void SendCoinRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FrontEngine.SendCoinRequest)
  // optional string request_id = 1;
  if (this->request_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_id().data(), this->request_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FrontEngine.SendCoinRequest.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->request_id(), output);
  }

  // optional .FrontEngine.enums.CoinType coin_type = 2;
  if (this->coin_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->coin_type(), output);
  }

  // optional string from_address = 3;
  if (this->from_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->from_address().data(), this->from_address().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FrontEngine.SendCoinRequest.from_address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->from_address(), output);
  }

  // optional string from_pwd = 4;
  if (this->from_pwd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->from_pwd().data(), this->from_pwd().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FrontEngine.SendCoinRequest.from_pwd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->from_pwd(), output);
  }

  // optional string to_address = 5;
  if (this->to_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->to_address().data(), this->to_address().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FrontEngine.SendCoinRequest.to_address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->to_address(), output);
  }

  // optional string description = 6;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FrontEngine.SendCoinRequest.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->description(), output);
  }

  // optional string amount = 7;
  if (this->amount().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->amount().data(), this->amount().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FrontEngine.SendCoinRequest.amount");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->amount(), output);
  }

  // optional .FrontEngine.Order order = 8;
  if (this->has_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->order_, output);
  }

  // @@protoc_insertion_point(serialize_end:FrontEngine.SendCoinRequest)
}

::google::protobuf::uint8* SendCoinRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:FrontEngine.SendCoinRequest)
  // optional string request_id = 1;
  if (this->request_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_id().data(), this->request_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FrontEngine.SendCoinRequest.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->request_id(), target);
  }

  // optional .FrontEngine.enums.CoinType coin_type = 2;
  if (this->coin_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->coin_type(), target);
  }

  // optional string from_address = 3;
  if (this->from_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->from_address().data(), this->from_address().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FrontEngine.SendCoinRequest.from_address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->from_address(), target);
  }

  // optional string from_pwd = 4;
  if (this->from_pwd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->from_pwd().data(), this->from_pwd().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FrontEngine.SendCoinRequest.from_pwd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->from_pwd(), target);
  }

  // optional string to_address = 5;
  if (this->to_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->to_address().data(), this->to_address().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FrontEngine.SendCoinRequest.to_address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->to_address(), target);
  }

  // optional string description = 6;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FrontEngine.SendCoinRequest.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->description(), target);
  }

  // optional string amount = 7;
  if (this->amount().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->amount().data(), this->amount().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FrontEngine.SendCoinRequest.amount");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->amount(), target);
  }

  // optional .FrontEngine.Order order = 8;
  if (this->has_order()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, *this->order_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:FrontEngine.SendCoinRequest)
  return target;
}

int SendCoinRequest::ByteSize() const {
  int total_size = 0;

  // optional string request_id = 1;
  if (this->request_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->request_id());
  }

  // optional .FrontEngine.enums.CoinType coin_type = 2;
  if (this->coin_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->coin_type());
  }

  // optional string from_address = 3;
  if (this->from_address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->from_address());
  }

  // optional string from_pwd = 4;
  if (this->from_pwd().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->from_pwd());
  }

  // optional string to_address = 5;
  if (this->to_address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->to_address());
  }

  // optional string description = 6;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());
  }

  // optional string amount = 7;
  if (this->amount().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->amount());
  }

  // optional .FrontEngine.Order order = 8;
  if (this->has_order()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->order_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendCoinRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SendCoinRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SendCoinRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SendCoinRequest::MergeFrom(const SendCoinRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.request_id().size() > 0) {

    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  if (from.coin_type() != 0) {
    set_coin_type(from.coin_type());
  }
  if (from.from_address().size() > 0) {

    from_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_address_);
  }
  if (from.from_pwd().size() > 0) {

    from_pwd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_pwd_);
  }
  if (from.to_address().size() > 0) {

    to_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.to_address_);
  }
  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.amount().size() > 0) {

    amount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.amount_);
  }
  if (from.has_order()) {
    mutable_order()->::FrontEngine::Order::MergeFrom(from.order());
  }
}

void SendCoinRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendCoinRequest::CopyFrom(const SendCoinRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendCoinRequest::IsInitialized() const {

  return true;
}

void SendCoinRequest::Swap(SendCoinRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SendCoinRequest::InternalSwap(SendCoinRequest* other) {
  request_id_.Swap(&other->request_id_);
  std::swap(coin_type_, other->coin_type_);
  from_address_.Swap(&other->from_address_);
  from_pwd_.Swap(&other->from_pwd_);
  to_address_.Swap(&other->to_address_);
  description_.Swap(&other->description_);
  amount_.Swap(&other->amount_);
  std::swap(order_, other->order_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SendCoinRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SendCoinRequest_descriptor_;
  metadata.reflection = SendCoinRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SendCoinRequest

// optional string request_id = 1;
void SendCoinRequest::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& SendCoinRequest::request_id() const {
  // @@protoc_insertion_point(field_get:FrontEngine.SendCoinRequest.request_id)
  return request_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SendCoinRequest::set_request_id(const ::std::string& value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FrontEngine.SendCoinRequest.request_id)
}
 void SendCoinRequest::set_request_id(const char* value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FrontEngine.SendCoinRequest.request_id)
}
 void SendCoinRequest::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FrontEngine.SendCoinRequest.request_id)
}
 ::std::string* SendCoinRequest::mutable_request_id() {
  
  // @@protoc_insertion_point(field_mutable:FrontEngine.SendCoinRequest.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SendCoinRequest::release_request_id() {
  
  return request_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SendCoinRequest::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.SendCoinRequest.request_id)
}

// optional .FrontEngine.enums.CoinType coin_type = 2;
void SendCoinRequest::clear_coin_type() {
  coin_type_ = 0;
}
 ::FrontEngine::enums_CoinType SendCoinRequest::coin_type() const {
  // @@protoc_insertion_point(field_get:FrontEngine.SendCoinRequest.coin_type)
  return static_cast< ::FrontEngine::enums_CoinType >(coin_type_);
}
 void SendCoinRequest::set_coin_type(::FrontEngine::enums_CoinType value) {
  
  coin_type_ = value;
  // @@protoc_insertion_point(field_set:FrontEngine.SendCoinRequest.coin_type)
}

// optional string from_address = 3;
void SendCoinRequest::clear_from_address() {
  from_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& SendCoinRequest::from_address() const {
  // @@protoc_insertion_point(field_get:FrontEngine.SendCoinRequest.from_address)
  return from_address_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SendCoinRequest::set_from_address(const ::std::string& value) {
  
  from_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FrontEngine.SendCoinRequest.from_address)
}
 void SendCoinRequest::set_from_address(const char* value) {
  
  from_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FrontEngine.SendCoinRequest.from_address)
}
 void SendCoinRequest::set_from_address(const char* value, size_t size) {
  
  from_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FrontEngine.SendCoinRequest.from_address)
}
 ::std::string* SendCoinRequest::mutable_from_address() {
  
  // @@protoc_insertion_point(field_mutable:FrontEngine.SendCoinRequest.from_address)
  return from_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SendCoinRequest::release_from_address() {
  
  return from_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SendCoinRequest::set_allocated_from_address(::std::string* from_address) {
  if (from_address != NULL) {
    
  } else {
    
  }
  from_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from_address);
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.SendCoinRequest.from_address)
}

// optional string from_pwd = 4;
void SendCoinRequest::clear_from_pwd() {
  from_pwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& SendCoinRequest::from_pwd() const {
  // @@protoc_insertion_point(field_get:FrontEngine.SendCoinRequest.from_pwd)
  return from_pwd_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SendCoinRequest::set_from_pwd(const ::std::string& value) {
  
  from_pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FrontEngine.SendCoinRequest.from_pwd)
}
 void SendCoinRequest::set_from_pwd(const char* value) {
  
  from_pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FrontEngine.SendCoinRequest.from_pwd)
}
 void SendCoinRequest::set_from_pwd(const char* value, size_t size) {
  
  from_pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FrontEngine.SendCoinRequest.from_pwd)
}
 ::std::string* SendCoinRequest::mutable_from_pwd() {
  
  // @@protoc_insertion_point(field_mutable:FrontEngine.SendCoinRequest.from_pwd)
  return from_pwd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SendCoinRequest::release_from_pwd() {
  
  return from_pwd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SendCoinRequest::set_allocated_from_pwd(::std::string* from_pwd) {
  if (from_pwd != NULL) {
    
  } else {
    
  }
  from_pwd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from_pwd);
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.SendCoinRequest.from_pwd)
}

// optional string to_address = 5;
void SendCoinRequest::clear_to_address() {
  to_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& SendCoinRequest::to_address() const {
  // @@protoc_insertion_point(field_get:FrontEngine.SendCoinRequest.to_address)
  return to_address_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SendCoinRequest::set_to_address(const ::std::string& value) {
  
  to_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FrontEngine.SendCoinRequest.to_address)
}
 void SendCoinRequest::set_to_address(const char* value) {
  
  to_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FrontEngine.SendCoinRequest.to_address)
}
 void SendCoinRequest::set_to_address(const char* value, size_t size) {
  
  to_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FrontEngine.SendCoinRequest.to_address)
}
 ::std::string* SendCoinRequest::mutable_to_address() {
  
  // @@protoc_insertion_point(field_mutable:FrontEngine.SendCoinRequest.to_address)
  return to_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SendCoinRequest::release_to_address() {
  
  return to_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SendCoinRequest::set_allocated_to_address(::std::string* to_address) {
  if (to_address != NULL) {
    
  } else {
    
  }
  to_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), to_address);
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.SendCoinRequest.to_address)
}

// optional string description = 6;
void SendCoinRequest::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& SendCoinRequest::description() const {
  // @@protoc_insertion_point(field_get:FrontEngine.SendCoinRequest.description)
  return description_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SendCoinRequest::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FrontEngine.SendCoinRequest.description)
}
 void SendCoinRequest::set_description(const char* value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FrontEngine.SendCoinRequest.description)
}
 void SendCoinRequest::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FrontEngine.SendCoinRequest.description)
}
 ::std::string* SendCoinRequest::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:FrontEngine.SendCoinRequest.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SendCoinRequest::release_description() {
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SendCoinRequest::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.SendCoinRequest.description)
}

// optional string amount = 7;
void SendCoinRequest::clear_amount() {
  amount_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& SendCoinRequest::amount() const {
  // @@protoc_insertion_point(field_get:FrontEngine.SendCoinRequest.amount)
  return amount_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SendCoinRequest::set_amount(const ::std::string& value) {
  
  amount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FrontEngine.SendCoinRequest.amount)
}
 void SendCoinRequest::set_amount(const char* value) {
  
  amount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FrontEngine.SendCoinRequest.amount)
}
 void SendCoinRequest::set_amount(const char* value, size_t size) {
  
  amount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FrontEngine.SendCoinRequest.amount)
}
 ::std::string* SendCoinRequest::mutable_amount() {
  
  // @@protoc_insertion_point(field_mutable:FrontEngine.SendCoinRequest.amount)
  return amount_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SendCoinRequest::release_amount() {
  
  return amount_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SendCoinRequest::set_allocated_amount(::std::string* amount) {
  if (amount != NULL) {
    
  } else {
    
  }
  amount_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), amount);
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.SendCoinRequest.amount)
}

// optional .FrontEngine.Order order = 8;
bool SendCoinRequest::has_order() const {
  return !_is_default_instance_ && order_ != NULL;
}
void SendCoinRequest::clear_order() {
  if (GetArenaNoVirtual() == NULL && order_ != NULL) delete order_;
  order_ = NULL;
}
const ::FrontEngine::Order& SendCoinRequest::order() const {
  // @@protoc_insertion_point(field_get:FrontEngine.SendCoinRequest.order)
  return order_ != NULL ? *order_ : *default_instance_->order_;
}
::FrontEngine::Order* SendCoinRequest::mutable_order() {
  
  if (order_ == NULL) {
    order_ = new ::FrontEngine::Order;
  }
  // @@protoc_insertion_point(field_mutable:FrontEngine.SendCoinRequest.order)
  return order_;
}
::FrontEngine::Order* SendCoinRequest::release_order() {
  
  ::FrontEngine::Order* temp = order_;
  order_ = NULL;
  return temp;
}
void SendCoinRequest::set_allocated_order(::FrontEngine::Order* order) {
  delete order_;
  order_ = order;
  if (order) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.SendCoinRequest.order)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int RecieveCoinRequest::kRequestIdFieldNumber;
const int RecieveCoinRequest::kCoinTypeFieldNumber;
const int RecieveCoinRequest::kFromAddressFieldNumber;
const int RecieveCoinRequest::kFromPwdFieldNumber;
const int RecieveCoinRequest::kToAddressFieldNumber;
const int RecieveCoinRequest::kDescriptionFieldNumber;
const int RecieveCoinRequest::kAmountFieldNumber;
const int RecieveCoinRequest::kOrderFieldNumber;
#endif  // !_MSC_VER

RecieveCoinRequest::RecieveCoinRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:FrontEngine.RecieveCoinRequest)
}

void RecieveCoinRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  order_ = const_cast< ::FrontEngine::Order*>(&::FrontEngine::Order::default_instance());
}

RecieveCoinRequest::RecieveCoinRequest(const RecieveCoinRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:FrontEngine.RecieveCoinRequest)
}

void RecieveCoinRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  coin_type_ = 0;
  from_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  from_pwd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  to_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  amount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_ = NULL;
}

RecieveCoinRequest::~RecieveCoinRequest() {
  // @@protoc_insertion_point(destructor:FrontEngine.RecieveCoinRequest)
  SharedDtor();
}

void RecieveCoinRequest::SharedDtor() {
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  from_address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  from_pwd_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  to_address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  amount_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete order_;
  }
}

void RecieveCoinRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecieveCoinRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecieveCoinRequest_descriptor_;
}

const RecieveCoinRequest& RecieveCoinRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_front_5fengine_2eproto();
  return *default_instance_;
}

RecieveCoinRequest* RecieveCoinRequest::default_instance_ = NULL;

RecieveCoinRequest* RecieveCoinRequest::New(::google::protobuf::Arena* arena) const {
  RecieveCoinRequest* n = new RecieveCoinRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RecieveCoinRequest::Clear() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  coin_type_ = 0;
  from_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  from_pwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  to_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  amount_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && order_ != NULL) delete order_;
  order_ = NULL;
}

bool RecieveCoinRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FrontEngine.RecieveCoinRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string request_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->request_id().data(), this->request_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "FrontEngine.RecieveCoinRequest.request_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_coin_type;
        break;
      }

      // optional .FrontEngine.enums.CoinType coin_type = 2;
      case 2: {
        if (tag == 16) {
         parse_coin_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_coin_type(static_cast< ::FrontEngine::enums_CoinType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_from_address;
        break;
      }

      // optional string from_address = 3;
      case 3: {
        if (tag == 26) {
         parse_from_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->from_address().data(), this->from_address().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "FrontEngine.RecieveCoinRequest.from_address"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_from_pwd;
        break;
      }

      // optional string from_pwd = 4;
      case 4: {
        if (tag == 34) {
         parse_from_pwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from_pwd()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->from_pwd().data(), this->from_pwd().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "FrontEngine.RecieveCoinRequest.from_pwd"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_to_address;
        break;
      }

      // optional string to_address = 5;
      case 5: {
        if (tag == 42) {
         parse_to_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_to_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->to_address().data(), this->to_address().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "FrontEngine.RecieveCoinRequest.to_address"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_description;
        break;
      }

      // optional string description = 6;
      case 6: {
        if (tag == 50) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "FrontEngine.RecieveCoinRequest.description"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_amount;
        break;
      }

      // optional string amount = 7;
      case 7: {
        if (tag == 58) {
         parse_amount:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_amount()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->amount().data(), this->amount().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "FrontEngine.RecieveCoinRequest.amount"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_order;
        break;
      }

      // optional .FrontEngine.Order order = 8;
      case 8: {
        if (tag == 66) {
         parse_order:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_order()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FrontEngine.RecieveCoinRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FrontEngine.RecieveCoinRequest)
  return false;
#undef DO_
}

void RecieveCoinRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FrontEngine.RecieveCoinRequest)
  // optional string request_id = 1;
  if (this->request_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_id().data(), this->request_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FrontEngine.RecieveCoinRequest.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->request_id(), output);
  }

  // optional .FrontEngine.enums.CoinType coin_type = 2;
  if (this->coin_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->coin_type(), output);
  }

  // optional string from_address = 3;
  if (this->from_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->from_address().data(), this->from_address().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FrontEngine.RecieveCoinRequest.from_address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->from_address(), output);
  }

  // optional string from_pwd = 4;
  if (this->from_pwd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->from_pwd().data(), this->from_pwd().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FrontEngine.RecieveCoinRequest.from_pwd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->from_pwd(), output);
  }

  // optional string to_address = 5;
  if (this->to_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->to_address().data(), this->to_address().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FrontEngine.RecieveCoinRequest.to_address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->to_address(), output);
  }

  // optional string description = 6;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FrontEngine.RecieveCoinRequest.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->description(), output);
  }

  // optional string amount = 7;
  if (this->amount().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->amount().data(), this->amount().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FrontEngine.RecieveCoinRequest.amount");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->amount(), output);
  }

  // optional .FrontEngine.Order order = 8;
  if (this->has_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->order_, output);
  }

  // @@protoc_insertion_point(serialize_end:FrontEngine.RecieveCoinRequest)
}

::google::protobuf::uint8* RecieveCoinRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:FrontEngine.RecieveCoinRequest)
  // optional string request_id = 1;
  if (this->request_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_id().data(), this->request_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FrontEngine.RecieveCoinRequest.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->request_id(), target);
  }

  // optional .FrontEngine.enums.CoinType coin_type = 2;
  if (this->coin_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->coin_type(), target);
  }

  // optional string from_address = 3;
  if (this->from_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->from_address().data(), this->from_address().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FrontEngine.RecieveCoinRequest.from_address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->from_address(), target);
  }

  // optional string from_pwd = 4;
  if (this->from_pwd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->from_pwd().data(), this->from_pwd().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FrontEngine.RecieveCoinRequest.from_pwd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->from_pwd(), target);
  }

  // optional string to_address = 5;
  if (this->to_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->to_address().data(), this->to_address().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FrontEngine.RecieveCoinRequest.to_address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->to_address(), target);
  }

  // optional string description = 6;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FrontEngine.RecieveCoinRequest.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->description(), target);
  }

  // optional string amount = 7;
  if (this->amount().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->amount().data(), this->amount().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FrontEngine.RecieveCoinRequest.amount");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->amount(), target);
  }

  // optional .FrontEngine.Order order = 8;
  if (this->has_order()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, *this->order_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:FrontEngine.RecieveCoinRequest)
  return target;
}

int RecieveCoinRequest::ByteSize() const {
  int total_size = 0;

  // optional string request_id = 1;
  if (this->request_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->request_id());
  }

  // optional .FrontEngine.enums.CoinType coin_type = 2;
  if (this->coin_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->coin_type());
  }

  // optional string from_address = 3;
  if (this->from_address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->from_address());
  }

  // optional string from_pwd = 4;
  if (this->from_pwd().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->from_pwd());
  }

  // optional string to_address = 5;
  if (this->to_address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->to_address());
  }

  // optional string description = 6;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());
  }

  // optional string amount = 7;
  if (this->amount().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->amount());
  }

  // optional .FrontEngine.Order order = 8;
  if (this->has_order()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->order_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecieveCoinRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RecieveCoinRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RecieveCoinRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RecieveCoinRequest::MergeFrom(const RecieveCoinRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.request_id().size() > 0) {

    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  if (from.coin_type() != 0) {
    set_coin_type(from.coin_type());
  }
  if (from.from_address().size() > 0) {

    from_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_address_);
  }
  if (from.from_pwd().size() > 0) {

    from_pwd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_pwd_);
  }
  if (from.to_address().size() > 0) {

    to_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.to_address_);
  }
  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.amount().size() > 0) {

    amount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.amount_);
  }
  if (from.has_order()) {
    mutable_order()->::FrontEngine::Order::MergeFrom(from.order());
  }
}

void RecieveCoinRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecieveCoinRequest::CopyFrom(const RecieveCoinRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecieveCoinRequest::IsInitialized() const {

  return true;
}

void RecieveCoinRequest::Swap(RecieveCoinRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RecieveCoinRequest::InternalSwap(RecieveCoinRequest* other) {
  request_id_.Swap(&other->request_id_);
  std::swap(coin_type_, other->coin_type_);
  from_address_.Swap(&other->from_address_);
  from_pwd_.Swap(&other->from_pwd_);
  to_address_.Swap(&other->to_address_);
  description_.Swap(&other->description_);
  amount_.Swap(&other->amount_);
  std::swap(order_, other->order_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RecieveCoinRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecieveCoinRequest_descriptor_;
  metadata.reflection = RecieveCoinRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RecieveCoinRequest

// optional string request_id = 1;
void RecieveCoinRequest::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& RecieveCoinRequest::request_id() const {
  // @@protoc_insertion_point(field_get:FrontEngine.RecieveCoinRequest.request_id)
  return request_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RecieveCoinRequest::set_request_id(const ::std::string& value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FrontEngine.RecieveCoinRequest.request_id)
}
 void RecieveCoinRequest::set_request_id(const char* value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FrontEngine.RecieveCoinRequest.request_id)
}
 void RecieveCoinRequest::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FrontEngine.RecieveCoinRequest.request_id)
}
 ::std::string* RecieveCoinRequest::mutable_request_id() {
  
  // @@protoc_insertion_point(field_mutable:FrontEngine.RecieveCoinRequest.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RecieveCoinRequest::release_request_id() {
  
  return request_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RecieveCoinRequest::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.RecieveCoinRequest.request_id)
}

// optional .FrontEngine.enums.CoinType coin_type = 2;
void RecieveCoinRequest::clear_coin_type() {
  coin_type_ = 0;
}
 ::FrontEngine::enums_CoinType RecieveCoinRequest::coin_type() const {
  // @@protoc_insertion_point(field_get:FrontEngine.RecieveCoinRequest.coin_type)
  return static_cast< ::FrontEngine::enums_CoinType >(coin_type_);
}
 void RecieveCoinRequest::set_coin_type(::FrontEngine::enums_CoinType value) {
  
  coin_type_ = value;
  // @@protoc_insertion_point(field_set:FrontEngine.RecieveCoinRequest.coin_type)
}

// optional string from_address = 3;
void RecieveCoinRequest::clear_from_address() {
  from_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& RecieveCoinRequest::from_address() const {
  // @@protoc_insertion_point(field_get:FrontEngine.RecieveCoinRequest.from_address)
  return from_address_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RecieveCoinRequest::set_from_address(const ::std::string& value) {
  
  from_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FrontEngine.RecieveCoinRequest.from_address)
}
 void RecieveCoinRequest::set_from_address(const char* value) {
  
  from_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FrontEngine.RecieveCoinRequest.from_address)
}
 void RecieveCoinRequest::set_from_address(const char* value, size_t size) {
  
  from_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FrontEngine.RecieveCoinRequest.from_address)
}
 ::std::string* RecieveCoinRequest::mutable_from_address() {
  
  // @@protoc_insertion_point(field_mutable:FrontEngine.RecieveCoinRequest.from_address)
  return from_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RecieveCoinRequest::release_from_address() {
  
  return from_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RecieveCoinRequest::set_allocated_from_address(::std::string* from_address) {
  if (from_address != NULL) {
    
  } else {
    
  }
  from_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from_address);
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.RecieveCoinRequest.from_address)
}

// optional string from_pwd = 4;
void RecieveCoinRequest::clear_from_pwd() {
  from_pwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& RecieveCoinRequest::from_pwd() const {
  // @@protoc_insertion_point(field_get:FrontEngine.RecieveCoinRequest.from_pwd)
  return from_pwd_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RecieveCoinRequest::set_from_pwd(const ::std::string& value) {
  
  from_pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FrontEngine.RecieveCoinRequest.from_pwd)
}
 void RecieveCoinRequest::set_from_pwd(const char* value) {
  
  from_pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FrontEngine.RecieveCoinRequest.from_pwd)
}
 void RecieveCoinRequest::set_from_pwd(const char* value, size_t size) {
  
  from_pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FrontEngine.RecieveCoinRequest.from_pwd)
}
 ::std::string* RecieveCoinRequest::mutable_from_pwd() {
  
  // @@protoc_insertion_point(field_mutable:FrontEngine.RecieveCoinRequest.from_pwd)
  return from_pwd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RecieveCoinRequest::release_from_pwd() {
  
  return from_pwd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RecieveCoinRequest::set_allocated_from_pwd(::std::string* from_pwd) {
  if (from_pwd != NULL) {
    
  } else {
    
  }
  from_pwd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from_pwd);
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.RecieveCoinRequest.from_pwd)
}

// optional string to_address = 5;
void RecieveCoinRequest::clear_to_address() {
  to_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& RecieveCoinRequest::to_address() const {
  // @@protoc_insertion_point(field_get:FrontEngine.RecieveCoinRequest.to_address)
  return to_address_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RecieveCoinRequest::set_to_address(const ::std::string& value) {
  
  to_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FrontEngine.RecieveCoinRequest.to_address)
}
 void RecieveCoinRequest::set_to_address(const char* value) {
  
  to_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FrontEngine.RecieveCoinRequest.to_address)
}
 void RecieveCoinRequest::set_to_address(const char* value, size_t size) {
  
  to_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FrontEngine.RecieveCoinRequest.to_address)
}
 ::std::string* RecieveCoinRequest::mutable_to_address() {
  
  // @@protoc_insertion_point(field_mutable:FrontEngine.RecieveCoinRequest.to_address)
  return to_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RecieveCoinRequest::release_to_address() {
  
  return to_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RecieveCoinRequest::set_allocated_to_address(::std::string* to_address) {
  if (to_address != NULL) {
    
  } else {
    
  }
  to_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), to_address);
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.RecieveCoinRequest.to_address)
}

// optional string description = 6;
void RecieveCoinRequest::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& RecieveCoinRequest::description() const {
  // @@protoc_insertion_point(field_get:FrontEngine.RecieveCoinRequest.description)
  return description_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RecieveCoinRequest::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FrontEngine.RecieveCoinRequest.description)
}
 void RecieveCoinRequest::set_description(const char* value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FrontEngine.RecieveCoinRequest.description)
}
 void RecieveCoinRequest::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FrontEngine.RecieveCoinRequest.description)
}
 ::std::string* RecieveCoinRequest::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:FrontEngine.RecieveCoinRequest.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RecieveCoinRequest::release_description() {
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RecieveCoinRequest::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.RecieveCoinRequest.description)
}

// optional string amount = 7;
void RecieveCoinRequest::clear_amount() {
  amount_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& RecieveCoinRequest::amount() const {
  // @@protoc_insertion_point(field_get:FrontEngine.RecieveCoinRequest.amount)
  return amount_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RecieveCoinRequest::set_amount(const ::std::string& value) {
  
  amount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FrontEngine.RecieveCoinRequest.amount)
}
 void RecieveCoinRequest::set_amount(const char* value) {
  
  amount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FrontEngine.RecieveCoinRequest.amount)
}
 void RecieveCoinRequest::set_amount(const char* value, size_t size) {
  
  amount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FrontEngine.RecieveCoinRequest.amount)
}
 ::std::string* RecieveCoinRequest::mutable_amount() {
  
  // @@protoc_insertion_point(field_mutable:FrontEngine.RecieveCoinRequest.amount)
  return amount_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RecieveCoinRequest::release_amount() {
  
  return amount_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RecieveCoinRequest::set_allocated_amount(::std::string* amount) {
  if (amount != NULL) {
    
  } else {
    
  }
  amount_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), amount);
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.RecieveCoinRequest.amount)
}

// optional .FrontEngine.Order order = 8;
bool RecieveCoinRequest::has_order() const {
  return !_is_default_instance_ && order_ != NULL;
}
void RecieveCoinRequest::clear_order() {
  if (GetArenaNoVirtual() == NULL && order_ != NULL) delete order_;
  order_ = NULL;
}
const ::FrontEngine::Order& RecieveCoinRequest::order() const {
  // @@protoc_insertion_point(field_get:FrontEngine.RecieveCoinRequest.order)
  return order_ != NULL ? *order_ : *default_instance_->order_;
}
::FrontEngine::Order* RecieveCoinRequest::mutable_order() {
  
  if (order_ == NULL) {
    order_ = new ::FrontEngine::Order;
  }
  // @@protoc_insertion_point(field_mutable:FrontEngine.RecieveCoinRequest.order)
  return order_;
}
::FrontEngine::Order* RecieveCoinRequest::release_order() {
  
  ::FrontEngine::Order* temp = order_;
  order_ = NULL;
  return temp;
}
void RecieveCoinRequest::set_allocated_order(::FrontEngine::Order* order) {
  delete order_;
  order_ = order;
  if (order) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.RecieveCoinRequest.order)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int TradedCallBack::kRequestIdFieldNumber;
const int TradedCallBack::kOrderFieldNumber;
const int TradedCallBack::kErrorCodeFieldNumber;
const int TradedCallBack::kErrorFieldNumber;
#endif  // !_MSC_VER

TradedCallBack::TradedCallBack()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:FrontEngine.TradedCallBack)
}

void TradedCallBack::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  order_ = const_cast< ::FrontEngine::Order*>(&::FrontEngine::Order::default_instance());
}

TradedCallBack::TradedCallBack(const TradedCallBack& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:FrontEngine.TradedCallBack)
}

void TradedCallBack::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_ = NULL;
  errorcode_ = 0;
  error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

TradedCallBack::~TradedCallBack() {
  // @@protoc_insertion_point(destructor:FrontEngine.TradedCallBack)
  SharedDtor();
}

void TradedCallBack::SharedDtor() {
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete order_;
  }
}

void TradedCallBack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TradedCallBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TradedCallBack_descriptor_;
}

const TradedCallBack& TradedCallBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_front_5fengine_2eproto();
  return *default_instance_;
}

TradedCallBack* TradedCallBack::default_instance_ = NULL;

TradedCallBack* TradedCallBack::New(::google::protobuf::Arena* arena) const {
  TradedCallBack* n = new TradedCallBack;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TradedCallBack::Clear() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && order_ != NULL) delete order_;
  order_ = NULL;
  errorcode_ = 0;
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool TradedCallBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FrontEngine.TradedCallBack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string request_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->request_id().data(), this->request_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "FrontEngine.TradedCallBack.request_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_order;
        break;
      }

      // optional .FrontEngine.Order order = 2;
      case 2: {
        if (tag == 18) {
         parse_order:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_order()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_errorCode;
        break;
      }

      // optional int32 errorCode = 3;
      case 3: {
        if (tag == 24) {
         parse_errorCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errorcode_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_error;
        break;
      }

      // optional string error = 4;
      case 4: {
        if (tag == 34) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->error().data(), this->error().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "FrontEngine.TradedCallBack.error"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FrontEngine.TradedCallBack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FrontEngine.TradedCallBack)
  return false;
#undef DO_
}

void TradedCallBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FrontEngine.TradedCallBack)
  // optional string request_id = 1;
  if (this->request_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_id().data(), this->request_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FrontEngine.TradedCallBack.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->request_id(), output);
  }

  // optional .FrontEngine.Order order = 2;
  if (this->has_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->order_, output);
  }

  // optional int32 errorCode = 3;
  if (this->errorcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->errorcode(), output);
  }

  // optional string error = 4;
  if (this->error().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FrontEngine.TradedCallBack.error");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->error(), output);
  }

  // @@protoc_insertion_point(serialize_end:FrontEngine.TradedCallBack)
}

::google::protobuf::uint8* TradedCallBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:FrontEngine.TradedCallBack)
  // optional string request_id = 1;
  if (this->request_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_id().data(), this->request_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FrontEngine.TradedCallBack.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->request_id(), target);
  }

  // optional .FrontEngine.Order order = 2;
  if (this->has_order()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->order_, target);
  }

  // optional int32 errorCode = 3;
  if (this->errorcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->errorcode(), target);
  }

  // optional string error = 4;
  if (this->error().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FrontEngine.TradedCallBack.error");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->error(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:FrontEngine.TradedCallBack)
  return target;
}

int TradedCallBack::ByteSize() const {
  int total_size = 0;

  // optional string request_id = 1;
  if (this->request_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->request_id());
  }

  // optional .FrontEngine.Order order = 2;
  if (this->has_order()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->order_);
  }

  // optional int32 errorCode = 3;
  if (this->errorcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->errorcode());
  }

  // optional string error = 4;
  if (this->error().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TradedCallBack::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TradedCallBack* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TradedCallBack>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TradedCallBack::MergeFrom(const TradedCallBack& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.request_id().size() > 0) {

    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  if (from.has_order()) {
    mutable_order()->::FrontEngine::Order::MergeFrom(from.order());
  }
  if (from.errorcode() != 0) {
    set_errorcode(from.errorcode());
  }
  if (from.error().size() > 0) {

    error_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_);
  }
}

void TradedCallBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TradedCallBack::CopyFrom(const TradedCallBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradedCallBack::IsInitialized() const {

  return true;
}

void TradedCallBack::Swap(TradedCallBack* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TradedCallBack::InternalSwap(TradedCallBack* other) {
  request_id_.Swap(&other->request_id_);
  std::swap(order_, other->order_);
  std::swap(errorcode_, other->errorcode_);
  error_.Swap(&other->error_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TradedCallBack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TradedCallBack_descriptor_;
  metadata.reflection = TradedCallBack_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TradedCallBack

// optional string request_id = 1;
void TradedCallBack::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& TradedCallBack::request_id() const {
  // @@protoc_insertion_point(field_get:FrontEngine.TradedCallBack.request_id)
  return request_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TradedCallBack::set_request_id(const ::std::string& value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FrontEngine.TradedCallBack.request_id)
}
 void TradedCallBack::set_request_id(const char* value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FrontEngine.TradedCallBack.request_id)
}
 void TradedCallBack::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FrontEngine.TradedCallBack.request_id)
}
 ::std::string* TradedCallBack::mutable_request_id() {
  
  // @@protoc_insertion_point(field_mutable:FrontEngine.TradedCallBack.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TradedCallBack::release_request_id() {
  
  return request_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TradedCallBack::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.TradedCallBack.request_id)
}

// optional .FrontEngine.Order order = 2;
bool TradedCallBack::has_order() const {
  return !_is_default_instance_ && order_ != NULL;
}
void TradedCallBack::clear_order() {
  if (GetArenaNoVirtual() == NULL && order_ != NULL) delete order_;
  order_ = NULL;
}
const ::FrontEngine::Order& TradedCallBack::order() const {
  // @@protoc_insertion_point(field_get:FrontEngine.TradedCallBack.order)
  return order_ != NULL ? *order_ : *default_instance_->order_;
}
::FrontEngine::Order* TradedCallBack::mutable_order() {
  
  if (order_ == NULL) {
    order_ = new ::FrontEngine::Order;
  }
  // @@protoc_insertion_point(field_mutable:FrontEngine.TradedCallBack.order)
  return order_;
}
::FrontEngine::Order* TradedCallBack::release_order() {
  
  ::FrontEngine::Order* temp = order_;
  order_ = NULL;
  return temp;
}
void TradedCallBack::set_allocated_order(::FrontEngine::Order* order) {
  delete order_;
  order_ = order;
  if (order) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.TradedCallBack.order)
}

// optional int32 errorCode = 3;
void TradedCallBack::clear_errorcode() {
  errorcode_ = 0;
}
 ::google::protobuf::int32 TradedCallBack::errorcode() const {
  // @@protoc_insertion_point(field_get:FrontEngine.TradedCallBack.errorCode)
  return errorcode_;
}
 void TradedCallBack::set_errorcode(::google::protobuf::int32 value) {
  
  errorcode_ = value;
  // @@protoc_insertion_point(field_set:FrontEngine.TradedCallBack.errorCode)
}

// optional string error = 4;
void TradedCallBack::clear_error() {
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& TradedCallBack::error() const {
  // @@protoc_insertion_point(field_get:FrontEngine.TradedCallBack.error)
  return error_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TradedCallBack::set_error(const ::std::string& value) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FrontEngine.TradedCallBack.error)
}
 void TradedCallBack::set_error(const char* value) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FrontEngine.TradedCallBack.error)
}
 void TradedCallBack::set_error(const char* value, size_t size) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FrontEngine.TradedCallBack.error)
}
 ::std::string* TradedCallBack::mutable_error() {
  
  // @@protoc_insertion_point(field_mutable:FrontEngine.TradedCallBack.error)
  return error_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TradedCallBack::release_error() {
  
  return error_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TradedCallBack::set_allocated_error(::std::string* error) {
  if (error != NULL) {
    
  } else {
    
  }
  error_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error);
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.TradedCallBack.error)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CanceledCallBack::kRequestIdFieldNumber;
const int CanceledCallBack::kOrderFieldNumber;
const int CanceledCallBack::kErrorCodeFieldNumber;
const int CanceledCallBack::kErrorFieldNumber;
#endif  // !_MSC_VER

CanceledCallBack::CanceledCallBack()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:FrontEngine.CanceledCallBack)
}

void CanceledCallBack::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  order_ = const_cast< ::FrontEngine::Order*>(&::FrontEngine::Order::default_instance());
}

CanceledCallBack::CanceledCallBack(const CanceledCallBack& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:FrontEngine.CanceledCallBack)
}

void CanceledCallBack::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_ = NULL;
  errorcode_ = 0;
  error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CanceledCallBack::~CanceledCallBack() {
  // @@protoc_insertion_point(destructor:FrontEngine.CanceledCallBack)
  SharedDtor();
}

void CanceledCallBack::SharedDtor() {
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete order_;
  }
}

void CanceledCallBack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CanceledCallBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CanceledCallBack_descriptor_;
}

const CanceledCallBack& CanceledCallBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_front_5fengine_2eproto();
  return *default_instance_;
}

CanceledCallBack* CanceledCallBack::default_instance_ = NULL;

CanceledCallBack* CanceledCallBack::New(::google::protobuf::Arena* arena) const {
  CanceledCallBack* n = new CanceledCallBack;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CanceledCallBack::Clear() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && order_ != NULL) delete order_;
  order_ = NULL;
  errorcode_ = 0;
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool CanceledCallBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FrontEngine.CanceledCallBack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string request_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->request_id().data(), this->request_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "FrontEngine.CanceledCallBack.request_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_order;
        break;
      }

      // optional .FrontEngine.Order order = 2;
      case 2: {
        if (tag == 18) {
         parse_order:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_order()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_errorCode;
        break;
      }

      // optional int32 errorCode = 3;
      case 3: {
        if (tag == 24) {
         parse_errorCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errorcode_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_error;
        break;
      }

      // optional string error = 4;
      case 4: {
        if (tag == 34) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->error().data(), this->error().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "FrontEngine.CanceledCallBack.error"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FrontEngine.CanceledCallBack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FrontEngine.CanceledCallBack)
  return false;
#undef DO_
}

void CanceledCallBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FrontEngine.CanceledCallBack)
  // optional string request_id = 1;
  if (this->request_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_id().data(), this->request_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FrontEngine.CanceledCallBack.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->request_id(), output);
  }

  // optional .FrontEngine.Order order = 2;
  if (this->has_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->order_, output);
  }

  // optional int32 errorCode = 3;
  if (this->errorcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->errorcode(), output);
  }

  // optional string error = 4;
  if (this->error().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FrontEngine.CanceledCallBack.error");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->error(), output);
  }

  // @@protoc_insertion_point(serialize_end:FrontEngine.CanceledCallBack)
}

::google::protobuf::uint8* CanceledCallBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:FrontEngine.CanceledCallBack)
  // optional string request_id = 1;
  if (this->request_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_id().data(), this->request_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FrontEngine.CanceledCallBack.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->request_id(), target);
  }

  // optional .FrontEngine.Order order = 2;
  if (this->has_order()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->order_, target);
  }

  // optional int32 errorCode = 3;
  if (this->errorcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->errorcode(), target);
  }

  // optional string error = 4;
  if (this->error().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FrontEngine.CanceledCallBack.error");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->error(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:FrontEngine.CanceledCallBack)
  return target;
}

int CanceledCallBack::ByteSize() const {
  int total_size = 0;

  // optional string request_id = 1;
  if (this->request_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->request_id());
  }

  // optional .FrontEngine.Order order = 2;
  if (this->has_order()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->order_);
  }

  // optional int32 errorCode = 3;
  if (this->errorcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->errorcode());
  }

  // optional string error = 4;
  if (this->error().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CanceledCallBack::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CanceledCallBack* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CanceledCallBack>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CanceledCallBack::MergeFrom(const CanceledCallBack& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.request_id().size() > 0) {

    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  if (from.has_order()) {
    mutable_order()->::FrontEngine::Order::MergeFrom(from.order());
  }
  if (from.errorcode() != 0) {
    set_errorcode(from.errorcode());
  }
  if (from.error().size() > 0) {

    error_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_);
  }
}

void CanceledCallBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CanceledCallBack::CopyFrom(const CanceledCallBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CanceledCallBack::IsInitialized() const {

  return true;
}

void CanceledCallBack::Swap(CanceledCallBack* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CanceledCallBack::InternalSwap(CanceledCallBack* other) {
  request_id_.Swap(&other->request_id_);
  std::swap(order_, other->order_);
  std::swap(errorcode_, other->errorcode_);
  error_.Swap(&other->error_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CanceledCallBack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CanceledCallBack_descriptor_;
  metadata.reflection = CanceledCallBack_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CanceledCallBack

// optional string request_id = 1;
void CanceledCallBack::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& CanceledCallBack::request_id() const {
  // @@protoc_insertion_point(field_get:FrontEngine.CanceledCallBack.request_id)
  return request_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CanceledCallBack::set_request_id(const ::std::string& value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FrontEngine.CanceledCallBack.request_id)
}
 void CanceledCallBack::set_request_id(const char* value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FrontEngine.CanceledCallBack.request_id)
}
 void CanceledCallBack::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FrontEngine.CanceledCallBack.request_id)
}
 ::std::string* CanceledCallBack::mutable_request_id() {
  
  // @@protoc_insertion_point(field_mutable:FrontEngine.CanceledCallBack.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CanceledCallBack::release_request_id() {
  
  return request_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CanceledCallBack::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.CanceledCallBack.request_id)
}

// optional .FrontEngine.Order order = 2;
bool CanceledCallBack::has_order() const {
  return !_is_default_instance_ && order_ != NULL;
}
void CanceledCallBack::clear_order() {
  if (GetArenaNoVirtual() == NULL && order_ != NULL) delete order_;
  order_ = NULL;
}
const ::FrontEngine::Order& CanceledCallBack::order() const {
  // @@protoc_insertion_point(field_get:FrontEngine.CanceledCallBack.order)
  return order_ != NULL ? *order_ : *default_instance_->order_;
}
::FrontEngine::Order* CanceledCallBack::mutable_order() {
  
  if (order_ == NULL) {
    order_ = new ::FrontEngine::Order;
  }
  // @@protoc_insertion_point(field_mutable:FrontEngine.CanceledCallBack.order)
  return order_;
}
::FrontEngine::Order* CanceledCallBack::release_order() {
  
  ::FrontEngine::Order* temp = order_;
  order_ = NULL;
  return temp;
}
void CanceledCallBack::set_allocated_order(::FrontEngine::Order* order) {
  delete order_;
  order_ = order;
  if (order) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.CanceledCallBack.order)
}

// optional int32 errorCode = 3;
void CanceledCallBack::clear_errorcode() {
  errorcode_ = 0;
}
 ::google::protobuf::int32 CanceledCallBack::errorcode() const {
  // @@protoc_insertion_point(field_get:FrontEngine.CanceledCallBack.errorCode)
  return errorcode_;
}
 void CanceledCallBack::set_errorcode(::google::protobuf::int32 value) {
  
  errorcode_ = value;
  // @@protoc_insertion_point(field_set:FrontEngine.CanceledCallBack.errorCode)
}

// optional string error = 4;
void CanceledCallBack::clear_error() {
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& CanceledCallBack::error() const {
  // @@protoc_insertion_point(field_get:FrontEngine.CanceledCallBack.error)
  return error_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CanceledCallBack::set_error(const ::std::string& value) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FrontEngine.CanceledCallBack.error)
}
 void CanceledCallBack::set_error(const char* value) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FrontEngine.CanceledCallBack.error)
}
 void CanceledCallBack::set_error(const char* value, size_t size) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FrontEngine.CanceledCallBack.error)
}
 ::std::string* CanceledCallBack::mutable_error() {
  
  // @@protoc_insertion_point(field_mutable:FrontEngine.CanceledCallBack.error)
  return error_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CanceledCallBack::release_error() {
  
  return error_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CanceledCallBack::set_allocated_error(::std::string* error) {
  if (error != NULL) {
    
  } else {
    
  }
  error_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error);
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.CanceledCallBack.error)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CanceledRequest::kRequestIdFieldNumber;
const int CanceledRequest::kOrderFieldNumber;
#endif  // !_MSC_VER

CanceledRequest::CanceledRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:FrontEngine.CanceledRequest)
}

void CanceledRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  order_ = const_cast< ::FrontEngine::Order*>(&::FrontEngine::Order::default_instance());
}

CanceledRequest::CanceledRequest(const CanceledRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:FrontEngine.CanceledRequest)
}

void CanceledRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_ = NULL;
}

CanceledRequest::~CanceledRequest() {
  // @@protoc_insertion_point(destructor:FrontEngine.CanceledRequest)
  SharedDtor();
}

void CanceledRequest::SharedDtor() {
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete order_;
  }
}

void CanceledRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CanceledRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CanceledRequest_descriptor_;
}

const CanceledRequest& CanceledRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_front_5fengine_2eproto();
  return *default_instance_;
}

CanceledRequest* CanceledRequest::default_instance_ = NULL;

CanceledRequest* CanceledRequest::New(::google::protobuf::Arena* arena) const {
  CanceledRequest* n = new CanceledRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CanceledRequest::Clear() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && order_ != NULL) delete order_;
  order_ = NULL;
}

bool CanceledRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FrontEngine.CanceledRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string request_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->request_id().data(), this->request_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "FrontEngine.CanceledRequest.request_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_order;
        break;
      }

      // optional .FrontEngine.Order order = 2;
      case 2: {
        if (tag == 18) {
         parse_order:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_order()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FrontEngine.CanceledRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FrontEngine.CanceledRequest)
  return false;
#undef DO_
}

void CanceledRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FrontEngine.CanceledRequest)
  // optional string request_id = 1;
  if (this->request_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_id().data(), this->request_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FrontEngine.CanceledRequest.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->request_id(), output);
  }

  // optional .FrontEngine.Order order = 2;
  if (this->has_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->order_, output);
  }

  // @@protoc_insertion_point(serialize_end:FrontEngine.CanceledRequest)
}

::google::protobuf::uint8* CanceledRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:FrontEngine.CanceledRequest)
  // optional string request_id = 1;
  if (this->request_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_id().data(), this->request_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FrontEngine.CanceledRequest.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->request_id(), target);
  }

  // optional .FrontEngine.Order order = 2;
  if (this->has_order()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->order_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:FrontEngine.CanceledRequest)
  return target;
}

int CanceledRequest::ByteSize() const {
  int total_size = 0;

  // optional string request_id = 1;
  if (this->request_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->request_id());
  }

  // optional .FrontEngine.Order order = 2;
  if (this->has_order()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->order_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CanceledRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CanceledRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CanceledRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CanceledRequest::MergeFrom(const CanceledRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.request_id().size() > 0) {

    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  if (from.has_order()) {
    mutable_order()->::FrontEngine::Order::MergeFrom(from.order());
  }
}

void CanceledRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CanceledRequest::CopyFrom(const CanceledRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CanceledRequest::IsInitialized() const {

  return true;
}

void CanceledRequest::Swap(CanceledRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CanceledRequest::InternalSwap(CanceledRequest* other) {
  request_id_.Swap(&other->request_id_);
  std::swap(order_, other->order_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CanceledRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CanceledRequest_descriptor_;
  metadata.reflection = CanceledRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CanceledRequest

// optional string request_id = 1;
void CanceledRequest::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& CanceledRequest::request_id() const {
  // @@protoc_insertion_point(field_get:FrontEngine.CanceledRequest.request_id)
  return request_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CanceledRequest::set_request_id(const ::std::string& value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FrontEngine.CanceledRequest.request_id)
}
 void CanceledRequest::set_request_id(const char* value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FrontEngine.CanceledRequest.request_id)
}
 void CanceledRequest::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FrontEngine.CanceledRequest.request_id)
}
 ::std::string* CanceledRequest::mutable_request_id() {
  
  // @@protoc_insertion_point(field_mutable:FrontEngine.CanceledRequest.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CanceledRequest::release_request_id() {
  
  return request_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CanceledRequest::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.CanceledRequest.request_id)
}

// optional .FrontEngine.Order order = 2;
bool CanceledRequest::has_order() const {
  return !_is_default_instance_ && order_ != NULL;
}
void CanceledRequest::clear_order() {
  if (GetArenaNoVirtual() == NULL && order_ != NULL) delete order_;
  order_ = NULL;
}
const ::FrontEngine::Order& CanceledRequest::order() const {
  // @@protoc_insertion_point(field_get:FrontEngine.CanceledRequest.order)
  return order_ != NULL ? *order_ : *default_instance_->order_;
}
::FrontEngine::Order* CanceledRequest::mutable_order() {
  
  if (order_ == NULL) {
    order_ = new ::FrontEngine::Order;
  }
  // @@protoc_insertion_point(field_mutable:FrontEngine.CanceledRequest.order)
  return order_;
}
::FrontEngine::Order* CanceledRequest::release_order() {
  
  ::FrontEngine::Order* temp = order_;
  order_ = NULL;
  return temp;
}
void CanceledRequest::set_allocated_order(::FrontEngine::Order* order) {
  delete order_;
  order_ = order;
  if (order) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.CanceledRequest.order)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int RejectedCallBack::kRequestIdFieldNumber;
const int RejectedCallBack::kOrderFieldNumber;
const int RejectedCallBack::kErrorCodeFieldNumber;
const int RejectedCallBack::kErrorFieldNumber;
#endif  // !_MSC_VER

RejectedCallBack::RejectedCallBack()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:FrontEngine.RejectedCallBack)
}

void RejectedCallBack::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  order_ = const_cast< ::FrontEngine::Order*>(&::FrontEngine::Order::default_instance());
}

RejectedCallBack::RejectedCallBack(const RejectedCallBack& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:FrontEngine.RejectedCallBack)
}

void RejectedCallBack::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_ = NULL;
  errorcode_ = 0;
  error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

RejectedCallBack::~RejectedCallBack() {
  // @@protoc_insertion_point(destructor:FrontEngine.RejectedCallBack)
  SharedDtor();
}

void RejectedCallBack::SharedDtor() {
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete order_;
  }
}

void RejectedCallBack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RejectedCallBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RejectedCallBack_descriptor_;
}

const RejectedCallBack& RejectedCallBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_front_5fengine_2eproto();
  return *default_instance_;
}

RejectedCallBack* RejectedCallBack::default_instance_ = NULL;

RejectedCallBack* RejectedCallBack::New(::google::protobuf::Arena* arena) const {
  RejectedCallBack* n = new RejectedCallBack;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RejectedCallBack::Clear() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && order_ != NULL) delete order_;
  order_ = NULL;
  errorcode_ = 0;
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool RejectedCallBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FrontEngine.RejectedCallBack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string request_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->request_id().data(), this->request_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "FrontEngine.RejectedCallBack.request_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_order;
        break;
      }

      // optional .FrontEngine.Order order = 2;
      case 2: {
        if (tag == 18) {
         parse_order:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_order()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_errorCode;
        break;
      }

      // optional int32 errorCode = 3;
      case 3: {
        if (tag == 24) {
         parse_errorCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errorcode_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_error;
        break;
      }

      // optional string error = 4;
      case 4: {
        if (tag == 34) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->error().data(), this->error().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "FrontEngine.RejectedCallBack.error"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FrontEngine.RejectedCallBack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FrontEngine.RejectedCallBack)
  return false;
#undef DO_
}

void RejectedCallBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FrontEngine.RejectedCallBack)
  // optional string request_id = 1;
  if (this->request_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_id().data(), this->request_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FrontEngine.RejectedCallBack.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->request_id(), output);
  }

  // optional .FrontEngine.Order order = 2;
  if (this->has_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->order_, output);
  }

  // optional int32 errorCode = 3;
  if (this->errorcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->errorcode(), output);
  }

  // optional string error = 4;
  if (this->error().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FrontEngine.RejectedCallBack.error");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->error(), output);
  }

  // @@protoc_insertion_point(serialize_end:FrontEngine.RejectedCallBack)
}

::google::protobuf::uint8* RejectedCallBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:FrontEngine.RejectedCallBack)
  // optional string request_id = 1;
  if (this->request_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_id().data(), this->request_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FrontEngine.RejectedCallBack.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->request_id(), target);
  }

  // optional .FrontEngine.Order order = 2;
  if (this->has_order()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->order_, target);
  }

  // optional int32 errorCode = 3;
  if (this->errorcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->errorcode(), target);
  }

  // optional string error = 4;
  if (this->error().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FrontEngine.RejectedCallBack.error");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->error(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:FrontEngine.RejectedCallBack)
  return target;
}

int RejectedCallBack::ByteSize() const {
  int total_size = 0;

  // optional string request_id = 1;
  if (this->request_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->request_id());
  }

  // optional .FrontEngine.Order order = 2;
  if (this->has_order()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->order_);
  }

  // optional int32 errorCode = 3;
  if (this->errorcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->errorcode());
  }

  // optional string error = 4;
  if (this->error().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RejectedCallBack::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RejectedCallBack* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RejectedCallBack>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RejectedCallBack::MergeFrom(const RejectedCallBack& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.request_id().size() > 0) {

    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  if (from.has_order()) {
    mutable_order()->::FrontEngine::Order::MergeFrom(from.order());
  }
  if (from.errorcode() != 0) {
    set_errorcode(from.errorcode());
  }
  if (from.error().size() > 0) {

    error_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_);
  }
}

void RejectedCallBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RejectedCallBack::CopyFrom(const RejectedCallBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RejectedCallBack::IsInitialized() const {

  return true;
}

void RejectedCallBack::Swap(RejectedCallBack* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RejectedCallBack::InternalSwap(RejectedCallBack* other) {
  request_id_.Swap(&other->request_id_);
  std::swap(order_, other->order_);
  std::swap(errorcode_, other->errorcode_);
  error_.Swap(&other->error_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RejectedCallBack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RejectedCallBack_descriptor_;
  metadata.reflection = RejectedCallBack_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RejectedCallBack

// optional string request_id = 1;
void RejectedCallBack::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& RejectedCallBack::request_id() const {
  // @@protoc_insertion_point(field_get:FrontEngine.RejectedCallBack.request_id)
  return request_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RejectedCallBack::set_request_id(const ::std::string& value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FrontEngine.RejectedCallBack.request_id)
}
 void RejectedCallBack::set_request_id(const char* value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FrontEngine.RejectedCallBack.request_id)
}
 void RejectedCallBack::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FrontEngine.RejectedCallBack.request_id)
}
 ::std::string* RejectedCallBack::mutable_request_id() {
  
  // @@protoc_insertion_point(field_mutable:FrontEngine.RejectedCallBack.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RejectedCallBack::release_request_id() {
  
  return request_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RejectedCallBack::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.RejectedCallBack.request_id)
}

// optional .FrontEngine.Order order = 2;
bool RejectedCallBack::has_order() const {
  return !_is_default_instance_ && order_ != NULL;
}
void RejectedCallBack::clear_order() {
  if (GetArenaNoVirtual() == NULL && order_ != NULL) delete order_;
  order_ = NULL;
}
const ::FrontEngine::Order& RejectedCallBack::order() const {
  // @@protoc_insertion_point(field_get:FrontEngine.RejectedCallBack.order)
  return order_ != NULL ? *order_ : *default_instance_->order_;
}
::FrontEngine::Order* RejectedCallBack::mutable_order() {
  
  if (order_ == NULL) {
    order_ = new ::FrontEngine::Order;
  }
  // @@protoc_insertion_point(field_mutable:FrontEngine.RejectedCallBack.order)
  return order_;
}
::FrontEngine::Order* RejectedCallBack::release_order() {
  
  ::FrontEngine::Order* temp = order_;
  order_ = NULL;
  return temp;
}
void RejectedCallBack::set_allocated_order(::FrontEngine::Order* order) {
  delete order_;
  order_ = order;
  if (order) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.RejectedCallBack.order)
}

// optional int32 errorCode = 3;
void RejectedCallBack::clear_errorcode() {
  errorcode_ = 0;
}
 ::google::protobuf::int32 RejectedCallBack::errorcode() const {
  // @@protoc_insertion_point(field_get:FrontEngine.RejectedCallBack.errorCode)
  return errorcode_;
}
 void RejectedCallBack::set_errorcode(::google::protobuf::int32 value) {
  
  errorcode_ = value;
  // @@protoc_insertion_point(field_set:FrontEngine.RejectedCallBack.errorCode)
}

// optional string error = 4;
void RejectedCallBack::clear_error() {
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& RejectedCallBack::error() const {
  // @@protoc_insertion_point(field_get:FrontEngine.RejectedCallBack.error)
  return error_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RejectedCallBack::set_error(const ::std::string& value) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FrontEngine.RejectedCallBack.error)
}
 void RejectedCallBack::set_error(const char* value) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FrontEngine.RejectedCallBack.error)
}
 void RejectedCallBack::set_error(const char* value, size_t size) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FrontEngine.RejectedCallBack.error)
}
 ::std::string* RejectedCallBack::mutable_error() {
  
  // @@protoc_insertion_point(field_mutable:FrontEngine.RejectedCallBack.error)
  return error_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RejectedCallBack::release_error() {
  
  return error_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RejectedCallBack::set_allocated_error(::std::string* error) {
  if (error != NULL) {
    
  } else {
    
  }
  error_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error);
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.RejectedCallBack.error)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int RequestMessage::kRequestIdFieldNumber;
const int RequestMessage::kClientIdFieldNumber;
const int RequestMessage::kFrontIdFieldNumber;
const int RequestMessage::kMd5FieldNumber;
const int RequestMessage::kTypeFieldNumber;
const int RequestMessage::kAccountFieldNumber;
const int RequestMessage::kBalanceFieldNumber;
const int RequestMessage::kFeeFieldNumber;
const int RequestMessage::kOrderFieldNumber;
const int RequestMessage::kOrdersFieldNumber;
const int RequestMessage::kSendInfoFieldNumber;
const int RequestMessage::kRecieveInfoFieldNumber;
const int RequestMessage::kCanceledFieldNumber;
const int RequestMessage::kHeartBeatFieldNumber;
const int RequestMessage::kAppIdFieldNumber;
#endif  // !_MSC_VER

RequestMessage::RequestMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:FrontEngine.RequestMessage)
}

void RequestMessage::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  account_ = const_cast< ::FrontEngine::CreateAccountRequest*>(&::FrontEngine::CreateAccountRequest::default_instance());
  balance_ = const_cast< ::FrontEngine::QueryBalanceRequest*>(&::FrontEngine::QueryBalanceRequest::default_instance());
  fee_ = const_cast< ::FrontEngine::QueryFeeRequest*>(&::FrontEngine::QueryFeeRequest::default_instance());
  order_ = const_cast< ::FrontEngine::QueryOrderRequest*>(&::FrontEngine::QueryOrderRequest::default_instance());
  orders_ = const_cast< ::FrontEngine::QueryOrdersRequest*>(&::FrontEngine::QueryOrdersRequest::default_instance());
  send_info_ = const_cast< ::FrontEngine::SendCoinRequest*>(&::FrontEngine::SendCoinRequest::default_instance());
  recieve_info_ = const_cast< ::FrontEngine::RecieveCoinRequest*>(&::FrontEngine::RecieveCoinRequest::default_instance());
  canceled_ = const_cast< ::FrontEngine::CanceledRequest*>(&::FrontEngine::CanceledRequest::default_instance());
  heart_beat_ = const_cast< ::FrontEngine::HeartBeatRequest*>(&::FrontEngine::HeartBeatRequest::default_instance());
  app_id_ = const_cast< ::FrontEngine::CheckAppId*>(&::FrontEngine::CheckAppId::default_instance());
}

RequestMessage::RequestMessage(const RequestMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:FrontEngine.RequestMessage)
}

void RequestMessage::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  front_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  md5_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  account_ = NULL;
  balance_ = NULL;
  fee_ = NULL;
  order_ = NULL;
  orders_ = NULL;
  send_info_ = NULL;
  recieve_info_ = NULL;
  canceled_ = NULL;
  heart_beat_ = NULL;
  app_id_ = NULL;
}

RequestMessage::~RequestMessage() {
  // @@protoc_insertion_point(destructor:FrontEngine.RequestMessage)
  SharedDtor();
}

void RequestMessage::SharedDtor() {
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  front_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  md5_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete account_;
    delete balance_;
    delete fee_;
    delete order_;
    delete orders_;
    delete send_info_;
    delete recieve_info_;
    delete canceled_;
    delete heart_beat_;
    delete app_id_;
  }
}

void RequestMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestMessage_descriptor_;
}

const RequestMessage& RequestMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_front_5fengine_2eproto();
  return *default_instance_;
}

RequestMessage* RequestMessage::default_instance_ = NULL;

RequestMessage* RequestMessage::New(::google::protobuf::Arena* arena) const {
  RequestMessage* n = new RequestMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RequestMessage::Clear() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  front_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  md5_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  if (GetArenaNoVirtual() == NULL && account_ != NULL) delete account_;
  account_ = NULL;
  if (GetArenaNoVirtual() == NULL && balance_ != NULL) delete balance_;
  balance_ = NULL;
  if (GetArenaNoVirtual() == NULL && fee_ != NULL) delete fee_;
  fee_ = NULL;
  if (GetArenaNoVirtual() == NULL && order_ != NULL) delete order_;
  order_ = NULL;
  if (GetArenaNoVirtual() == NULL && orders_ != NULL) delete orders_;
  orders_ = NULL;
  if (GetArenaNoVirtual() == NULL && send_info_ != NULL) delete send_info_;
  send_info_ = NULL;
  if (GetArenaNoVirtual() == NULL && recieve_info_ != NULL) delete recieve_info_;
  recieve_info_ = NULL;
  if (GetArenaNoVirtual() == NULL && canceled_ != NULL) delete canceled_;
  canceled_ = NULL;
  if (GetArenaNoVirtual() == NULL && heart_beat_ != NULL) delete heart_beat_;
  heart_beat_ = NULL;
  if (GetArenaNoVirtual() == NULL && app_id_ != NULL) delete app_id_;
  app_id_ = NULL;
}

bool RequestMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FrontEngine.RequestMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string request_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->request_id().data(), this->request_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "FrontEngine.RequestMessage.request_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_client_id;
        break;
      }

      // optional string client_id = 2;
      case 2: {
        if (tag == 18) {
         parse_client_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->client_id().data(), this->client_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "FrontEngine.RequestMessage.client_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_front_id;
        break;
      }

      // optional string front_id = 3;
      case 3: {
        if (tag == 26) {
         parse_front_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_front_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->front_id().data(), this->front_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "FrontEngine.RequestMessage.front_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_md5;
        break;
      }

      // optional string md5 = 4;
      case 4: {
        if (tag == 34) {
         parse_md5:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_md5()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->md5().data(), this->md5().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "FrontEngine.RequestMessage.md5"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_type;
        break;
      }

      // optional .FrontEngine.enums.RequestType type = 5;
      case 5: {
        if (tag == 40) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::FrontEngine::enums_RequestType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_account;
        break;
      }

      // optional .FrontEngine.CreateAccountRequest account = 6;
      case 6: {
        if (tag == 50) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_account()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_balance;
        break;
      }

      // optional .FrontEngine.QueryBalanceRequest balance = 7;
      case 7: {
        if (tag == 58) {
         parse_balance:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_balance()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_fee;
        break;
      }

      // optional .FrontEngine.QueryFeeRequest fee = 8;
      case 8: {
        if (tag == 66) {
         parse_fee:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fee()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_order;
        break;
      }

      // optional .FrontEngine.QueryOrderRequest order = 9;
      case 9: {
        if (tag == 74) {
         parse_order:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_order()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_orders;
        break;
      }

      // optional .FrontEngine.QueryOrdersRequest orders = 10;
      case 10: {
        if (tag == 82) {
         parse_orders:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_orders()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_send_info;
        break;
      }

      // optional .FrontEngine.SendCoinRequest send_info = 11;
      case 11: {
        if (tag == 90) {
         parse_send_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_send_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_recieve_info;
        break;
      }

      // optional .FrontEngine.RecieveCoinRequest recieve_info = 12;
      case 12: {
        if (tag == 98) {
         parse_recieve_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_recieve_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_canceled;
        break;
      }

      // optional .FrontEngine.CanceledRequest canceled = 13;
      case 13: {
        if (tag == 106) {
         parse_canceled:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_canceled()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_heart_beat;
        break;
      }

      // optional .FrontEngine.HeartBeatRequest heart_beat = 14;
      case 14: {
        if (tag == 114) {
         parse_heart_beat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_heart_beat()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_app_id;
        break;
      }

      // optional .FrontEngine.CheckAppId app_id = 15;
      case 15: {
        if (tag == 122) {
         parse_app_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_app_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FrontEngine.RequestMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FrontEngine.RequestMessage)
  return false;
#undef DO_
}

void RequestMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FrontEngine.RequestMessage)
  // optional string request_id = 1;
  if (this->request_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_id().data(), this->request_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FrontEngine.RequestMessage.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->request_id(), output);
  }

  // optional string client_id = 2;
  if (this->client_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->client_id().data(), this->client_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FrontEngine.RequestMessage.client_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->client_id(), output);
  }

  // optional string front_id = 3;
  if (this->front_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->front_id().data(), this->front_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FrontEngine.RequestMessage.front_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->front_id(), output);
  }

  // optional string md5 = 4;
  if (this->md5().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->md5().data(), this->md5().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FrontEngine.RequestMessage.md5");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->md5(), output);
  }

  // optional .FrontEngine.enums.RequestType type = 5;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->type(), output);
  }

  // optional .FrontEngine.CreateAccountRequest account = 6;
  if (this->has_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->account_, output);
  }

  // optional .FrontEngine.QueryBalanceRequest balance = 7;
  if (this->has_balance()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->balance_, output);
  }

  // optional .FrontEngine.QueryFeeRequest fee = 8;
  if (this->has_fee()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->fee_, output);
  }

  // optional .FrontEngine.QueryOrderRequest order = 9;
  if (this->has_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->order_, output);
  }

  // optional .FrontEngine.QueryOrdersRequest orders = 10;
  if (this->has_orders()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->orders_, output);
  }

  // optional .FrontEngine.SendCoinRequest send_info = 11;
  if (this->has_send_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->send_info_, output);
  }

  // optional .FrontEngine.RecieveCoinRequest recieve_info = 12;
  if (this->has_recieve_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->recieve_info_, output);
  }

  // optional .FrontEngine.CanceledRequest canceled = 13;
  if (this->has_canceled()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *this->canceled_, output);
  }

  // optional .FrontEngine.HeartBeatRequest heart_beat = 14;
  if (this->has_heart_beat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *this->heart_beat_, output);
  }

  // optional .FrontEngine.CheckAppId app_id = 15;
  if (this->has_app_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, *this->app_id_, output);
  }

  // @@protoc_insertion_point(serialize_end:FrontEngine.RequestMessage)
}

::google::protobuf::uint8* RequestMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:FrontEngine.RequestMessage)
  // optional string request_id = 1;
  if (this->request_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_id().data(), this->request_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FrontEngine.RequestMessage.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->request_id(), target);
  }

  // optional string client_id = 2;
  if (this->client_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->client_id().data(), this->client_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FrontEngine.RequestMessage.client_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->client_id(), target);
  }

  // optional string front_id = 3;
  if (this->front_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->front_id().data(), this->front_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FrontEngine.RequestMessage.front_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->front_id(), target);
  }

  // optional string md5 = 4;
  if (this->md5().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->md5().data(), this->md5().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FrontEngine.RequestMessage.md5");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->md5(), target);
  }

  // optional .FrontEngine.enums.RequestType type = 5;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->type(), target);
  }

  // optional .FrontEngine.CreateAccountRequest account = 6;
  if (this->has_account()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, *this->account_, target);
  }

  // optional .FrontEngine.QueryBalanceRequest balance = 7;
  if (this->has_balance()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, *this->balance_, target);
  }

  // optional .FrontEngine.QueryFeeRequest fee = 8;
  if (this->has_fee()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, *this->fee_, target);
  }

  // optional .FrontEngine.QueryOrderRequest order = 9;
  if (this->has_order()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, *this->order_, target);
  }

  // optional .FrontEngine.QueryOrdersRequest orders = 10;
  if (this->has_orders()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, *this->orders_, target);
  }

  // optional .FrontEngine.SendCoinRequest send_info = 11;
  if (this->has_send_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, *this->send_info_, target);
  }

  // optional .FrontEngine.RecieveCoinRequest recieve_info = 12;
  if (this->has_recieve_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, *this->recieve_info_, target);
  }

  // optional .FrontEngine.CanceledRequest canceled = 13;
  if (this->has_canceled()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, *this->canceled_, target);
  }

  // optional .FrontEngine.HeartBeatRequest heart_beat = 14;
  if (this->has_heart_beat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, *this->heart_beat_, target);
  }

  // optional .FrontEngine.CheckAppId app_id = 15;
  if (this->has_app_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, *this->app_id_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:FrontEngine.RequestMessage)
  return target;
}

int RequestMessage::ByteSize() const {
  int total_size = 0;

  // optional string request_id = 1;
  if (this->request_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->request_id());
  }

  // optional string client_id = 2;
  if (this->client_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->client_id());
  }

  // optional string front_id = 3;
  if (this->front_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->front_id());
  }

  // optional string md5 = 4;
  if (this->md5().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->md5());
  }

  // optional .FrontEngine.enums.RequestType type = 5;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional .FrontEngine.CreateAccountRequest account = 6;
  if (this->has_account()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->account_);
  }

  // optional .FrontEngine.QueryBalanceRequest balance = 7;
  if (this->has_balance()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->balance_);
  }

  // optional .FrontEngine.QueryFeeRequest fee = 8;
  if (this->has_fee()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->fee_);
  }

  // optional .FrontEngine.QueryOrderRequest order = 9;
  if (this->has_order()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->order_);
  }

  // optional .FrontEngine.QueryOrdersRequest orders = 10;
  if (this->has_orders()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->orders_);
  }

  // optional .FrontEngine.SendCoinRequest send_info = 11;
  if (this->has_send_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->send_info_);
  }

  // optional .FrontEngine.RecieveCoinRequest recieve_info = 12;
  if (this->has_recieve_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->recieve_info_);
  }

  // optional .FrontEngine.CanceledRequest canceled = 13;
  if (this->has_canceled()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->canceled_);
  }

  // optional .FrontEngine.HeartBeatRequest heart_beat = 14;
  if (this->has_heart_beat()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->heart_beat_);
  }

  // optional .FrontEngine.CheckAppId app_id = 15;
  if (this->has_app_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->app_id_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestMessage::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RequestMessage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestMessage>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestMessage::MergeFrom(const RequestMessage& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.request_id().size() > 0) {

    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  if (from.client_id().size() > 0) {

    client_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_id_);
  }
  if (from.front_id().size() > 0) {

    front_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.front_id_);
  }
  if (from.md5().size() > 0) {

    md5_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.md5_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.has_account()) {
    mutable_account()->::FrontEngine::CreateAccountRequest::MergeFrom(from.account());
  }
  if (from.has_balance()) {
    mutable_balance()->::FrontEngine::QueryBalanceRequest::MergeFrom(from.balance());
  }
  if (from.has_fee()) {
    mutable_fee()->::FrontEngine::QueryFeeRequest::MergeFrom(from.fee());
  }
  if (from.has_order()) {
    mutable_order()->::FrontEngine::QueryOrderRequest::MergeFrom(from.order());
  }
  if (from.has_orders()) {
    mutable_orders()->::FrontEngine::QueryOrdersRequest::MergeFrom(from.orders());
  }
  if (from.has_send_info()) {
    mutable_send_info()->::FrontEngine::SendCoinRequest::MergeFrom(from.send_info());
  }
  if (from.has_recieve_info()) {
    mutable_recieve_info()->::FrontEngine::RecieveCoinRequest::MergeFrom(from.recieve_info());
  }
  if (from.has_canceled()) {
    mutable_canceled()->::FrontEngine::CanceledRequest::MergeFrom(from.canceled());
  }
  if (from.has_heart_beat()) {
    mutable_heart_beat()->::FrontEngine::HeartBeatRequest::MergeFrom(from.heart_beat());
  }
  if (from.has_app_id()) {
    mutable_app_id()->::FrontEngine::CheckAppId::MergeFrom(from.app_id());
  }
}

void RequestMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestMessage::CopyFrom(const RequestMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestMessage::IsInitialized() const {

  return true;
}

void RequestMessage::Swap(RequestMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestMessage::InternalSwap(RequestMessage* other) {
  request_id_.Swap(&other->request_id_);
  client_id_.Swap(&other->client_id_);
  front_id_.Swap(&other->front_id_);
  md5_.Swap(&other->md5_);
  std::swap(type_, other->type_);
  std::swap(account_, other->account_);
  std::swap(balance_, other->balance_);
  std::swap(fee_, other->fee_);
  std::swap(order_, other->order_);
  std::swap(orders_, other->orders_);
  std::swap(send_info_, other->send_info_);
  std::swap(recieve_info_, other->recieve_info_);
  std::swap(canceled_, other->canceled_);
  std::swap(heart_beat_, other->heart_beat_);
  std::swap(app_id_, other->app_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RequestMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestMessage_descriptor_;
  metadata.reflection = RequestMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RequestMessage

// optional string request_id = 1;
void RequestMessage::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& RequestMessage::request_id() const {
  // @@protoc_insertion_point(field_get:FrontEngine.RequestMessage.request_id)
  return request_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RequestMessage::set_request_id(const ::std::string& value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FrontEngine.RequestMessage.request_id)
}
 void RequestMessage::set_request_id(const char* value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FrontEngine.RequestMessage.request_id)
}
 void RequestMessage::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FrontEngine.RequestMessage.request_id)
}
 ::std::string* RequestMessage::mutable_request_id() {
  
  // @@protoc_insertion_point(field_mutable:FrontEngine.RequestMessage.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RequestMessage::release_request_id() {
  
  return request_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RequestMessage::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.RequestMessage.request_id)
}

// optional string client_id = 2;
void RequestMessage::clear_client_id() {
  client_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& RequestMessage::client_id() const {
  // @@protoc_insertion_point(field_get:FrontEngine.RequestMessage.client_id)
  return client_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RequestMessage::set_client_id(const ::std::string& value) {
  
  client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FrontEngine.RequestMessage.client_id)
}
 void RequestMessage::set_client_id(const char* value) {
  
  client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FrontEngine.RequestMessage.client_id)
}
 void RequestMessage::set_client_id(const char* value, size_t size) {
  
  client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FrontEngine.RequestMessage.client_id)
}
 ::std::string* RequestMessage::mutable_client_id() {
  
  // @@protoc_insertion_point(field_mutable:FrontEngine.RequestMessage.client_id)
  return client_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RequestMessage::release_client_id() {
  
  return client_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RequestMessage::set_allocated_client_id(::std::string* client_id) {
  if (client_id != NULL) {
    
  } else {
    
  }
  client_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_id);
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.RequestMessage.client_id)
}

// optional string front_id = 3;
void RequestMessage::clear_front_id() {
  front_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& RequestMessage::front_id() const {
  // @@protoc_insertion_point(field_get:FrontEngine.RequestMessage.front_id)
  return front_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RequestMessage::set_front_id(const ::std::string& value) {
  
  front_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FrontEngine.RequestMessage.front_id)
}
 void RequestMessage::set_front_id(const char* value) {
  
  front_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FrontEngine.RequestMessage.front_id)
}
 void RequestMessage::set_front_id(const char* value, size_t size) {
  
  front_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FrontEngine.RequestMessage.front_id)
}
 ::std::string* RequestMessage::mutable_front_id() {
  
  // @@protoc_insertion_point(field_mutable:FrontEngine.RequestMessage.front_id)
  return front_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RequestMessage::release_front_id() {
  
  return front_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RequestMessage::set_allocated_front_id(::std::string* front_id) {
  if (front_id != NULL) {
    
  } else {
    
  }
  front_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), front_id);
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.RequestMessage.front_id)
}

// optional string md5 = 4;
void RequestMessage::clear_md5() {
  md5_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& RequestMessage::md5() const {
  // @@protoc_insertion_point(field_get:FrontEngine.RequestMessage.md5)
  return md5_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RequestMessage::set_md5(const ::std::string& value) {
  
  md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FrontEngine.RequestMessage.md5)
}
 void RequestMessage::set_md5(const char* value) {
  
  md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FrontEngine.RequestMessage.md5)
}
 void RequestMessage::set_md5(const char* value, size_t size) {
  
  md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FrontEngine.RequestMessage.md5)
}
 ::std::string* RequestMessage::mutable_md5() {
  
  // @@protoc_insertion_point(field_mutable:FrontEngine.RequestMessage.md5)
  return md5_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RequestMessage::release_md5() {
  
  return md5_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RequestMessage::set_allocated_md5(::std::string* md5) {
  if (md5 != NULL) {
    
  } else {
    
  }
  md5_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), md5);
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.RequestMessage.md5)
}

// optional .FrontEngine.enums.RequestType type = 5;
void RequestMessage::clear_type() {
  type_ = 0;
}
 ::FrontEngine::enums_RequestType RequestMessage::type() const {
  // @@protoc_insertion_point(field_get:FrontEngine.RequestMessage.type)
  return static_cast< ::FrontEngine::enums_RequestType >(type_);
}
 void RequestMessage::set_type(::FrontEngine::enums_RequestType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:FrontEngine.RequestMessage.type)
}

// optional .FrontEngine.CreateAccountRequest account = 6;
bool RequestMessage::has_account() const {
  return !_is_default_instance_ && account_ != NULL;
}
void RequestMessage::clear_account() {
  if (GetArenaNoVirtual() == NULL && account_ != NULL) delete account_;
  account_ = NULL;
}
const ::FrontEngine::CreateAccountRequest& RequestMessage::account() const {
  // @@protoc_insertion_point(field_get:FrontEngine.RequestMessage.account)
  return account_ != NULL ? *account_ : *default_instance_->account_;
}
::FrontEngine::CreateAccountRequest* RequestMessage::mutable_account() {
  
  if (account_ == NULL) {
    account_ = new ::FrontEngine::CreateAccountRequest;
  }
  // @@protoc_insertion_point(field_mutable:FrontEngine.RequestMessage.account)
  return account_;
}
::FrontEngine::CreateAccountRequest* RequestMessage::release_account() {
  
  ::FrontEngine::CreateAccountRequest* temp = account_;
  account_ = NULL;
  return temp;
}
void RequestMessage::set_allocated_account(::FrontEngine::CreateAccountRequest* account) {
  delete account_;
  account_ = account;
  if (account) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.RequestMessage.account)
}

// optional .FrontEngine.QueryBalanceRequest balance = 7;
bool RequestMessage::has_balance() const {
  return !_is_default_instance_ && balance_ != NULL;
}
void RequestMessage::clear_balance() {
  if (GetArenaNoVirtual() == NULL && balance_ != NULL) delete balance_;
  balance_ = NULL;
}
const ::FrontEngine::QueryBalanceRequest& RequestMessage::balance() const {
  // @@protoc_insertion_point(field_get:FrontEngine.RequestMessage.balance)
  return balance_ != NULL ? *balance_ : *default_instance_->balance_;
}
::FrontEngine::QueryBalanceRequest* RequestMessage::mutable_balance() {
  
  if (balance_ == NULL) {
    balance_ = new ::FrontEngine::QueryBalanceRequest;
  }
  // @@protoc_insertion_point(field_mutable:FrontEngine.RequestMessage.balance)
  return balance_;
}
::FrontEngine::QueryBalanceRequest* RequestMessage::release_balance() {
  
  ::FrontEngine::QueryBalanceRequest* temp = balance_;
  balance_ = NULL;
  return temp;
}
void RequestMessage::set_allocated_balance(::FrontEngine::QueryBalanceRequest* balance) {
  delete balance_;
  balance_ = balance;
  if (balance) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.RequestMessage.balance)
}

// optional .FrontEngine.QueryFeeRequest fee = 8;
bool RequestMessage::has_fee() const {
  return !_is_default_instance_ && fee_ != NULL;
}
void RequestMessage::clear_fee() {
  if (GetArenaNoVirtual() == NULL && fee_ != NULL) delete fee_;
  fee_ = NULL;
}
const ::FrontEngine::QueryFeeRequest& RequestMessage::fee() const {
  // @@protoc_insertion_point(field_get:FrontEngine.RequestMessage.fee)
  return fee_ != NULL ? *fee_ : *default_instance_->fee_;
}
::FrontEngine::QueryFeeRequest* RequestMessage::mutable_fee() {
  
  if (fee_ == NULL) {
    fee_ = new ::FrontEngine::QueryFeeRequest;
  }
  // @@protoc_insertion_point(field_mutable:FrontEngine.RequestMessage.fee)
  return fee_;
}
::FrontEngine::QueryFeeRequest* RequestMessage::release_fee() {
  
  ::FrontEngine::QueryFeeRequest* temp = fee_;
  fee_ = NULL;
  return temp;
}
void RequestMessage::set_allocated_fee(::FrontEngine::QueryFeeRequest* fee) {
  delete fee_;
  fee_ = fee;
  if (fee) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.RequestMessage.fee)
}

// optional .FrontEngine.QueryOrderRequest order = 9;
bool RequestMessage::has_order() const {
  return !_is_default_instance_ && order_ != NULL;
}
void RequestMessage::clear_order() {
  if (GetArenaNoVirtual() == NULL && order_ != NULL) delete order_;
  order_ = NULL;
}
const ::FrontEngine::QueryOrderRequest& RequestMessage::order() const {
  // @@protoc_insertion_point(field_get:FrontEngine.RequestMessage.order)
  return order_ != NULL ? *order_ : *default_instance_->order_;
}
::FrontEngine::QueryOrderRequest* RequestMessage::mutable_order() {
  
  if (order_ == NULL) {
    order_ = new ::FrontEngine::QueryOrderRequest;
  }
  // @@protoc_insertion_point(field_mutable:FrontEngine.RequestMessage.order)
  return order_;
}
::FrontEngine::QueryOrderRequest* RequestMessage::release_order() {
  
  ::FrontEngine::QueryOrderRequest* temp = order_;
  order_ = NULL;
  return temp;
}
void RequestMessage::set_allocated_order(::FrontEngine::QueryOrderRequest* order) {
  delete order_;
  order_ = order;
  if (order) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.RequestMessage.order)
}

// optional .FrontEngine.QueryOrdersRequest orders = 10;
bool RequestMessage::has_orders() const {
  return !_is_default_instance_ && orders_ != NULL;
}
void RequestMessage::clear_orders() {
  if (GetArenaNoVirtual() == NULL && orders_ != NULL) delete orders_;
  orders_ = NULL;
}
const ::FrontEngine::QueryOrdersRequest& RequestMessage::orders() const {
  // @@protoc_insertion_point(field_get:FrontEngine.RequestMessage.orders)
  return orders_ != NULL ? *orders_ : *default_instance_->orders_;
}
::FrontEngine::QueryOrdersRequest* RequestMessage::mutable_orders() {
  
  if (orders_ == NULL) {
    orders_ = new ::FrontEngine::QueryOrdersRequest;
  }
  // @@protoc_insertion_point(field_mutable:FrontEngine.RequestMessage.orders)
  return orders_;
}
::FrontEngine::QueryOrdersRequest* RequestMessage::release_orders() {
  
  ::FrontEngine::QueryOrdersRequest* temp = orders_;
  orders_ = NULL;
  return temp;
}
void RequestMessage::set_allocated_orders(::FrontEngine::QueryOrdersRequest* orders) {
  delete orders_;
  orders_ = orders;
  if (orders) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.RequestMessage.orders)
}

// optional .FrontEngine.SendCoinRequest send_info = 11;
bool RequestMessage::has_send_info() const {
  return !_is_default_instance_ && send_info_ != NULL;
}
void RequestMessage::clear_send_info() {
  if (GetArenaNoVirtual() == NULL && send_info_ != NULL) delete send_info_;
  send_info_ = NULL;
}
const ::FrontEngine::SendCoinRequest& RequestMessage::send_info() const {
  // @@protoc_insertion_point(field_get:FrontEngine.RequestMessage.send_info)
  return send_info_ != NULL ? *send_info_ : *default_instance_->send_info_;
}
::FrontEngine::SendCoinRequest* RequestMessage::mutable_send_info() {
  
  if (send_info_ == NULL) {
    send_info_ = new ::FrontEngine::SendCoinRequest;
  }
  // @@protoc_insertion_point(field_mutable:FrontEngine.RequestMessage.send_info)
  return send_info_;
}
::FrontEngine::SendCoinRequest* RequestMessage::release_send_info() {
  
  ::FrontEngine::SendCoinRequest* temp = send_info_;
  send_info_ = NULL;
  return temp;
}
void RequestMessage::set_allocated_send_info(::FrontEngine::SendCoinRequest* send_info) {
  delete send_info_;
  send_info_ = send_info;
  if (send_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.RequestMessage.send_info)
}

// optional .FrontEngine.RecieveCoinRequest recieve_info = 12;
bool RequestMessage::has_recieve_info() const {
  return !_is_default_instance_ && recieve_info_ != NULL;
}
void RequestMessage::clear_recieve_info() {
  if (GetArenaNoVirtual() == NULL && recieve_info_ != NULL) delete recieve_info_;
  recieve_info_ = NULL;
}
const ::FrontEngine::RecieveCoinRequest& RequestMessage::recieve_info() const {
  // @@protoc_insertion_point(field_get:FrontEngine.RequestMessage.recieve_info)
  return recieve_info_ != NULL ? *recieve_info_ : *default_instance_->recieve_info_;
}
::FrontEngine::RecieveCoinRequest* RequestMessage::mutable_recieve_info() {
  
  if (recieve_info_ == NULL) {
    recieve_info_ = new ::FrontEngine::RecieveCoinRequest;
  }
  // @@protoc_insertion_point(field_mutable:FrontEngine.RequestMessage.recieve_info)
  return recieve_info_;
}
::FrontEngine::RecieveCoinRequest* RequestMessage::release_recieve_info() {
  
  ::FrontEngine::RecieveCoinRequest* temp = recieve_info_;
  recieve_info_ = NULL;
  return temp;
}
void RequestMessage::set_allocated_recieve_info(::FrontEngine::RecieveCoinRequest* recieve_info) {
  delete recieve_info_;
  recieve_info_ = recieve_info;
  if (recieve_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.RequestMessage.recieve_info)
}

// optional .FrontEngine.CanceledRequest canceled = 13;
bool RequestMessage::has_canceled() const {
  return !_is_default_instance_ && canceled_ != NULL;
}
void RequestMessage::clear_canceled() {
  if (GetArenaNoVirtual() == NULL && canceled_ != NULL) delete canceled_;
  canceled_ = NULL;
}
const ::FrontEngine::CanceledRequest& RequestMessage::canceled() const {
  // @@protoc_insertion_point(field_get:FrontEngine.RequestMessage.canceled)
  return canceled_ != NULL ? *canceled_ : *default_instance_->canceled_;
}
::FrontEngine::CanceledRequest* RequestMessage::mutable_canceled() {
  
  if (canceled_ == NULL) {
    canceled_ = new ::FrontEngine::CanceledRequest;
  }
  // @@protoc_insertion_point(field_mutable:FrontEngine.RequestMessage.canceled)
  return canceled_;
}
::FrontEngine::CanceledRequest* RequestMessage::release_canceled() {
  
  ::FrontEngine::CanceledRequest* temp = canceled_;
  canceled_ = NULL;
  return temp;
}
void RequestMessage::set_allocated_canceled(::FrontEngine::CanceledRequest* canceled) {
  delete canceled_;
  canceled_ = canceled;
  if (canceled) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.RequestMessage.canceled)
}

// optional .FrontEngine.HeartBeatRequest heart_beat = 14;
bool RequestMessage::has_heart_beat() const {
  return !_is_default_instance_ && heart_beat_ != NULL;
}
void RequestMessage::clear_heart_beat() {
  if (GetArenaNoVirtual() == NULL && heart_beat_ != NULL) delete heart_beat_;
  heart_beat_ = NULL;
}
const ::FrontEngine::HeartBeatRequest& RequestMessage::heart_beat() const {
  // @@protoc_insertion_point(field_get:FrontEngine.RequestMessage.heart_beat)
  return heart_beat_ != NULL ? *heart_beat_ : *default_instance_->heart_beat_;
}
::FrontEngine::HeartBeatRequest* RequestMessage::mutable_heart_beat() {
  
  if (heart_beat_ == NULL) {
    heart_beat_ = new ::FrontEngine::HeartBeatRequest;
  }
  // @@protoc_insertion_point(field_mutable:FrontEngine.RequestMessage.heart_beat)
  return heart_beat_;
}
::FrontEngine::HeartBeatRequest* RequestMessage::release_heart_beat() {
  
  ::FrontEngine::HeartBeatRequest* temp = heart_beat_;
  heart_beat_ = NULL;
  return temp;
}
void RequestMessage::set_allocated_heart_beat(::FrontEngine::HeartBeatRequest* heart_beat) {
  delete heart_beat_;
  heart_beat_ = heart_beat;
  if (heart_beat) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.RequestMessage.heart_beat)
}

// optional .FrontEngine.CheckAppId app_id = 15;
bool RequestMessage::has_app_id() const {
  return !_is_default_instance_ && app_id_ != NULL;
}
void RequestMessage::clear_app_id() {
  if (GetArenaNoVirtual() == NULL && app_id_ != NULL) delete app_id_;
  app_id_ = NULL;
}
const ::FrontEngine::CheckAppId& RequestMessage::app_id() const {
  // @@protoc_insertion_point(field_get:FrontEngine.RequestMessage.app_id)
  return app_id_ != NULL ? *app_id_ : *default_instance_->app_id_;
}
::FrontEngine::CheckAppId* RequestMessage::mutable_app_id() {
  
  if (app_id_ == NULL) {
    app_id_ = new ::FrontEngine::CheckAppId;
  }
  // @@protoc_insertion_point(field_mutable:FrontEngine.RequestMessage.app_id)
  return app_id_;
}
::FrontEngine::CheckAppId* RequestMessage::release_app_id() {
  
  ::FrontEngine::CheckAppId* temp = app_id_;
  app_id_ = NULL;
  return temp;
}
void RequestMessage::set_allocated_app_id(::FrontEngine::CheckAppId* app_id) {
  delete app_id_;
  app_id_ = app_id;
  if (app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.RequestMessage.app_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CallBackMessage::kRequestIdFieldNumber;
const int CallBackMessage::kClientIdFieldNumber;
const int CallBackMessage::kFrontIdFieldNumber;
const int CallBackMessage::kMd5FieldNumber;
const int CallBackMessage::kTypeFieldNumber;
const int CallBackMessage::kAccountFieldNumber;
const int CallBackMessage::kBalanceFieldNumber;
const int CallBackMessage::kFeeFieldNumber;
const int CallBackMessage::kOrderFieldNumber;
const int CallBackMessage::kOrdersFieldNumber;
const int CallBackMessage::kTradedInfoFieldNumber;
const int CallBackMessage::kCanceledInfoFieldNumber;
const int CallBackMessage::kRejectedInfoFieldNumber;
const int CallBackMessage::kHeartBeatFieldNumber;
const int CallBackMessage::kAppIdFieldNumber;
#endif  // !_MSC_VER

CallBackMessage::CallBackMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:FrontEngine.CallBackMessage)
}

void CallBackMessage::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  account_ = const_cast< ::FrontEngine::CreateAccountCallBack*>(&::FrontEngine::CreateAccountCallBack::default_instance());
  balance_ = const_cast< ::FrontEngine::QueryBalanceCallBack*>(&::FrontEngine::QueryBalanceCallBack::default_instance());
  fee_ = const_cast< ::FrontEngine::QueryFeeCallBack*>(&::FrontEngine::QueryFeeCallBack::default_instance());
  order_ = const_cast< ::FrontEngine::QueryOrderCallBack*>(&::FrontEngine::QueryOrderCallBack::default_instance());
  orders_ = const_cast< ::FrontEngine::QueryOrdersCallBack*>(&::FrontEngine::QueryOrdersCallBack::default_instance());
  traded_info_ = const_cast< ::FrontEngine::TradedCallBack*>(&::FrontEngine::TradedCallBack::default_instance());
  canceled_info_ = const_cast< ::FrontEngine::CanceledCallBack*>(&::FrontEngine::CanceledCallBack::default_instance());
  rejected_info_ = const_cast< ::FrontEngine::RejectedCallBack*>(&::FrontEngine::RejectedCallBack::default_instance());
  heart_beat_ = const_cast< ::FrontEngine::HeartBeatCallBack*>(&::FrontEngine::HeartBeatCallBack::default_instance());
  app_id_ = const_cast< ::FrontEngine::CheckAppIdCallBack*>(&::FrontEngine::CheckAppIdCallBack::default_instance());
}

CallBackMessage::CallBackMessage(const CallBackMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:FrontEngine.CallBackMessage)
}

void CallBackMessage::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  front_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  md5_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  account_ = NULL;
  balance_ = NULL;
  fee_ = NULL;
  order_ = NULL;
  orders_ = NULL;
  traded_info_ = NULL;
  canceled_info_ = NULL;
  rejected_info_ = NULL;
  heart_beat_ = NULL;
  app_id_ = NULL;
}

CallBackMessage::~CallBackMessage() {
  // @@protoc_insertion_point(destructor:FrontEngine.CallBackMessage)
  SharedDtor();
}

void CallBackMessage::SharedDtor() {
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  front_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  md5_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete account_;
    delete balance_;
    delete fee_;
    delete order_;
    delete orders_;
    delete traded_info_;
    delete canceled_info_;
    delete rejected_info_;
    delete heart_beat_;
    delete app_id_;
  }
}

void CallBackMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CallBackMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CallBackMessage_descriptor_;
}

const CallBackMessage& CallBackMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_front_5fengine_2eproto();
  return *default_instance_;
}

CallBackMessage* CallBackMessage::default_instance_ = NULL;

CallBackMessage* CallBackMessage::New(::google::protobuf::Arena* arena) const {
  CallBackMessage* n = new CallBackMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CallBackMessage::Clear() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  front_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  md5_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  if (GetArenaNoVirtual() == NULL && account_ != NULL) delete account_;
  account_ = NULL;
  if (GetArenaNoVirtual() == NULL && balance_ != NULL) delete balance_;
  balance_ = NULL;
  if (GetArenaNoVirtual() == NULL && fee_ != NULL) delete fee_;
  fee_ = NULL;
  if (GetArenaNoVirtual() == NULL && order_ != NULL) delete order_;
  order_ = NULL;
  if (GetArenaNoVirtual() == NULL && orders_ != NULL) delete orders_;
  orders_ = NULL;
  if (GetArenaNoVirtual() == NULL && traded_info_ != NULL) delete traded_info_;
  traded_info_ = NULL;
  if (GetArenaNoVirtual() == NULL && canceled_info_ != NULL) delete canceled_info_;
  canceled_info_ = NULL;
  if (GetArenaNoVirtual() == NULL && rejected_info_ != NULL) delete rejected_info_;
  rejected_info_ = NULL;
  if (GetArenaNoVirtual() == NULL && heart_beat_ != NULL) delete heart_beat_;
  heart_beat_ = NULL;
  if (GetArenaNoVirtual() == NULL && app_id_ != NULL) delete app_id_;
  app_id_ = NULL;
}

bool CallBackMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FrontEngine.CallBackMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string request_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->request_id().data(), this->request_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "FrontEngine.CallBackMessage.request_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_client_id;
        break;
      }

      // optional string client_id = 2;
      case 2: {
        if (tag == 18) {
         parse_client_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->client_id().data(), this->client_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "FrontEngine.CallBackMessage.client_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_front_id;
        break;
      }

      // optional string front_id = 3;
      case 3: {
        if (tag == 26) {
         parse_front_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_front_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->front_id().data(), this->front_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "FrontEngine.CallBackMessage.front_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_md5;
        break;
      }

      // optional string md5 = 4;
      case 4: {
        if (tag == 34) {
         parse_md5:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_md5()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->md5().data(), this->md5().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "FrontEngine.CallBackMessage.md5"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_type;
        break;
      }

      // optional .FrontEngine.enums.CallBackType type = 5;
      case 5: {
        if (tag == 40) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::FrontEngine::enums_CallBackType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_account;
        break;
      }

      // optional .FrontEngine.CreateAccountCallBack account = 6;
      case 6: {
        if (tag == 50) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_account()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_balance;
        break;
      }

      // optional .FrontEngine.QueryBalanceCallBack balance = 7;
      case 7: {
        if (tag == 58) {
         parse_balance:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_balance()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_fee;
        break;
      }

      // optional .FrontEngine.QueryFeeCallBack fee = 8;
      case 8: {
        if (tag == 66) {
         parse_fee:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fee()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_order;
        break;
      }

      // optional .FrontEngine.QueryOrderCallBack order = 9;
      case 9: {
        if (tag == 74) {
         parse_order:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_order()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_orders;
        break;
      }

      // optional .FrontEngine.QueryOrdersCallBack orders = 10;
      case 10: {
        if (tag == 82) {
         parse_orders:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_orders()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_traded_info;
        break;
      }

      // optional .FrontEngine.TradedCallBack traded_info = 11;
      case 11: {
        if (tag == 90) {
         parse_traded_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_traded_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_canceled_info;
        break;
      }

      // optional .FrontEngine.CanceledCallBack canceled_info = 12;
      case 12: {
        if (tag == 98) {
         parse_canceled_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_canceled_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_rejected_info;
        break;
      }

      // optional .FrontEngine.RejectedCallBack rejected_info = 13;
      case 13: {
        if (tag == 106) {
         parse_rejected_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rejected_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_heart_beat;
        break;
      }

      // optional .FrontEngine.HeartBeatCallBack heart_beat = 14;
      case 14: {
        if (tag == 114) {
         parse_heart_beat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_heart_beat()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_app_id;
        break;
      }

      // optional .FrontEngine.CheckAppIdCallBack app_id = 15;
      case 15: {
        if (tag == 122) {
         parse_app_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_app_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FrontEngine.CallBackMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FrontEngine.CallBackMessage)
  return false;
#undef DO_
}

void CallBackMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FrontEngine.CallBackMessage)
  // optional string request_id = 1;
  if (this->request_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_id().data(), this->request_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FrontEngine.CallBackMessage.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->request_id(), output);
  }

  // optional string client_id = 2;
  if (this->client_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->client_id().data(), this->client_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FrontEngine.CallBackMessage.client_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->client_id(), output);
  }

  // optional string front_id = 3;
  if (this->front_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->front_id().data(), this->front_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FrontEngine.CallBackMessage.front_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->front_id(), output);
  }

  // optional string md5 = 4;
  if (this->md5().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->md5().data(), this->md5().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FrontEngine.CallBackMessage.md5");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->md5(), output);
  }

  // optional .FrontEngine.enums.CallBackType type = 5;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->type(), output);
  }

  // optional .FrontEngine.CreateAccountCallBack account = 6;
  if (this->has_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->account_, output);
  }

  // optional .FrontEngine.QueryBalanceCallBack balance = 7;
  if (this->has_balance()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->balance_, output);
  }

  // optional .FrontEngine.QueryFeeCallBack fee = 8;
  if (this->has_fee()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->fee_, output);
  }

  // optional .FrontEngine.QueryOrderCallBack order = 9;
  if (this->has_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->order_, output);
  }

  // optional .FrontEngine.QueryOrdersCallBack orders = 10;
  if (this->has_orders()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->orders_, output);
  }

  // optional .FrontEngine.TradedCallBack traded_info = 11;
  if (this->has_traded_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->traded_info_, output);
  }

  // optional .FrontEngine.CanceledCallBack canceled_info = 12;
  if (this->has_canceled_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->canceled_info_, output);
  }

  // optional .FrontEngine.RejectedCallBack rejected_info = 13;
  if (this->has_rejected_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *this->rejected_info_, output);
  }

  // optional .FrontEngine.HeartBeatCallBack heart_beat = 14;
  if (this->has_heart_beat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *this->heart_beat_, output);
  }

  // optional .FrontEngine.CheckAppIdCallBack app_id = 15;
  if (this->has_app_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, *this->app_id_, output);
  }

  // @@protoc_insertion_point(serialize_end:FrontEngine.CallBackMessage)
}

::google::protobuf::uint8* CallBackMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:FrontEngine.CallBackMessage)
  // optional string request_id = 1;
  if (this->request_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_id().data(), this->request_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FrontEngine.CallBackMessage.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->request_id(), target);
  }

  // optional string client_id = 2;
  if (this->client_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->client_id().data(), this->client_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FrontEngine.CallBackMessage.client_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->client_id(), target);
  }

  // optional string front_id = 3;
  if (this->front_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->front_id().data(), this->front_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FrontEngine.CallBackMessage.front_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->front_id(), target);
  }

  // optional string md5 = 4;
  if (this->md5().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->md5().data(), this->md5().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FrontEngine.CallBackMessage.md5");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->md5(), target);
  }

  // optional .FrontEngine.enums.CallBackType type = 5;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->type(), target);
  }

  // optional .FrontEngine.CreateAccountCallBack account = 6;
  if (this->has_account()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, *this->account_, target);
  }

  // optional .FrontEngine.QueryBalanceCallBack balance = 7;
  if (this->has_balance()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, *this->balance_, target);
  }

  // optional .FrontEngine.QueryFeeCallBack fee = 8;
  if (this->has_fee()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, *this->fee_, target);
  }

  // optional .FrontEngine.QueryOrderCallBack order = 9;
  if (this->has_order()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, *this->order_, target);
  }

  // optional .FrontEngine.QueryOrdersCallBack orders = 10;
  if (this->has_orders()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, *this->orders_, target);
  }

  // optional .FrontEngine.TradedCallBack traded_info = 11;
  if (this->has_traded_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, *this->traded_info_, target);
  }

  // optional .FrontEngine.CanceledCallBack canceled_info = 12;
  if (this->has_canceled_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, *this->canceled_info_, target);
  }

  // optional .FrontEngine.RejectedCallBack rejected_info = 13;
  if (this->has_rejected_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, *this->rejected_info_, target);
  }

  // optional .FrontEngine.HeartBeatCallBack heart_beat = 14;
  if (this->has_heart_beat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, *this->heart_beat_, target);
  }

  // optional .FrontEngine.CheckAppIdCallBack app_id = 15;
  if (this->has_app_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, *this->app_id_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:FrontEngine.CallBackMessage)
  return target;
}

int CallBackMessage::ByteSize() const {
  int total_size = 0;

  // optional string request_id = 1;
  if (this->request_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->request_id());
  }

  // optional string client_id = 2;
  if (this->client_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->client_id());
  }

  // optional string front_id = 3;
  if (this->front_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->front_id());
  }

  // optional string md5 = 4;
  if (this->md5().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->md5());
  }

  // optional .FrontEngine.enums.CallBackType type = 5;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional .FrontEngine.CreateAccountCallBack account = 6;
  if (this->has_account()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->account_);
  }

  // optional .FrontEngine.QueryBalanceCallBack balance = 7;
  if (this->has_balance()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->balance_);
  }

  // optional .FrontEngine.QueryFeeCallBack fee = 8;
  if (this->has_fee()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->fee_);
  }

  // optional .FrontEngine.QueryOrderCallBack order = 9;
  if (this->has_order()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->order_);
  }

  // optional .FrontEngine.QueryOrdersCallBack orders = 10;
  if (this->has_orders()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->orders_);
  }

  // optional .FrontEngine.TradedCallBack traded_info = 11;
  if (this->has_traded_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->traded_info_);
  }

  // optional .FrontEngine.CanceledCallBack canceled_info = 12;
  if (this->has_canceled_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->canceled_info_);
  }

  // optional .FrontEngine.RejectedCallBack rejected_info = 13;
  if (this->has_rejected_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->rejected_info_);
  }

  // optional .FrontEngine.HeartBeatCallBack heart_beat = 14;
  if (this->has_heart_beat()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->heart_beat_);
  }

  // optional .FrontEngine.CheckAppIdCallBack app_id = 15;
  if (this->has_app_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->app_id_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CallBackMessage::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CallBackMessage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CallBackMessage>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CallBackMessage::MergeFrom(const CallBackMessage& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.request_id().size() > 0) {

    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  if (from.client_id().size() > 0) {

    client_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_id_);
  }
  if (from.front_id().size() > 0) {

    front_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.front_id_);
  }
  if (from.md5().size() > 0) {

    md5_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.md5_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.has_account()) {
    mutable_account()->::FrontEngine::CreateAccountCallBack::MergeFrom(from.account());
  }
  if (from.has_balance()) {
    mutable_balance()->::FrontEngine::QueryBalanceCallBack::MergeFrom(from.balance());
  }
  if (from.has_fee()) {
    mutable_fee()->::FrontEngine::QueryFeeCallBack::MergeFrom(from.fee());
  }
  if (from.has_order()) {
    mutable_order()->::FrontEngine::QueryOrderCallBack::MergeFrom(from.order());
  }
  if (from.has_orders()) {
    mutable_orders()->::FrontEngine::QueryOrdersCallBack::MergeFrom(from.orders());
  }
  if (from.has_traded_info()) {
    mutable_traded_info()->::FrontEngine::TradedCallBack::MergeFrom(from.traded_info());
  }
  if (from.has_canceled_info()) {
    mutable_canceled_info()->::FrontEngine::CanceledCallBack::MergeFrom(from.canceled_info());
  }
  if (from.has_rejected_info()) {
    mutable_rejected_info()->::FrontEngine::RejectedCallBack::MergeFrom(from.rejected_info());
  }
  if (from.has_heart_beat()) {
    mutable_heart_beat()->::FrontEngine::HeartBeatCallBack::MergeFrom(from.heart_beat());
  }
  if (from.has_app_id()) {
    mutable_app_id()->::FrontEngine::CheckAppIdCallBack::MergeFrom(from.app_id());
  }
}

void CallBackMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CallBackMessage::CopyFrom(const CallBackMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CallBackMessage::IsInitialized() const {

  return true;
}

void CallBackMessage::Swap(CallBackMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CallBackMessage::InternalSwap(CallBackMessage* other) {
  request_id_.Swap(&other->request_id_);
  client_id_.Swap(&other->client_id_);
  front_id_.Swap(&other->front_id_);
  md5_.Swap(&other->md5_);
  std::swap(type_, other->type_);
  std::swap(account_, other->account_);
  std::swap(balance_, other->balance_);
  std::swap(fee_, other->fee_);
  std::swap(order_, other->order_);
  std::swap(orders_, other->orders_);
  std::swap(traded_info_, other->traded_info_);
  std::swap(canceled_info_, other->canceled_info_);
  std::swap(rejected_info_, other->rejected_info_);
  std::swap(heart_beat_, other->heart_beat_);
  std::swap(app_id_, other->app_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CallBackMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CallBackMessage_descriptor_;
  metadata.reflection = CallBackMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CallBackMessage

// optional string request_id = 1;
void CallBackMessage::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& CallBackMessage::request_id() const {
  // @@protoc_insertion_point(field_get:FrontEngine.CallBackMessage.request_id)
  return request_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CallBackMessage::set_request_id(const ::std::string& value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FrontEngine.CallBackMessage.request_id)
}
 void CallBackMessage::set_request_id(const char* value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FrontEngine.CallBackMessage.request_id)
}
 void CallBackMessage::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FrontEngine.CallBackMessage.request_id)
}
 ::std::string* CallBackMessage::mutable_request_id() {
  
  // @@protoc_insertion_point(field_mutable:FrontEngine.CallBackMessage.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CallBackMessage::release_request_id() {
  
  return request_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CallBackMessage::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.CallBackMessage.request_id)
}

// optional string client_id = 2;
void CallBackMessage::clear_client_id() {
  client_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& CallBackMessage::client_id() const {
  // @@protoc_insertion_point(field_get:FrontEngine.CallBackMessage.client_id)
  return client_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CallBackMessage::set_client_id(const ::std::string& value) {
  
  client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FrontEngine.CallBackMessage.client_id)
}
 void CallBackMessage::set_client_id(const char* value) {
  
  client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FrontEngine.CallBackMessage.client_id)
}
 void CallBackMessage::set_client_id(const char* value, size_t size) {
  
  client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FrontEngine.CallBackMessage.client_id)
}
 ::std::string* CallBackMessage::mutable_client_id() {
  
  // @@protoc_insertion_point(field_mutable:FrontEngine.CallBackMessage.client_id)
  return client_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CallBackMessage::release_client_id() {
  
  return client_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CallBackMessage::set_allocated_client_id(::std::string* client_id) {
  if (client_id != NULL) {
    
  } else {
    
  }
  client_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_id);
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.CallBackMessage.client_id)
}

// optional string front_id = 3;
void CallBackMessage::clear_front_id() {
  front_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& CallBackMessage::front_id() const {
  // @@protoc_insertion_point(field_get:FrontEngine.CallBackMessage.front_id)
  return front_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CallBackMessage::set_front_id(const ::std::string& value) {
  
  front_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FrontEngine.CallBackMessage.front_id)
}
 void CallBackMessage::set_front_id(const char* value) {
  
  front_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FrontEngine.CallBackMessage.front_id)
}
 void CallBackMessage::set_front_id(const char* value, size_t size) {
  
  front_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FrontEngine.CallBackMessage.front_id)
}
 ::std::string* CallBackMessage::mutable_front_id() {
  
  // @@protoc_insertion_point(field_mutable:FrontEngine.CallBackMessage.front_id)
  return front_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CallBackMessage::release_front_id() {
  
  return front_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CallBackMessage::set_allocated_front_id(::std::string* front_id) {
  if (front_id != NULL) {
    
  } else {
    
  }
  front_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), front_id);
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.CallBackMessage.front_id)
}

// optional string md5 = 4;
void CallBackMessage::clear_md5() {
  md5_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& CallBackMessage::md5() const {
  // @@protoc_insertion_point(field_get:FrontEngine.CallBackMessage.md5)
  return md5_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CallBackMessage::set_md5(const ::std::string& value) {
  
  md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FrontEngine.CallBackMessage.md5)
}
 void CallBackMessage::set_md5(const char* value) {
  
  md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FrontEngine.CallBackMessage.md5)
}
 void CallBackMessage::set_md5(const char* value, size_t size) {
  
  md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FrontEngine.CallBackMessage.md5)
}
 ::std::string* CallBackMessage::mutable_md5() {
  
  // @@protoc_insertion_point(field_mutable:FrontEngine.CallBackMessage.md5)
  return md5_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CallBackMessage::release_md5() {
  
  return md5_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CallBackMessage::set_allocated_md5(::std::string* md5) {
  if (md5 != NULL) {
    
  } else {
    
  }
  md5_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), md5);
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.CallBackMessage.md5)
}

// optional .FrontEngine.enums.CallBackType type = 5;
void CallBackMessage::clear_type() {
  type_ = 0;
}
 ::FrontEngine::enums_CallBackType CallBackMessage::type() const {
  // @@protoc_insertion_point(field_get:FrontEngine.CallBackMessage.type)
  return static_cast< ::FrontEngine::enums_CallBackType >(type_);
}
 void CallBackMessage::set_type(::FrontEngine::enums_CallBackType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:FrontEngine.CallBackMessage.type)
}

// optional .FrontEngine.CreateAccountCallBack account = 6;
bool CallBackMessage::has_account() const {
  return !_is_default_instance_ && account_ != NULL;
}
void CallBackMessage::clear_account() {
  if (GetArenaNoVirtual() == NULL && account_ != NULL) delete account_;
  account_ = NULL;
}
const ::FrontEngine::CreateAccountCallBack& CallBackMessage::account() const {
  // @@protoc_insertion_point(field_get:FrontEngine.CallBackMessage.account)
  return account_ != NULL ? *account_ : *default_instance_->account_;
}
::FrontEngine::CreateAccountCallBack* CallBackMessage::mutable_account() {
  
  if (account_ == NULL) {
    account_ = new ::FrontEngine::CreateAccountCallBack;
  }
  // @@protoc_insertion_point(field_mutable:FrontEngine.CallBackMessage.account)
  return account_;
}
::FrontEngine::CreateAccountCallBack* CallBackMessage::release_account() {
  
  ::FrontEngine::CreateAccountCallBack* temp = account_;
  account_ = NULL;
  return temp;
}
void CallBackMessage::set_allocated_account(::FrontEngine::CreateAccountCallBack* account) {
  delete account_;
  account_ = account;
  if (account) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.CallBackMessage.account)
}

// optional .FrontEngine.QueryBalanceCallBack balance = 7;
bool CallBackMessage::has_balance() const {
  return !_is_default_instance_ && balance_ != NULL;
}
void CallBackMessage::clear_balance() {
  if (GetArenaNoVirtual() == NULL && balance_ != NULL) delete balance_;
  balance_ = NULL;
}
const ::FrontEngine::QueryBalanceCallBack& CallBackMessage::balance() const {
  // @@protoc_insertion_point(field_get:FrontEngine.CallBackMessage.balance)
  return balance_ != NULL ? *balance_ : *default_instance_->balance_;
}
::FrontEngine::QueryBalanceCallBack* CallBackMessage::mutable_balance() {
  
  if (balance_ == NULL) {
    balance_ = new ::FrontEngine::QueryBalanceCallBack;
  }
  // @@protoc_insertion_point(field_mutable:FrontEngine.CallBackMessage.balance)
  return balance_;
}
::FrontEngine::QueryBalanceCallBack* CallBackMessage::release_balance() {
  
  ::FrontEngine::QueryBalanceCallBack* temp = balance_;
  balance_ = NULL;
  return temp;
}
void CallBackMessage::set_allocated_balance(::FrontEngine::QueryBalanceCallBack* balance) {
  delete balance_;
  balance_ = balance;
  if (balance) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.CallBackMessage.balance)
}

// optional .FrontEngine.QueryFeeCallBack fee = 8;
bool CallBackMessage::has_fee() const {
  return !_is_default_instance_ && fee_ != NULL;
}
void CallBackMessage::clear_fee() {
  if (GetArenaNoVirtual() == NULL && fee_ != NULL) delete fee_;
  fee_ = NULL;
}
const ::FrontEngine::QueryFeeCallBack& CallBackMessage::fee() const {
  // @@protoc_insertion_point(field_get:FrontEngine.CallBackMessage.fee)
  return fee_ != NULL ? *fee_ : *default_instance_->fee_;
}
::FrontEngine::QueryFeeCallBack* CallBackMessage::mutable_fee() {
  
  if (fee_ == NULL) {
    fee_ = new ::FrontEngine::QueryFeeCallBack;
  }
  // @@protoc_insertion_point(field_mutable:FrontEngine.CallBackMessage.fee)
  return fee_;
}
::FrontEngine::QueryFeeCallBack* CallBackMessage::release_fee() {
  
  ::FrontEngine::QueryFeeCallBack* temp = fee_;
  fee_ = NULL;
  return temp;
}
void CallBackMessage::set_allocated_fee(::FrontEngine::QueryFeeCallBack* fee) {
  delete fee_;
  fee_ = fee;
  if (fee) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.CallBackMessage.fee)
}

// optional .FrontEngine.QueryOrderCallBack order = 9;
bool CallBackMessage::has_order() const {
  return !_is_default_instance_ && order_ != NULL;
}
void CallBackMessage::clear_order() {
  if (GetArenaNoVirtual() == NULL && order_ != NULL) delete order_;
  order_ = NULL;
}
const ::FrontEngine::QueryOrderCallBack& CallBackMessage::order() const {
  // @@protoc_insertion_point(field_get:FrontEngine.CallBackMessage.order)
  return order_ != NULL ? *order_ : *default_instance_->order_;
}
::FrontEngine::QueryOrderCallBack* CallBackMessage::mutable_order() {
  
  if (order_ == NULL) {
    order_ = new ::FrontEngine::QueryOrderCallBack;
  }
  // @@protoc_insertion_point(field_mutable:FrontEngine.CallBackMessage.order)
  return order_;
}
::FrontEngine::QueryOrderCallBack* CallBackMessage::release_order() {
  
  ::FrontEngine::QueryOrderCallBack* temp = order_;
  order_ = NULL;
  return temp;
}
void CallBackMessage::set_allocated_order(::FrontEngine::QueryOrderCallBack* order) {
  delete order_;
  order_ = order;
  if (order) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.CallBackMessage.order)
}

// optional .FrontEngine.QueryOrdersCallBack orders = 10;
bool CallBackMessage::has_orders() const {
  return !_is_default_instance_ && orders_ != NULL;
}
void CallBackMessage::clear_orders() {
  if (GetArenaNoVirtual() == NULL && orders_ != NULL) delete orders_;
  orders_ = NULL;
}
const ::FrontEngine::QueryOrdersCallBack& CallBackMessage::orders() const {
  // @@protoc_insertion_point(field_get:FrontEngine.CallBackMessage.orders)
  return orders_ != NULL ? *orders_ : *default_instance_->orders_;
}
::FrontEngine::QueryOrdersCallBack* CallBackMessage::mutable_orders() {
  
  if (orders_ == NULL) {
    orders_ = new ::FrontEngine::QueryOrdersCallBack;
  }
  // @@protoc_insertion_point(field_mutable:FrontEngine.CallBackMessage.orders)
  return orders_;
}
::FrontEngine::QueryOrdersCallBack* CallBackMessage::release_orders() {
  
  ::FrontEngine::QueryOrdersCallBack* temp = orders_;
  orders_ = NULL;
  return temp;
}
void CallBackMessage::set_allocated_orders(::FrontEngine::QueryOrdersCallBack* orders) {
  delete orders_;
  orders_ = orders;
  if (orders) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.CallBackMessage.orders)
}

// optional .FrontEngine.TradedCallBack traded_info = 11;
bool CallBackMessage::has_traded_info() const {
  return !_is_default_instance_ && traded_info_ != NULL;
}
void CallBackMessage::clear_traded_info() {
  if (GetArenaNoVirtual() == NULL && traded_info_ != NULL) delete traded_info_;
  traded_info_ = NULL;
}
const ::FrontEngine::TradedCallBack& CallBackMessage::traded_info() const {
  // @@protoc_insertion_point(field_get:FrontEngine.CallBackMessage.traded_info)
  return traded_info_ != NULL ? *traded_info_ : *default_instance_->traded_info_;
}
::FrontEngine::TradedCallBack* CallBackMessage::mutable_traded_info() {
  
  if (traded_info_ == NULL) {
    traded_info_ = new ::FrontEngine::TradedCallBack;
  }
  // @@protoc_insertion_point(field_mutable:FrontEngine.CallBackMessage.traded_info)
  return traded_info_;
}
::FrontEngine::TradedCallBack* CallBackMessage::release_traded_info() {
  
  ::FrontEngine::TradedCallBack* temp = traded_info_;
  traded_info_ = NULL;
  return temp;
}
void CallBackMessage::set_allocated_traded_info(::FrontEngine::TradedCallBack* traded_info) {
  delete traded_info_;
  traded_info_ = traded_info;
  if (traded_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.CallBackMessage.traded_info)
}

// optional .FrontEngine.CanceledCallBack canceled_info = 12;
bool CallBackMessage::has_canceled_info() const {
  return !_is_default_instance_ && canceled_info_ != NULL;
}
void CallBackMessage::clear_canceled_info() {
  if (GetArenaNoVirtual() == NULL && canceled_info_ != NULL) delete canceled_info_;
  canceled_info_ = NULL;
}
const ::FrontEngine::CanceledCallBack& CallBackMessage::canceled_info() const {
  // @@protoc_insertion_point(field_get:FrontEngine.CallBackMessage.canceled_info)
  return canceled_info_ != NULL ? *canceled_info_ : *default_instance_->canceled_info_;
}
::FrontEngine::CanceledCallBack* CallBackMessage::mutable_canceled_info() {
  
  if (canceled_info_ == NULL) {
    canceled_info_ = new ::FrontEngine::CanceledCallBack;
  }
  // @@protoc_insertion_point(field_mutable:FrontEngine.CallBackMessage.canceled_info)
  return canceled_info_;
}
::FrontEngine::CanceledCallBack* CallBackMessage::release_canceled_info() {
  
  ::FrontEngine::CanceledCallBack* temp = canceled_info_;
  canceled_info_ = NULL;
  return temp;
}
void CallBackMessage::set_allocated_canceled_info(::FrontEngine::CanceledCallBack* canceled_info) {
  delete canceled_info_;
  canceled_info_ = canceled_info;
  if (canceled_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.CallBackMessage.canceled_info)
}

// optional .FrontEngine.RejectedCallBack rejected_info = 13;
bool CallBackMessage::has_rejected_info() const {
  return !_is_default_instance_ && rejected_info_ != NULL;
}
void CallBackMessage::clear_rejected_info() {
  if (GetArenaNoVirtual() == NULL && rejected_info_ != NULL) delete rejected_info_;
  rejected_info_ = NULL;
}
const ::FrontEngine::RejectedCallBack& CallBackMessage::rejected_info() const {
  // @@protoc_insertion_point(field_get:FrontEngine.CallBackMessage.rejected_info)
  return rejected_info_ != NULL ? *rejected_info_ : *default_instance_->rejected_info_;
}
::FrontEngine::RejectedCallBack* CallBackMessage::mutable_rejected_info() {
  
  if (rejected_info_ == NULL) {
    rejected_info_ = new ::FrontEngine::RejectedCallBack;
  }
  // @@protoc_insertion_point(field_mutable:FrontEngine.CallBackMessage.rejected_info)
  return rejected_info_;
}
::FrontEngine::RejectedCallBack* CallBackMessage::release_rejected_info() {
  
  ::FrontEngine::RejectedCallBack* temp = rejected_info_;
  rejected_info_ = NULL;
  return temp;
}
void CallBackMessage::set_allocated_rejected_info(::FrontEngine::RejectedCallBack* rejected_info) {
  delete rejected_info_;
  rejected_info_ = rejected_info;
  if (rejected_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.CallBackMessage.rejected_info)
}

// optional .FrontEngine.HeartBeatCallBack heart_beat = 14;
bool CallBackMessage::has_heart_beat() const {
  return !_is_default_instance_ && heart_beat_ != NULL;
}
void CallBackMessage::clear_heart_beat() {
  if (GetArenaNoVirtual() == NULL && heart_beat_ != NULL) delete heart_beat_;
  heart_beat_ = NULL;
}
const ::FrontEngine::HeartBeatCallBack& CallBackMessage::heart_beat() const {
  // @@protoc_insertion_point(field_get:FrontEngine.CallBackMessage.heart_beat)
  return heart_beat_ != NULL ? *heart_beat_ : *default_instance_->heart_beat_;
}
::FrontEngine::HeartBeatCallBack* CallBackMessage::mutable_heart_beat() {
  
  if (heart_beat_ == NULL) {
    heart_beat_ = new ::FrontEngine::HeartBeatCallBack;
  }
  // @@protoc_insertion_point(field_mutable:FrontEngine.CallBackMessage.heart_beat)
  return heart_beat_;
}
::FrontEngine::HeartBeatCallBack* CallBackMessage::release_heart_beat() {
  
  ::FrontEngine::HeartBeatCallBack* temp = heart_beat_;
  heart_beat_ = NULL;
  return temp;
}
void CallBackMessage::set_allocated_heart_beat(::FrontEngine::HeartBeatCallBack* heart_beat) {
  delete heart_beat_;
  heart_beat_ = heart_beat;
  if (heart_beat) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.CallBackMessage.heart_beat)
}

// optional .FrontEngine.CheckAppIdCallBack app_id = 15;
bool CallBackMessage::has_app_id() const {
  return !_is_default_instance_ && app_id_ != NULL;
}
void CallBackMessage::clear_app_id() {
  if (GetArenaNoVirtual() == NULL && app_id_ != NULL) delete app_id_;
  app_id_ = NULL;
}
const ::FrontEngine::CheckAppIdCallBack& CallBackMessage::app_id() const {
  // @@protoc_insertion_point(field_get:FrontEngine.CallBackMessage.app_id)
  return app_id_ != NULL ? *app_id_ : *default_instance_->app_id_;
}
::FrontEngine::CheckAppIdCallBack* CallBackMessage::mutable_app_id() {
  
  if (app_id_ == NULL) {
    app_id_ = new ::FrontEngine::CheckAppIdCallBack;
  }
  // @@protoc_insertion_point(field_mutable:FrontEngine.CallBackMessage.app_id)
  return app_id_;
}
::FrontEngine::CheckAppIdCallBack* CallBackMessage::release_app_id() {
  
  ::FrontEngine::CheckAppIdCallBack* temp = app_id_;
  app_id_ = NULL;
  return temp;
}
void CallBackMessage::set_allocated_app_id(::FrontEngine::CheckAppIdCallBack* app_id) {
  delete app_id_;
  app_id_ = app_id;
  if (app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:FrontEngine.CallBackMessage.app_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace FrontEngine

// @@protoc_insertion_point(global_scope)
